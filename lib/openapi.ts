/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export type paths = {
  "/api/v1/app/config": {
    /** Get Config */
    get: operations["get_config"]
  }
  "/api/v1/app/invocation_cache": {
    /**
     * Clear Invocation Cache
     * @description Clears the invocation cache
     */
    delete: operations["clear_invocation_cache"]
  }
  "/api/v1/app/invocation_cache/disable": {
    /**
     * Disable Invocation Cache
     * @description Clears the invocation cache
     */
    put: operations["disable_invocation_cache"]
  }
  "/api/v1/app/invocation_cache/enable": {
    /**
     * Enable Invocation Cache
     * @description Clears the invocation cache
     */
    put: operations["enable_invocation_cache"]
  }
  "/api/v1/app/invocation_cache/status": {
    /**
     * Get Invocation Cache Status
     * @description Clears the invocation cache
     */
    get: operations["get_invocation_cache_status"]
  }
  "/api/v1/app/logging": {
    /**
     * Get Log Level
     * @description Returns the log level
     */
    get: operations["get_log_level"]
    /**
     * Set Log Level
     * @description Sets the log verbosity level
     */
    post: operations["set_log_level"]
  }
  "/api/v1/app/version": {
    /** Get Version */
    get: operations["app_version"]
  }
  "/api/v1/board_images/": {
    /**
     * Remove Image From Board
     * @description Removes an image from its board, if it had one
     */
    delete: operations["remove_image_from_board"]
    /**
     * Add Image To Board
     * @description Creates a board_image
     */
    post: operations["add_image_to_board"]
  }
  "/api/v1/board_images/batch": {
    /**
     * Add Images To Board
     * @description Adds a list of images to a board
     */
    post: operations["add_images_to_board"]
  }
  "/api/v1/board_images/batch/delete": {
    /**
     * Remove Images From Board
     * @description Removes a list of images from their board, if they had one
     */
    post: operations["remove_images_from_board"]
  }
  "/api/v1/boards/": {
    /**
     * List Boards
     * @description Gets a list of boards
     */
    get: operations["list_boards"]
    /**
     * Create Board
     * @description Creates a board
     */
    post: operations["create_board"]
  }
  "/api/v1/boards/{board_id}": {
    /**
     * Delete Board
     * @description Deletes a board
     */
    delete: operations["delete_board"]
    /**
     * Get Board
     * @description Gets a board
     */
    get: operations["get_board"]
    /**
     * Update Board
     * @description Updates a board
     */
    patch: operations["update_board"]
  }
  "/api/v1/boards/{board_id}/image_names": {
    /**
     * List All Board Image Names
     * @description Gets a list of images for a board
     */
    get: operations["list_all_board_image_names"]
  }
  "/api/v1/images/": {
    /**
     * List Image Dtos
     * @description Gets a list of image DTOs
     */
    get: operations["list_image_dtos"]
  }
  "/api/v1/images/clear-intermediates": {
    /**
     * Clear Intermediates
     * @description Clears all intermediates
     */
    post: operations["clear_intermediates"]
  }
  "/api/v1/images/delete": {
    /** Delete Images From List */
    post: operations["delete_images_from_list"]
  }
  "/api/v1/images/download": {
    /** Download Images From List */
    post: operations["download_images_from_list"]
  }
  "/api/v1/images/i/{image_name}": {
    /**
     * Delete Image
     * @description Deletes an image
     */
    delete: operations["delete_image"]
    /**
     * Get Image Dto
     * @description Gets an image's DTO
     */
    get: operations["get_image_dto"]
    /**
     * Update Image
     * @description Updates an image
     */
    patch: operations["update_image"]
  }
  "/api/v1/images/i/{image_name}/full": {
    /**
     * Get Image Full
     * @description Gets a full-resolution image file
     */
    get: operations["get_image_full"]
    /**
     * Get Image Full
     * @description Gets a full-resolution image file
     */
    head: operations["get_image_full"]
  }
  "/api/v1/images/i/{image_name}/metadata": {
    /**
     * Get Image Metadata
     * @description Gets an image's metadata
     */
    get: operations["get_image_metadata"]
  }
  "/api/v1/images/i/{image_name}/thumbnail": {
    /**
     * Get Image Thumbnail
     * @description Gets a thumbnail image file
     */
    get: operations["get_image_thumbnail"]
  }
  "/api/v1/images/i/{image_name}/urls": {
    /**
     * Get Image Urls
     * @description Gets an image and thumbnail URL
     */
    get: operations["get_image_urls"]
  }
  "/api/v1/images/star": {
    /** Star Images In List */
    post: operations["star_images_in_list"]
  }
  "/api/v1/images/unstar": {
    /** Unstar Images In List */
    post: operations["unstar_images_in_list"]
  }
  "/api/v1/images/upload": {
    /**
     * Upload Image
     * @description Uploads an image
     */
    post: operations["upload_image"]
  }
  "/api/v1/models/": {
    /**
     * List Models
     * @description Gets a list of models
     */
    get: operations["list_models"]
  }
  "/api/v1/models/{base_model}/{model_type}/{model_name}": {
    /**
     * Delete Model
     * @description Delete Model
     */
    delete: operations["del_model"]
    /**
     * Update Model
     * @description Update model contents with a new config. If the model name or base fields are changed, then the model is renamed.
     */
    patch: operations["update_model"]
  }
  "/api/v1/models/add": {
    /**
     * Add Model
     * @description Add a model using the configuration information appropriate for its type. Only local models can be added by path
     */
    post: operations["add_model"]
  }
  "/api/v1/models/ckpt_confs": {
    /**
     * List Ckpt Configs
     * @description Return a list of the legacy checkpoint configuration files stored in `ROOT/configs/stable-diffusion`, relative to ROOT.
     */
    get: operations["list_ckpt_configs"]
  }
  "/api/v1/models/convert/{base_model}/{model_type}/{model_name}": {
    /**
     * Convert Model
     * @description Convert a checkpoint model into a diffusers model, optionally saving to the indicated destination directory, or `models` if none.
     */
    put: operations["convert_model"]
  }
  "/api/v1/models/import": {
    /**
     * Import Model
     * @description Add a model using its local path, repo_id, or remote URL. Model characteristics will be probed and configured automatically
     */
    post: operations["import_model"]
  }
  "/api/v1/models/merge/{base_model}": {
    /**
     * Merge Models
     * @description Convert a checkpoint model into a diffusers model
     */
    put: operations["merge_models"]
  }
  "/api/v1/models/search": {
    /** Search For Models */
    get: operations["search_for_models"]
  }
  "/api/v1/models/sync": {
    /**
     * Sync To Config
     * @description Call after making changes to models.yaml, autoimport directories or models directory to synchronize
     * in-memory data structures with disk data structures.
     */
    post: operations["sync_to_config"]
  }
  "/api/v1/queue/{queue_id}/b/{batch_id}/status": {
    /**
     * Get Batch Status
     * @description Gets the status of the session queue
     */
    get: operations["get_batch_status"]
  }
  "/api/v1/queue/{queue_id}/cancel_by_batch_ids": {
    /**
     * Cancel By Batch Ids
     * @description Immediately cancels all queue items from the given batch ids
     */
    put: operations["cancel_by_batch_ids"]
  }
  "/api/v1/queue/{queue_id}/clear": {
    /**
     * Clear
     * @description Clears the queue entirely, immediately canceling the currently-executing session
     */
    put: operations["clear"]
  }
  "/api/v1/queue/{queue_id}/current": {
    /**
     * Get Current Queue Item
     * @description Gets the currently execution queue item
     */
    get: operations["get_current_queue_item"]
  }
  "/api/v1/queue/{queue_id}/enqueue_batch": {
    /**
     * Enqueue Batch
     * @description Processes a batch and enqueues the output graphs for execution.
     */
    post: operations["enqueue_batch"]
  }
  "/api/v1/queue/{queue_id}/enqueue_graph": {
    /**
     * Enqueue Graph
     * @description Enqueues a graph for single execution.
     */
    post: operations["enqueue_graph"]
  }
  "/api/v1/queue/{queue_id}/i/{item_id}": {
    /**
     * Get Queue Item
     * @description Gets a queue item
     */
    get: operations["get_queue_item"]
  }
  "/api/v1/queue/{queue_id}/i/{item_id}/cancel": {
    /**
     * Cancel Queue Item
     * @description Deletes a queue item
     */
    put: operations["cancel_queue_item"]
  }
  "/api/v1/queue/{queue_id}/list": {
    /**
     * List Queue Items
     * @description Gets all queue items (without graphs)
     */
    get: operations["list_queue_items"]
  }
  "/api/v1/queue/{queue_id}/next": {
    /**
     * Get Next Queue Item
     * @description Gets the next queue item, without executing it
     */
    get: operations["get_next_queue_item"]
  }
  "/api/v1/queue/{queue_id}/processor/pause": {
    /**
     * Pause
     * @description Pauses session processor
     */
    put: operations["pause"]
  }
  "/api/v1/queue/{queue_id}/processor/resume": {
    /**
     * Resume
     * @description Resumes session processor
     */
    put: operations["resume"]
  }
  "/api/v1/queue/{queue_id}/prune": {
    /**
     * Prune
     * @description Prunes all completed or errored queue items
     */
    put: operations["prune"]
  }
  "/api/v1/queue/{queue_id}/status": {
    /**
     * Get Queue Status
     * @description Gets the status of the session queue
     */
    get: operations["get_queue_status"]
  }
  "/api/v1/sessions/": {
    /**
     * List Sessions
     * @deprecated
     * @description Gets a list of sessions, optionally searching
     */
    get: operations["list_sessions"]
    /**
     * Create Session
     * @deprecated
     * @description Creates a new session, optionally initializing it with an invocation graph
     */
    post: operations["create_session"]
  }
  "/api/v1/sessions/{session_id}": {
    /**
     * Get Session
     * @deprecated
     * @description Gets a session
     */
    get: operations["get_session"]
  }
  "/api/v1/sessions/{session_id}/edges": {
    /**
     * Add Edge
     * @deprecated
     * @description Adds an edge to the graph
     */
    post: operations["add_edge"]
  }
  "/api/v1/sessions/{session_id}/edges/{from_node_id}/{from_field}/{to_node_id}/{to_field}": {
    /**
     * Delete Edge
     * @deprecated
     * @description Deletes an edge from the graph
     */
    delete: operations["delete_edge"]
  }
  "/api/v1/sessions/{session_id}/invoke": {
    /**
     * Cancel Session Invoke
     * @deprecated
     * @description Invokes a session
     */
    delete: operations["cancel_session_invoke"]
    /**
     * Invoke Session
     * @deprecated
     * @description Invokes a session
     */
    put: operations["invoke_session"]
  }
  "/api/v1/sessions/{session_id}/nodes": {
    /**
     * Add Node
     * @deprecated
     * @description Adds a node to the graph
     */
    post: operations["add_node"]
  }
  "/api/v1/sessions/{session_id}/nodes/{node_path}": {
    /**
     * Delete Node
     * @deprecated
     * @description Deletes a node in the graph and removes all linked edges
     */
    delete: operations["delete_node"]
    /**
     * Update Node
     * @deprecated
     * @description Updates a node in the graph and removes all linked edges
     */
    put: operations["update_node"]
  }
  "/api/v1/utilities/dynamicprompts": {
    /**
     * Parse Dynamicprompts
     * @description Creates a batch process
     */
    post: operations["parse_dynamicprompts"]
  }
};

export type webhooks = Record<string, never>;

export type components = {
  headers: never
  parameters: never
  pathItems: never
  requestBodies: never
  responses: never
  schemas: {
    /**
     * _InputField
     * @description *DO NOT USE*
     * This helper class is used to tell the client about our custom field attributes via OpenAPI
     * schema generation, and Typescript type generation from that schema. It serves no functional
     * purpose in the backend.
     */
    _InputField: {
      input: components["schemas"]["Input"]
      /** Item Default */
      item_default?: unknown
      /** Ui Choice Labels */
      ui_choice_labels?: Record<string, string>
      ui_component?: components["schemas"]["UIComponent"]
      /** Ui Hidden */
      ui_hidden: boolean
      /** Ui Order */
      ui_order?: number
      ui_type?: components["schemas"]["UIType"]
    }
    /**
     * _OutputField
     * @description *DO NOT USE*
     * This helper class is used to tell the client about our custom field attributes via OpenAPI
     * schema generation, and Typescript type generation from that schema. It serves no functional
     * purpose in the backend.
     */
    _OutputField: {
      /** Ui Hidden */
      ui_hidden: boolean
      /** Ui Order */
      ui_order?: number
      ui_type?: components["schemas"]["UIType"]
    }
    /**
     * A B Switch (Float)
     * @description Switch between A and B for output
     */
    ABSwitchFloat: {
      /**
       * A
       * @description Input A
       */
      a: number
      /**
       * B
       * @description Input B
       */
      b: number
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Switch
       * @description Output A if off, B if on
       * @default false
       */
      switch?: boolean
      /**
       * Type
       * @default ab_switch_float
       * @enum {string}
       */
      type: "ab_switch_float"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * A B Switch (Integer)
     * @description Switch between A and B for output
     */
    ABSwitchInt: {
      /**
       * A
       * @description Input A
       */
      a: number
      /**
       * B
       * @description Input B
       */
      b: number
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Switch
       * @description Output A if off, B if on
       * @default false
       */
      switch?: boolean
      /**
       * Type
       * @default ab_switch_int
       * @enum {string}
       */
      type: "ab_switch_int"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * Adaptive EQ
     * @description Adaptive Histogram Equalization using skimage.
     */
    AdaptiveEQInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Image
       * @description Input image
       */
      image: components["schemas"]["ImageField"]
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Strength
       * @description Adaptive EQ strength
       * @default 1.5
       */
      strength?: number
      /**
       * Type
       * @default adaptive_eq
       * @enum {string}
       */
      type: "adaptive_eq"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /** AddImagesToBoardResult */
    AddImagesToBoardResult: {
      /**
       * Added Image Names
       * @description The image names that were added to the board
       */
      added_image_names: string[]
      /**
       * Board Id
       * @description The id of the board the images were added to
       */
      board_id: string
    }
    /**
     * Add Integers
     * @description Adds two numbers
     */
    AddInvocation: {
      /**
       * A
       * @description The first number
       * @default 0
       */
      a?: number
      /**
       * B
       * @description The second number
       * @default 0
       */
      b?: number
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Type
       * @default add
       * @enum {string}
       */
      type: "add"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * AppConfig
     * @description App Config Response
     */
    AppConfig: {
      /**
       * Infill Methods
       * @description List of available infill methods
       */
      infill_methods: string[]
      /**
       * Nsfw Methods
       * @description List of NSFW checking methods
       */
      nsfw_methods: string[]
      /**
       * Upscaling Methods
       * @description List of upscaling methods
       */
      upscaling_methods: components["schemas"]["Upscaler"][]
      /**
       * Watermarking Methods
       * @description List of invisible watermark methods
       */
      watermarking_methods: string[]
    }
    /**
     * AppVersion
     * @description App Version Response
     */
    AppVersion: {
      /**
       * Version
       * @description App version
       */
      version: string
    }
    /**
     * BaseModelType
     * @description An enumeration.
     * @enum {string}
     */
    BaseModelType: "any" | "sd-1" | "sd-2" | "sdxl" | "sdxl-refiner"
    /** Batch */
    Batch: {
      /**
       * Batch Id
       * @description The ID of the batch
       */
      batch_id?: string
      /**
       * Data
       * @description The batch data collection.
       */
      data?: components["schemas"]["BatchDatum"][][]
      /**
       * Graph
       * @description The graph to initialize the session with
       */
      graph: components["schemas"]["Graph"]
      /**
       * Runs
       * @description Int stating how many times to iterate through all possible batch indices
       * @default 1
       */
      runs: number
    }
    /** BatchDatum */
    BatchDatum: {
      /**
       * Field Name
       * @description The field into which this batch data collection will be substituted.
       */
      field_name: string
      /**
       * Items
       * @description The list of items to substitute into the node/field.
       */
      items?: (number | string)[]
      /**
       * Node Path
       * @description The node into which this batch data collection will be substituted.
       */
      node_path: string
    }
    /** BatchStatus */
    BatchStatus: {
      /**
       * Batch Id
       * @description The ID of the batch
       */
      batch_id: string
      /**
       * Canceled
       * @description Number of queue items with status 'canceled'
       */
      canceled: number
      /**
       * Completed
       * @description Number of queue items with status 'complete'
       */
      completed: number
      /**
       * Failed
       * @description Number of queue items with status 'error'
       */
      failed: number
      /**
       * In Progress
       * @description Number of queue items with status 'in_progress'
       */
      in_progress: number
      /**
       * Pending
       * @description Number of queue items with status 'pending'
       */
      pending: number
      /**
       * Queue Id
       * @description The ID of the queue
       */
      queue_id: string
      /**
       * Total
       * @description Total number of queue items
       */
      total: number
    }
    /**
     * Blank Image
     * @description Creates a blank image and forwards it to the pipeline
     */
    BlankImageInvocation: {
      /**
       * Color
       * @description The color of the image
       * @default {
       *   "r": 0,
       *   "g": 0,
       *   "b": 0,
       *   "a": 255
       * }
       */
      color?: components["schemas"]["ColorField"]
      /**
       * Height
       * @description The height of the image
       * @default 512
       */
      height?: number
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Mode
       * @description The mode of the image
       * @default RGB
       * @enum {string}
       */
      mode?: "RGB" | "RGBA"
      /**
       * Type
       * @default blank_image
       * @enum {string}
       */
      type: "blank_image"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Width
       * @description The width of the image
       * @default 512
       */
      width?: number
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * Blend Latents
     * @description Blend two latents using a given alpha. Latents must have same size.
     */
    BlendLatentsInvocation: {
      /**
       * Alpha
       * @description Blending factor. 0.0 = use input A only, 1.0 = use input B only, 0.5 = 50% mix of input A and input B.
       * @default 0.5
       */
      alpha?: number
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Latents A
       * @description Latents tensor
       */
      latents_a: components["schemas"]["LatentsField"]
      /**
       * Latents B
       * @description Latents tensor
       */
      latents_b: components["schemas"]["LatentsField"]
      /**
       * Type
       * @default lblend
       * @enum {string}
       */
      type: "lblend"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /** BoardChanges */
    BoardChanges: {
      /**
       * Board Name
       * @description The board's new name.
       */
      board_name?: string
      /**
       * Cover Image Name
       * @description The name of the board's new cover image.
       */
      cover_image_name?: string
    }
    /**
     * BoardDTO
     * @description Deserialized board record with cover image URL and image count.
     */
    BoardDTO: {
      /**
       * Board Id
       * @description The unique ID of the board.
       */
      board_id: string
      /**
       * Board Name
       * @description The name of the board.
       */
      board_name: string
      /**
       * Cover Image Name
       * @description The name of the board's cover image.
       */
      cover_image_name?: string
      /**
       * Created At
       * @description The created timestamp of the board.
       */
      created_at: string
      /**
       * Deleted At
       * @description The deleted timestamp of the board.
       */
      deleted_at?: string
      /**
       * Image Count
       * @description The number of images in the board.
       */
      image_count: number
      /**
       * Updated At
       * @description The updated timestamp of the board.
       */
      updated_at: string
    }
    /**
     * BoardField
     * @description A board primitive field
     */
    BoardField: {
      /**
       * Board Id
       * @description The id of the board
       */
      board_id: string
    }
    /** Body_add_image_to_board */
    Body_add_image_to_board: {
      /**
       * Board Id
       * @description The id of the board to add to
       */
      board_id: string
      /**
       * Image Name
       * @description The name of the image to add
       */
      image_name: string
    }
    /** Body_add_images_to_board */
    Body_add_images_to_board: {
      /**
       * Board Id
       * @description The id of the board to add to
       */
      board_id: string
      /**
       * Image Names
       * @description The names of the images to add
       */
      image_names: string[]
    }
    /** Body_cancel_by_batch_ids */
    Body_cancel_by_batch_ids: {
      /**
       * Batch Ids
       * @description The list of batch_ids to cancel all queue items for
       */
      batch_ids: string[]
    }
    /** Body_delete_images_from_list */
    Body_delete_images_from_list: {
      /**
       * Image Names
       * @description The list of names of images to delete
       */
      image_names: string[]
    }
    /** Body_download_images_from_list */
    Body_download_images_from_list: {
      /**
       * Board Id
       * @description The board from which image should be downloaded from
       */
      board_id?: string
      /**
       * Image Names
       * @description The list of names of images to download
       */
      image_names: string[]
    }
    /** Body_enqueue_batch */
    Body_enqueue_batch: {
      /**
       * Batch
       * @description Batch to process
       */
      batch: components["schemas"]["Batch"]
      /**
       * Prepend
       * @description Whether or not to prepend this batch in the queue
       * @default false
       */
      prepend?: boolean
    }
    /** Body_enqueue_graph */
    Body_enqueue_graph: {
      /**
       * Graph
       * @description The graph to enqueue
       */
      graph: components["schemas"]["Graph"]
      /**
       * Prepend
       * @description Whether or not to prepend this batch in the queue
       * @default false
       */
      prepend?: boolean
    }
    /** Body_import_model */
    Body_import_model: {
      /**
       * Location
       * @description A model path, repo_id or URL to import
       */
      location: string
      /**
       * Prediction Type
       * @description Prediction type for SDv2 checkpoints and rare SDv1 checkpoints
       * @enum {string}
       */
      prediction_type?: "epsilon" | "sample" | "v_prediction"
    }
    /** Body_merge_models */
    Body_merge_models: {
      /**
       * Alpha
       * @description Alpha weighting strength to apply to 2d and 3d models
       * @default 0.5
       */
      alpha?: number
      /**
       * Force
       * @description Force merging of models created with different versions of diffusers
       * @default false
       */
      force?: boolean
      /** @description Interpolation method */
      interp: components["schemas"]["MergeInterpolationMethod"]
      /**
       * Merge Dest Directory
       * @description Save the merged model to the designated directory (with 'merged_model_name' appended)
       */
      merge_dest_directory?: string
      /**
       * Merged Model Name
       * @description Name of destination model
       */
      merged_model_name: string
      /**
       * Model Names
       * @description model name
       */
      model_names: string[]
    }
    /** Body_parse_dynamicprompts */
    Body_parse_dynamicprompts: {
      /**
       * Combinatorial
       * @description Whether to use the combinatorial generator
       * @default true
       */
      combinatorial?: boolean
      /**
       * Max Prompts
       * @description The max number of prompts to generate
       * @default 1000
       */
      max_prompts?: number
      /**
       * Prompt
       * @description The prompt to parse with dynamicprompts
       */
      prompt: string
    }
    /** Body_remove_image_from_board */
    Body_remove_image_from_board: {
      /**
       * Image Name
       * @description The name of the image to remove
       */
      image_name: string
    }
    /** Body_remove_images_from_board */
    Body_remove_images_from_board: {
      /**
       * Image Names
       * @description The names of the images to remove
       */
      image_names: string[]
    }
    /** Body_star_images_in_list */
    Body_star_images_in_list: {
      /**
       * Image Names
       * @description The list of names of images to star
       */
      image_names: string[]
    }
    /** Body_unstar_images_in_list */
    Body_unstar_images_in_list: {
      /**
       * Image Names
       * @description The list of names of images to unstar
       */
      image_names: string[]
    }
    /** Body_upload_image */
    Body_upload_image: {
      /**
       * File
       * Format: binary
       */
      file: string
    }
    /**
     * Boolean to Float
     * @description Casts a boolean to a float
     */
    BooleanCastFloat: {
      /**
       * A
       * @description The first number
       * @default true
       */
      a?: boolean
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Type
       * @default booltofloat
       * @enum {string}
       */
      type: "booltofloat"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * Boolean to Integer
     * @description Casts a boolean to an integer
     */
    BooleanCastInteger: {
      /**
       * A
       * @description The first number
       * @default true
       */
      a?: boolean
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Type
       * @default booltoint
       * @enum {string}
       */
      type: "booltoint"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * Boolean Collection Primitive
     * @description A collection of boolean primitive values
     */
    BooleanCollectionInvocation: {
      /**
       * Collection
       * @description The collection of boolean values
       */
      collection?: boolean[]
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Type
       * @default boolean_collection
       * @enum {string}
       */
      type: "boolean_collection"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * BooleanCollectionOutput
     * @description Base class for nodes that output a collection of booleans
     */
    BooleanCollectionOutput: {
      /**
       * Collection
       * @description The output boolean collection
       */
      collection: boolean[]
      /**
       * Type
       * @default boolean_collection_output
       * @enum {string}
       */
      type: "boolean_collection_output"
    }
    /**
     * Boolean Equals (==)
     * @description Compares two booleans
     */
    BooleanEqualsInvocation: {
      /**
       * A
       * @description The first number
       * @default true
       */
      a?: boolean
      /**
       * B
       * @description The second number
       * @default true
       */
      b?: boolean
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Type
       * @default boolequals
       * @enum {string}
       */
      type: "boolequals"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * Boolean Primitive
     * @description A boolean primitive value
     */
    BooleanInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Type
       * @default boolean
       * @enum {string}
       */
      type: "boolean"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Value
       * @description The boolean value
       * @default false
       */
      value?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * Boolean Not (!)
     * @description Inverses a boolean
     */
    BooleanNotInvocation: {
      /**
       * A
       * @description The first number
       * @default 0
       */
      a?: boolean
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Type
       * @default boolnot
       * @enum {string}
       */
      type: "boolnot"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * BooleanOutput
     * @description Base class for nodes that output a single boolean
     */
    BooleanOutput: {
      /**
       * Type
       * @default boolean_output
       * @enum {string}
       */
      type: "boolean_output"
      /**
       * Value
       * @description The output boolean
       */
      value: boolean
    }
    /**
     * Boolean Random
     * @description Outputs a random boolean
     */
    BooleanRandomInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Type
       * @default boolrand
       * @enum {string}
       */
      type: "boolrand"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * CancelByBatchIDsResult
     * @description Result of canceling by list of batch ids
     */
    CancelByBatchIDsResult: {
      /**
       * Canceled
       * @description Number of queue items canceled
       */
      canceled: number
    }
    /**
     * Canny Processor
     * @description Canny edge detection for ControlNet
     */
    CannyImageProcessorInvocation: {
      /**
       * High Threshold
       * @description The high threshold of the Canny pixel gradient (0-255)
       * @default 200
       */
      high_threshold?: number
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Image
       * @description The image to process
       */
      image: components["schemas"]["ImageField"]
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Low Threshold
       * @description The low threshold of the Canny pixel gradient (0-255)
       * @default 100
       */
      low_threshold?: number
      /**
       * Type
       * @default canny_image_processor
       * @enum {string}
       */
      type: "canny_image_processor"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * ClearResult
     * @description Result of clearing the session queue
     */
    ClearResult: {
      /**
       * Deleted
       * @description Number of queue items deleted
       */
      deleted: number
    }
    /** ClipField */
    ClipField: {
      /**
       * Loras
       * @description Loras to apply on model loading
       */
      loras: components["schemas"]["LoraInfo"][]
      /**
       * Skipped Layers
       * @description Number of skipped layers in text_encoder
       */
      skipped_layers: number
      /**
       * Text Encoder
       * @description Info to load text_encoder submodel
       */
      text_encoder: components["schemas"]["ModelInfo"]
      /**
       * Tokenizer
       * @description Info to load tokenizer submodel
       */
      tokenizer: components["schemas"]["ModelInfo"]
    }
    /**
     * CLIP Skip
     * @description Skip layers in clip text_encoder model.
     */
    ClipSkipInvocation: {
      /**
       * CLIP
       * @description CLIP (tokenizer, text encoder, LoRAs) and skipped layer count
       */
      clip: components["schemas"]["ClipField"]
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Skipped Layers
       * @description Number of layers to skip in text encoder
       * @default 0
       */
      skipped_layers?: number
      /**
       * Type
       * @default clip_skip
       * @enum {string}
       */
      type: "clip_skip"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * ClipSkipInvocationOutput
     * @description Clip skip node output
     */
    ClipSkipInvocationOutput: {
      /**
       * CLIP
       * @description CLIP (tokenizer, text encoder, LoRAs) and skipped layer count
       */
      clip?: components["schemas"]["ClipField"]
      /**
       * Type
       * @default clip_skip_output
       * @enum {string}
       */
      type: "clip_skip_output"
    }
    /** CLIPVisionModelDiffusersConfig */
    CLIPVisionModelDiffusersConfig: {
      base_model: components["schemas"]["BaseModelType"]
      /** Description */
      description?: string
      error?: components["schemas"]["ModelError"]
      /**
       * Model Format
       * @enum {string}
       */
      model_format: "diffusers"
      /** Model Name */
      model_name: string
      /**
       * Model Type
       * @enum {string}
       */
      model_type: "clip_vision"
      /** Path */
      path: string
    }
    /** CLIPVisionModelField */
    CLIPVisionModelField: {
      /** @description Base model (usually 'Any') */
      base_model: components["schemas"]["BaseModelType"]
      /**
       * Model Name
       * @description Name of the CLIP Vision image encoder model
       */
      model_name: string
    }
    /**
     * CLIPVisionModelFormat
     * @description An enumeration.
     * @enum {string}
     */
    CLIPVisionModelFormat: "diffusers"
    /**
     * CollectInvocation
     * @description Collects values into a collection
     */
    CollectInvocation: {
      /**
       * Collection
       * @description The collection, will be provided on execution
       */
      collection?: unknown[]
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Collection Item
       * @description The item to collect (all inputs must be of the same type)
       */
      item?: unknown
      /**
       * Type
       * @default collect
       * @enum {string}
       */
      type: "collect"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * CollectInvocationOutput
     * @description Base class for all invocation outputs.
     *
     * All invocation outputs must use the `@invocation_output` decorator to provide their unique type.
     */
    CollectInvocationOutput: {
      /**
       * Collection
       * @description The collection of input items
       */
      collection: unknown[]
      /**
       * Type
       * @default collect_output
       * @enum {string}
       */
      type: "collect_output"
    }
    /**
     * ColorCollectionOutput
     * @description Base class for nodes that output a collection of colors
     */
    ColorCollectionOutput: {
      /**
       * Collection
       * @description The output colors
       */
      collection: components["schemas"]["ColorField"][]
      /**
       * Type
       * @default color_collection_output
       * @enum {string}
       */
      type: "color_collection_output"
    }
    /**
     * Color Correct
     * @description Shifts the colors of a target image to match the reference image, optionally
     * using a mask to only color-correct certain regions of the target image.
     */
    ColorCorrectInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Image
       * @description The image to color-correct
       */
      image: components["schemas"]["ImageField"]
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Mask
       * @description Mask to use when applying color-correction
       */
      mask?: components["schemas"]["ImageField"]
      /**
       * Mask Blur Radius
       * @description Mask blur radius
       * @default 8
       */
      mask_blur_radius?: number
      /**
       * Reference
       * @description Reference image for color-correction
       */
      reference: components["schemas"]["ImageField"]
      /**
       * Type
       * @default color_correct
       * @enum {string}
       */
      type: "color_correct"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * ColorField
     * @description A color primitive field
     */
    ColorField: {
      /**
       * A
       * @description The alpha component
       */
      a: number
      /**
       * B
       * @description The blue component
       */
      b: number
      /**
       * G
       * @description The green component
       */
      g: number
      /**
       * R
       * @description The red component
       */
      r: number
    }
    /**
     * Color Primitive
     * @description A color primitive value
     */
    ColorInvocation: {
      /**
       * Color
       * @description The color value
       * @default {
       *   "r": 0,
       *   "g": 0,
       *   "b": 0,
       *   "a": 255
       * }
       */
      color?: components["schemas"]["ColorField"]
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Type
       * @default color
       * @enum {string}
       */
      type: "color"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * Color Map Processor
     * @description Generates a color map from the provided image
     */
    ColorMapImageProcessorInvocation: {
      /**
       * Color Map Tile Size
       * @description Tile size
       * @default 64
       */
      color_map_tile_size?: number
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Image
       * @description The image to process
       */
      image: components["schemas"]["ImageField"]
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Type
       * @default color_map_image_processor
       * @enum {string}
       */
      type: "color_map_image_processor"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * ColorOutput
     * @description Base class for nodes that output a single color
     */
    ColorOutput: {
      /**
       * Color
       * @description The output color
       */
      color: components["schemas"]["ColorField"]
      /**
       * Type
       * @default color_output
       * @enum {string}
       */
      type: "color_output"
    }
    /**
     * Prompt
     * @description Parse prompt using compel package to conditioning.
     */
    CompelInvocation: {
      /**
       * CLIP
       * @description CLIP (tokenizer, text encoder, LoRAs) and skipped layer count
       */
      clip: components["schemas"]["ClipField"]
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Prompt
       * @description Prompt to be parsed by Compel to create a conditioning tensor
       * @default
       */
      prompt?: string
      /**
       * Type
       * @default compel
       * @enum {string}
       */
      type: "compel"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * Conditioning Collection Primitive
     * @description A collection of conditioning tensor primitive values
     */
    ConditioningCollectionInvocation: {
      /**
       * Collection
       * @description The collection of conditioning tensors
       */
      collection?: components["schemas"]["ConditioningField"][]
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Type
       * @default conditioning_collection
       * @enum {string}
       */
      type: "conditioning_collection"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * ConditioningCollectionOutput
     * @description Base class for nodes that output a collection of conditioning tensors
     */
    ConditioningCollectionOutput: {
      /**
       * Collection
       * @description The output conditioning tensors
       */
      collection: components["schemas"]["ConditioningField"][]
      /**
       * Type
       * @default conditioning_collection_output
       * @enum {string}
       */
      type: "conditioning_collection_output"
    }
    /**
     * ConditioningField
     * @description A conditioning tensor primitive value
     */
    ConditioningField: {
      /**
       * Conditioning Name
       * @description The name of conditioning tensor
       */
      conditioning_name: string
    }
    /**
     * Conditioning Primitive
     * @description A conditioning tensor primitive value
     */
    ConditioningInvocation: {
      /**
       * Conditioning
       * @description Conditioning tensor
       */
      conditioning: components["schemas"]["ConditioningField"]
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Type
       * @default conditioning
       * @enum {string}
       */
      type: "conditioning"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * ConditioningOutput
     * @description Base class for nodes that output a single conditioning tensor
     */
    ConditioningOutput: {
      /**
       * Conditioning
       * @description Conditioning tensor
       */
      conditioning: components["schemas"]["ConditioningField"]
      /**
       * Type
       * @default conditioning_output
       * @enum {string}
       */
      type: "conditioning_output"
    }
    /**
     * Content Shuffle Processor
     * @description Applies content shuffle processing to image
     */
    ContentShuffleImageProcessorInvocation: {
      /**
       * Detect Resolution
       * @description Pixel resolution for detection
       * @default 512
       */
      detect_resolution?: number
      /**
       * F
       * @description Content shuffle `f` parameter
       * @default 256
       */
      f?: number
      /**
       * H
       * @description Content shuffle `h` parameter
       * @default 512
       */
      h?: number
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Image
       * @description The image to process
       */
      image: components["schemas"]["ImageField"]
      /**
       * Image Resolution
       * @description Pixel resolution for output image
       * @default 512
       */
      image_resolution?: number
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Type
       * @default content_shuffle_image_processor
       * @enum {string}
       */
      type: "content_shuffle_image_processor"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * W
       * @description Content shuffle `w` parameter
       * @default 512
       */
      w?: number
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /** ControlField */
    ControlField: {
      /**
       * Begin Step Percent
       * @description When the ControlNet is first applied (% of total steps)
       * @default 0
       */
      begin_step_percent?: number
      /**
       * Control Mode
       * @description The control mode to use
       * @default balanced
       * @enum {string}
       */
      control_mode?: "balanced" | "more_control" | "more_prompt" | "unbalanced"
      /**
       * Control Model
       * @description The ControlNet model to use
       */
      control_model: components["schemas"]["ControlNetModelField"]
      /**
       * Control Weight
       * @description The weight given to the ControlNet
       * @default 1
       */
      control_weight?: number | number[]
      /**
       * End Step Percent
       * @description When the ControlNet is last applied (% of total steps)
       * @default 1
       */
      end_step_percent?: number
      /**
       * Image
       * @description The control image
       */
      image: components["schemas"]["ImageField"]
      /**
       * Resize Mode
       * @description The resize mode to use
       * @default just_resize
       * @enum {string}
       */
      resize_mode?: "crop_resize" | "fill_resize" | "just_resize" | "just_resize_simple"
    }
    /**
     * ControlNet
     * @description Collects ControlNet info to pass to other nodes
     */
    ControlNetInvocation: {
      /**
       * Begin Step Percent
       * @description When the ControlNet is first applied (% of total steps)
       * @default 0
       */
      begin_step_percent?: number
      /**
       * Control Mode
       * @description The control mode used
       * @default balanced
       * @enum {string}
       */
      control_mode?: "balanced" | "more_control" | "more_prompt" | "unbalanced"
      /**
       * Control Model
       * @description ControlNet model to load
       */
      control_model: components["schemas"]["ControlNetModelField"]
      /**
       * Control Weight
       * @description The weight given to the ControlNet
       * @default 1
       */
      control_weight?: number | number[]
      /**
       * End Step Percent
       * @description When the ControlNet is last applied (% of total steps)
       * @default 1
       */
      end_step_percent?: number
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Image
       * @description The control image
       */
      image: components["schemas"]["ImageField"]
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Resize Mode
       * @description The resize mode used
       * @default just_resize
       * @enum {string}
       */
      resize_mode?: "crop_resize" | "fill_resize" | "just_resize" | "just_resize_simple"
      /**
       * Type
       * @default controlnet
       * @enum {string}
       */
      type: "controlnet"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /** ControlNetModelCheckpointConfig */
    ControlNetModelCheckpointConfig: {
      base_model: components["schemas"]["BaseModelType"]
      /** Config */
      config: string
      /** Description */
      description?: string
      error?: components["schemas"]["ModelError"]
      /**
       * Model Format
       * @enum {string}
       */
      model_format: "checkpoint"
      /** Model Name */
      model_name: string
      /**
       * Model Type
       * @enum {string}
       */
      model_type: "controlnet"
      /** Path */
      path: string
    }
    /** ControlNetModelDiffusersConfig */
    ControlNetModelDiffusersConfig: {
      base_model: components["schemas"]["BaseModelType"]
      /** Description */
      description?: string
      error?: components["schemas"]["ModelError"]
      /**
       * Model Format
       * @enum {string}
       */
      model_format: "diffusers"
      /** Model Name */
      model_name: string
      /**
       * Model Type
       * @enum {string}
       */
      model_type: "controlnet"
      /** Path */
      path: string
    }
    /**
     * ControlNetModelField
     * @description ControlNet model field
     */
    ControlNetModelField: {
      /** @description Base model */
      base_model: components["schemas"]["BaseModelType"]
      /**
       * Model Name
       * @description Name of the ControlNet model
       */
      model_name: string
    }
    /**
     * ControlNetModelFormat
     * @description An enumeration.
     * @enum {string}
     */
    ControlNetModelFormat: "checkpoint" | "diffusers"
    /**
     * ControlOutput
     * @description node output for ControlNet info
     */
    ControlOutput: {
      /**
       * Control
       * @description ControlNet(s) to apply
       */
      control: components["schemas"]["ControlField"]
      /**
       * Type
       * @default control_output
       * @enum {string}
       */
      type: "control_output"
    }
    /**
     * CoreMetadata
     * @description Core generation metadata for an image generated in InvokeAI.
     */
    CoreMetadata: {
      /**
       * App Version
       * @description The version of InvokeAI used to generate this image
       * @default 3.3.0
       */
      app_version?: string
      /**
       * Cfg Scale
       * @description The classifier-free guidance scale parameter
       */
      cfg_scale: number
      /**
       * Clip Skip
       * @description The number of skipped CLIP layers
       */
      clip_skip?: number
      /**
       * Controlnets
       * @description The ControlNets used for inference
       */
      controlnets: components["schemas"]["ControlField"][]
      /**
       * Created By
       * @description The name of the creator of the image
       */
      created_by?: string
      /**
       * Generation Mode
       * @description The generation mode that output this image
       */
      generation_mode: string
      /**
       * Height
       * @description The height parameter
       */
      height: number
      /**
       * Init Image
       * @description The name of the initial image
       */
      init_image?: string
      /**
       * Ipadapters
       * @description The IP Adapters used for inference
       */
      ipAdapters: components["schemas"]["IPAdapterMetadataField"][]
      /**
       * Loras
       * @description The LoRAs used for inference
       */
      loras: components["schemas"]["LoRAMetadataField"][]
      /**
       * Model
       * @description The main model used for inference
       */
      model: components["schemas"]["MainModelField"]
      /**
       * Negative Prompt
       * @description The negative prompt parameter
       */
      negative_prompt: string
      /**
       * Negative Style Prompt
       * @description The negative style prompt parameter
       */
      negative_style_prompt?: string
      /**
       * Positive Prompt
       * @description The positive prompt parameter
       */
      positive_prompt: string
      /**
       * Positive Style Prompt
       * @description The positive style prompt parameter
       */
      positive_style_prompt?: string
      /**
       * Rand Device
       * @description The device used for random number generation
       */
      rand_device: string
      /**
       * Refiner Cfg Scale
       * @description The classifier-free guidance scale parameter used for the refiner
       */
      refiner_cfg_scale?: number
      /**
       * Refiner Model
       * @description The SDXL Refiner model used
       */
      refiner_model?: components["schemas"]["MainModelField"]
      /**
       * Refiner Negative Aesthetic Score
       * @description The aesthetic score used for the refiner
       */
      refiner_negative_aesthetic_score?: number
      /**
       * Refiner Positive Aesthetic Score
       * @description The aesthetic score used for the refiner
       */
      refiner_positive_aesthetic_score?: number
      /**
       * Refiner Scheduler
       * @description The scheduler used for the refiner
       */
      refiner_scheduler?: string
      /**
       * Refiner Start
       * @description The start value used for refiner denoising
       */
      refiner_start?: number
      /**
       * Refiner Steps
       * @description The number of steps used for the refiner
       */
      refiner_steps?: number
      /**
       * Scheduler
       * @description The scheduler used for inference
       */
      scheduler: string
      /**
       * Seed
       * @description The seed used for noise generation
       */
      seed: number
      /**
       * Steps
       * @description The number of steps used for inference
       */
      steps: number
      /**
       * Strength
       * @description The strength used for latents-to-latents
       */
      strength?: number
      /**
       * T2Iadapters
       * @description The IP Adapters used for inference
       */
      t2iAdapters: components["schemas"]["T2IAdapterField"][]
      /**
       * Vae
       * @description The VAE used for decoding, if the main model's default was not used
       */
      vae?: components["schemas"]["VAEModelField"]
      /**
       * Width
       * @description The width parameter
       */
      width: number
    }
    /**
     * Create Denoise Mask
     * @description Creates mask for denoising model run.
     */
    CreateDenoiseMaskInvocation: {
      /**
       * Fp32
       * @description Whether or not to use full float32 precision
       * @default false
       */
      fp32?: boolean
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Image
       * @description Image which will be masked
       */
      image?: components["schemas"]["ImageField"]
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Mask
       * @description The mask to use when pasting
       */
      mask: components["schemas"]["ImageField"]
      /**
       * Tiled
       * @description Processing using overlapping tiles (reduce memory consumption)
       * @default false
       */
      tiled?: boolean
      /**
       * Type
       * @default create_denoise_mask
       * @enum {string}
       */
      type: "create_denoise_mask"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Vae
       * @description VAE
       */
      vae: components["schemas"]["VaeField"]
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * CSV To Index String
     * @description CSVToIndexString converts a CSV to a String at index with a random option
     */
    CSVToIndexStringInvocation: {
      /**
       * Csv
       * @description csv string
       * @default
       */
      csv?: string
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Index
       * @description zero based index into CSV array (note index will wrap around if out of bounds)
       * @default 0
       */
      index?: number
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Random
       * @description Random Index?
       * @default true
       */
      random?: boolean
      /**
       * Type
       * @default csv_to_index_string
       * @enum {string}
       */
      type: "csv_to_index_string"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default false
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * CSV To Strings
     * @description CSVToStrings converts a CSV String to a collection of strings
     */
    CSVToStringsInvocation: {
      /**
       * Csv
       * @description csv string
       */
      csv: string
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Type
       * @default csv_to_strings
       * @enum {string}
       */
      type: "csv_to_strings"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * CursorPaginatedResults[SessionQueueItemDTO]
     * @description Cursor-paginated results
     * Generic must be a Pydantic model
     */
    CursorPaginatedResults_SessionQueueItemDTO_: {
      /**
       * Has More
       * @description Whether there are more items available
       */
      has_more: boolean
      /**
       * Items
       * @description Items
       */
      items: components["schemas"]["SessionQueueItemDTO"][]
      /**
       * Limit
       * @description Limit of items to get
       */
      limit: number
    }
    /**
     * CV2 Infill
     * @description Infills transparent areas of an image using OpenCV Inpainting
     */
    CV2InfillInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Image
       * @description The image to infill
       */
      image: components["schemas"]["ImageField"]
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Type
       * @default infill_cv2
       * @enum {string}
       */
      type: "infill_cv2"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * OpenCV Inpaint
     * @description Simple inpaint using opencv.
     */
    CvInpaintInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Image
       * @description The image to inpaint
       */
      image: components["schemas"]["ImageField"]
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Mask
       * @description The mask to use when inpainting
       */
      mask: components["schemas"]["ImageField"]
      /**
       * Type
       * @default cv_inpaint
       * @enum {string}
       */
      type: "cv_inpaint"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /** DeleteBoardResult */
    DeleteBoardResult: {
      /**
       * Board Id
       * @description The id of the board that was deleted.
       */
      board_id: string
      /**
       * Deleted Board Images
       * @description The image names of the board-images relationships that were deleted.
       */
      deleted_board_images: string[]
      /**
       * Deleted Images
       * @description The names of the images that were deleted.
       */
      deleted_images: string[]
    }
    /** DeleteImagesFromListResult */
    DeleteImagesFromListResult: {
      /** Deleted Images */
      deleted_images: string[]
    }
    /**
     * Denoise Latents
     * @description Denoises noisy latents to decodable images
     */
    DenoiseLatentsInvocation: {
      /**
       * CFG Scale
       * @description Classifier-Free Guidance scale
       * @default 7.5
       */
      cfg_scale?: number | number[]
      /** Control */
      control?: components["schemas"]["ControlField"] | components["schemas"]["ControlField"][]
      /**
       * Denoise Mask
       * @description The mask to use for the operation
       */
      denoise_mask?: components["schemas"]["DenoiseMaskField"]
      /**
       * Denoising End
       * @description When to stop denoising, expressed a percentage of total steps
       * @default 1
       */
      denoising_end?: number
      /**
       * Denoising Start
       * @description When to start denoising, expressed a percentage of total steps
       * @default 0
       */
      denoising_start?: number
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * IP-Adapter
       * @description IP-Adapter to apply
       */
      ip_adapter?: components["schemas"]["IPAdapterField"] | components["schemas"]["IPAdapterField"][]
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Latents
       * @description Latents tensor
       */
      latents?: components["schemas"]["LatentsField"]
      /**
       * Negative Conditioning
       * @description Negative conditioning tensor
       */
      negative_conditioning: components["schemas"]["ConditioningField"]
      /**
       * Noise
       * @description Noise tensor
       */
      noise?: components["schemas"]["LatentsField"]
      /**
       * Positive Conditioning
       * @description Positive conditioning tensor
       */
      positive_conditioning: components["schemas"]["ConditioningField"]
      /**
       * Scheduler
       * @description Scheduler to use during inference
       * @default euler
       * @enum {string}
       */
      scheduler?: "ddim" | "ddpm" | "deis" | "dpmpp_2m" | "dpmpp_2m_k" | "dpmpp_2m_sde" | "dpmpp_2m_sde_k" | "dpmpp_2s" | "dpmpp_2s_k" | "dpmpp_sde" | "dpmpp_sde_k" | "euler" | "euler_a" | "euler_k" | "heun" | "heun_k" | "kdpm_2" | "kdpm_2_a" | "lms" | "lms_k" | "pndm" | "unipc"
      /**
       * Steps
       * @description Number of steps to run
       * @default 10
       */
      steps?: number
      /**
       * T2I-Adapter
       * @description T2I-Adapter(s) to apply
       */
      t2i_adapter?: components["schemas"]["T2IAdapterField"] | components["schemas"]["T2IAdapterField"][]
      /**
       * Type
       * @default denoise_latents
       * @enum {string}
       */
      type: "denoise_latents"
      /**
       * UNet
       * @description UNet (scheduler, LoRAs)
       */
      unet: components["schemas"]["UNetField"]
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * DenoiseMaskField
     * @description An inpaint mask field
     */
    DenoiseMaskField: {
      /**
       * Mask Name
       * @description The name of the mask image
       */
      mask_name: string
      /**
       * Masked Latents Name
       * @description The name of the masked image latents
       */
      masked_latents_name?: string
    }
    /**
     * DenoiseMaskOutput
     * @description Base class for nodes that output a single image
     */
    DenoiseMaskOutput: {
      /**
       * Denoise Mask
       * @description Mask for denoise model run
       */
      denoise_mask: components["schemas"]["DenoiseMaskField"]
      /**
       * Type
       * @default denoise_mask_output
       * @enum {string}
       */
      type: "denoise_mask_output"
    }
    /**
     * Divide Integers
     * @description Divides two numbers
     */
    DivideInvocation: {
      /**
       * A
       * @description The first number
       * @default 0
       */
      a?: number
      /**
       * B
       * @description The second number
       * @default 0
       */
      b?: number
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Type
       * @default div
       * @enum {string}
       */
      type: "div"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * Dynamic Prompt
     * @description Parses a prompt using adieyal/dynamicprompts' random or combinatorial generator
     */
    DynamicPromptInvocation: {
      /**
       * Combinatorial
       * @description Whether to use the combinatorial generator
       * @default false
       */
      combinatorial?: boolean
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Max Prompts
       * @description The number of prompts to generate
       * @default 1
       */
      max_prompts?: number
      /**
       * Prompt
       * @description The prompt to parse with dynamicprompts
       */
      prompt: string
      /**
       * Type
       * @default dynamic_prompt
       * @enum {string}
       */
      type: "dynamic_prompt"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default false
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /** DynamicPromptsResponse */
    DynamicPromptsResponse: {
      /** Error */
      error?: string
      /** Prompts */
      prompts: string[]
    }
    /** Edge */
    Edge: {
      /**
       * Destination
       * @description The connection for the edge's to node and field
       */
      destination: components["schemas"]["EdgeConnection"]
      /**
       * Source
       * @description The connection for the edge's from node and field
       */
      source: components["schemas"]["EdgeConnection"]
    }
    /** EdgeConnection */
    EdgeConnection: {
      /**
       * Field
       * @description The field for this connection
       */
      field: string
      /**
       * Node Id
       * @description The id of the node for this edge connection
       */
      node_id: string
    }
    /** EnqueueBatchResult */
    EnqueueBatchResult: {
      /**
       * Batch
       * @description The batch that was enqueued
       */
      batch: components["schemas"]["Batch"]
      /**
       * Enqueued
       * @description The total number of queue items enqueued
       */
      enqueued: number
      /**
       * Priority
       * @description The priority of the enqueued batch
       */
      priority: number
      /**
       * Queue Id
       * @description The ID of the queue
       */
      queue_id: string
      /**
       * Requested
       * @description The total number of queue items requested to be enqueued
       */
      requested: number
    }
    /** EnqueueGraphResult */
    EnqueueGraphResult: {
      /**
       * Batch
       * @description The batch that was enqueued
       */
      batch: components["schemas"]["Batch"]
      /**
       * Enqueued
       * @description The total number of queue items enqueued
       */
      enqueued: number
      /**
       * Priority
       * @description The priority of the enqueued batch
       */
      priority: number
      /**
       * Queue Item
       * @description The queue item that was enqueued
       */
      queue_item: components["schemas"]["SessionQueueItemDTO"]
      /**
       * Requested
       * @description The total number of queue items requested to be enqueued
       */
      requested: number
    }
    /**
     * Upscale (RealESRGAN)
     * @description Upscales an image using RealESRGAN.
     */
    ESRGANInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Image
       * @description The input image
       */
      image: components["schemas"]["ImageField"]
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Model Name
       * @description The Real-ESRGAN model to use
       * @default RealESRGAN_x4plus.pth
       * @enum {string}
       */
      model_name?: "ESRGAN_SRx4_DF2KOST_official-ff704c30.pth" | "RealESRGAN_x2plus.pth" | "RealESRGAN_x4plus.pth" | "RealESRGAN_x4plus_anime_6B.pth"
      /**
       * Tile Size
       * @description Tile size for tiled ESRGAN upscaling (0=tiling disabled)
       * @default 400
       */
      tile_size?: number
      /**
       * Type
       * @default esrgan
       * @enum {string}
       */
      type: "esrgan"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * FaceIdentifier
     * @description Outputs an image with detected face IDs printed on each face. For use with other FaceTools.
     */
    FaceIdentifierInvocation: {
      /**
       * Chunk
       * @description Whether to bypass full image face detection and default to image chunking. Chunking will occur if no faces are found in the full image.
       * @default false
       */
      chunk?: boolean
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Image
       * @description Image to face detect
       */
      image: components["schemas"]["ImageField"]
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Minimum Confidence
       * @description Minimum confidence for face detection (lower if detection is failing)
       * @default 0.5
       */
      minimum_confidence?: number
      /**
       * Type
       * @default face_identifier
       * @enum {string}
       */
      type: "face_identifier"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * FaceMask
     * @description Face mask creation using mediapipe face detection
     */
    FaceMaskInvocation: {
      /**
       * Chunk
       * @description Whether to bypass full image face detection and default to image chunking. Chunking will occur if no faces are found in the full image.
       * @default false
       */
      chunk?: boolean
      /**
       * Face Ids
       * @description Comma-separated list of face ids to mask eg '0,2,7'. Numbered from 0. Leave empty to mask all. Find face IDs with FaceIdentifier node.
       * @default
       */
      face_ids?: string
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Image
       * @description Image to face detect
       */
      image: components["schemas"]["ImageField"]
      /**
       * Invert Mask
       * @description Toggle to invert the mask
       * @default false
       */
      invert_mask?: boolean
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Minimum Confidence
       * @description Minimum confidence for face detection (lower if detection is failing)
       * @default 0.5
       */
      minimum_confidence?: number
      /**
       * Type
       * @default face_mask_detection
       * @enum {string}
       */
      type: "face_mask_detection"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
      /**
       * X Offset
       * @description Offset for the X-axis of the face mask
       * @default 0
       */
      x_offset?: number
      /**
       * Y Offset
       * @description Offset for the Y-axis of the face mask
       * @default 0
       */
      y_offset?: number
    }
    /**
     * FaceMaskOutput
     * @description Base class for FaceMask output
     */
    FaceMaskOutput: {
      /**
       * Height
       * @description The height of the image in pixels
       */
      height: number
      /**
       * Image
       * @description The output image
       */
      image: components["schemas"]["ImageField"]
      /**
       * Mask
       * @description The output mask
       */
      mask: components["schemas"]["ImageField"]
      /**
       * Type
       * @default face_mask_output
       * @enum {string}
       */
      type: "face_mask_output"
      /**
       * Width
       * @description The width of the image in pixels
       */
      width: number
    }
    /**
     * FaceOff
     * @description Bound, extract, and mask a face from an image using MediaPipe detection
     */
    FaceOffInvocation: {
      /**
       * Chunk
       * @description Whether to bypass full image face detection and default to image chunking. Chunking will occur if no faces are found in the full image.
       * @default false
       */
      chunk?: boolean
      /**
       * Face Id
       * @description The face ID to process, numbered from 0. Multiple faces not supported. Find a face's ID with FaceIdentifier node.
       * @default 0
       */
      face_id?: number
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Image
       * @description Image for face detection
       */
      image: components["schemas"]["ImageField"]
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Minimum Confidence
       * @description Minimum confidence for face detection (lower if detection is failing)
       * @default 0.5
       */
      minimum_confidence?: number
      /**
       * Padding
       * @description All-axis padding around the mask in pixels
       * @default 0
       */
      padding?: number
      /**
       * Type
       * @default face_off
       * @enum {string}
       */
      type: "face_off"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
      /**
       * X Offset
       * @description X-axis offset of the mask
       * @default 0
       */
      x_offset?: number
      /**
       * Y Offset
       * @description Y-axis offset of the mask
       * @default 0
       */
      y_offset?: number
    }
    /**
     * FaceOffOutput
     * @description Base class for FaceOff Output
     */
    FaceOffOutput: {
      /**
       * Height
       * @description The height of the image in pixels
       */
      height: number
      /**
       * Image
       * @description The output image
       */
      image: components["schemas"]["ImageField"]
      /**
       * Mask
       * @description The output mask
       */
      mask: components["schemas"]["ImageField"]
      /**
       * Type
       * @default face_off_output
       * @enum {string}
       */
      type: "face_off_output"
      /**
       * Width
       * @description The width of the image in pixels
       */
      width: number
      /**
       * X
       * @description The x coordinate of the bounding box's left side
       */
      x: number
      /**
       * Y
       * @description The y coordinate of the bounding box's top side
       */
      y: number
    }
    /**
     * Float Absolute (abs)
     * @description Calculates the absolute value of a float
     */
    FloatAbsoluteInvocation: {
      /**
       * A
       * @description The first number
       * @default 0
       */
      a?: number
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Type
       * @default floatabs
       * @enum {string}
       */
      type: "floatabs"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * Float Addition (+)
     * @description Adds two floating point numbers
     */
    FloatAddInvocation: {
      /**
       * A
       * @description The first number
       * @default 0
       */
      a?: number
      /**
       * B
       * @description The second number
       * @default 0
       */
      b?: number
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Type
       * @default floatadd
       * @enum {string}
       */
      type: "floatadd"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * Float Arc Cosine (acos)
     * @description Calculates the arc cosine of a float as radians
     */
    FloatArcCosineInvocation: {
      /**
       * A
       * @description The first number
       * @default 0
       */
      a?: number
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Type
       * @default floatacos
       * @enum {string}
       */
      type: "floatacos"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * Float Arc Tangent (asin)
     * @description Calculates the arc sine of a float as radians
     */
    FloatArcSineInvocation: {
      /**
       * A
       * @description The first number
       * @default 0
       */
      a?: number
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Type
       * @default floatasin
       * @enum {string}
       */
      type: "floatasin"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * Float Arc Tangent (atan)
     * @description Calculates the arc tangent of a float as radians
     */
    FloatArcTangentInvocation: {
      /**
       * A
       * @description The first number
       * @default 0
       */
      a?: number
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Type
       * @default floatatan
       * @enum {string}
       */
      type: "floatatan"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * Float to Boolean
     * @description Casts a float to a boolean
     */
    FloatCastBooleanInvocation: {
      /**
       * A
       * @description The first number
       * @default 0
       */
      a?: number
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Type
       * @default floattobool
       * @enum {string}
       */
      type: "floattobool"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * Float to Integer
     * @description Casts a float to an integer
     */
    FloatCastIntegerInvocation: {
      /**
       * A
       * @description The first number
       * @default 0
       */
      a?: number
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Type
       * @default floattoint
       * @enum {string}
       */
      type: "floattoint"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * Float Ceiling (ceil)
     * @description Rounds a float up and casts to an integer
     */
    FloatCeilInvocation: {
      /**
       * A
       * @description The first number
       * @default 0
       */
      a?: number
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Type
       * @default floatceil
       * @enum {string}
       */
      type: "floatceil"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * Float Collection Primitive
     * @description A collection of float primitive values
     */
    FloatCollectionInvocation: {
      /**
       * Collection
       * @description The collection of float values
       */
      collection?: number[]
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Type
       * @default float_collection
       * @enum {string}
       */
      type: "float_collection"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * FloatCollectionOutput
     * @description Base class for nodes that output a collection of floats
     */
    FloatCollectionOutput: {
      /**
       * Collection
       * @description The float collection
       */
      collection: number[]
      /**
       * Type
       * @default float_collection_output
       * @enum {string}
       */
      type: "float_collection_output"
    }
    /**
     * Float Cosine (cos)
     * @description Calculates the cosine of a float as radians
     */
    FloatCosineInvocation: {
      /**
       * A
       * @description The first number
       * @default 0
       */
      a?: number
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Type
       * @default floatcos
       * @enum {string}
       */
      type: "floatcos"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * Float Division (/)
     * @description Divides two floating point numbers
     */
    FloatDivideInvocation: {
      /**
       * A
       * @description The first number
       * @default 0
       */
      a?: number
      /**
       * B
       * @description The second number
       * @default 0
       */
      b?: number
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Type
       * @default floatdiv
       * @enum {string}
       */
      type: "floatdiv"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * Float Equals (==)
     * @description Compares two floating point numbers
     */
    FloatEqualsInvocation: {
      /**
       * A
       * @description The first number
       * @default true
       */
      a?: number
      /**
       * B
       * @description The second number
       * @default true
       */
      b?: number
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Type
       * @default floatequals
       * @enum {string}
       */
      type: "floatequals"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * Float Floor (floor)
     * @description Rounds a float down and casts to an integer
     */
    FloatFloorInvocation: {
      /**
       * A
       * @description The first number
       * @default 0
       */
      a?: number
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Type
       * @default floatfloor
       * @enum {string}
       */
      type: "floatfloor"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * Float Greater or Equal Than (>=)
     * @description Compares if one floating point number is greater than or equal to another
     */
    FloatGreaterEqualsInvocation: {
      /**
       * A
       * @description The first number
       * @default true
       */
      a?: number
      /**
       * B
       * @description The second number
       * @default true
       */
      b?: number
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Type
       * @default floatgreaterequals
       * @enum {string}
       */
      type: "floatgreaterequals"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * Float Greater Than (>)
     * @description Compares if one floating point number is greater than another
     */
    FloatGreaterInvocation: {
      /**
       * A
       * @description The first number
       * @default true
       */
      a?: number
      /**
       * B
       * @description The second number
       * @default true
       */
      b?: number
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Type
       * @default floatgreater
       * @enum {string}
       */
      type: "floatgreater"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * Float Hyperbolic Cosine (cosh)
     * @description Calculates the hyperbolic cosine of a float as radians
     */
    FloatHyperbolicCosineInvocation: {
      /**
       * A
       * @description The first number
       * @default 0
       */
      a?: number
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Type
       * @default floatcosh
       * @enum {string}
       */
      type: "floatcosh"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * Float Hyperbolic Tangent (sinh)
     * @description Calculates the hyperbolic sine of a float as radians
     */
    FloatHyperbolicSineInvocation: {
      /**
       * A
       * @description The first number
       * @default 0
       */
      a?: number
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Type
       * @default floatsinh
       * @enum {string}
       */
      type: "floatsinh"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * Float Hyperbolic Tangent (tanh)
     * @description Calculates the hyperbolic tangent of a float as radians
     */
    FloatHyperbolicTangentInvocation: {
      /**
       * A
       * @description The first number
       * @default 0
       */
      a?: number
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Type
       * @default floattanh
       * @enum {string}
       */
      type: "floattanh"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * Float Inverse Hyperbolic Cosine (acosh)
     * @description Calculates the inverse hyperbolic cosine of a float as radians
     */
    FloatInverseHyerbolicCosineInvocation: {
      /**
       * A
       * @description The first number
       * @default 0
       */
      a?: number
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Type
       * @default floatacosh
       * @enum {string}
       */
      type: "floatacosh"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * Float Inverse Hyperbolic Tangent (asinh)
     * @description Calculates the inverse hyperbolic sine of a float as radians
     */
    FloatInverseHyerbolicSineInvocation: {
      /**
       * A
       * @description The first number
       * @default 0
       */
      a?: number
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Type
       * @default floatasinh
       * @enum {string}
       */
      type: "floatasinh"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * Float Inverse Hyperbolic Tangent (atanh)
     * @description Calculates the inverse hyperbolic tangent of a float as radians
     */
    FloatInverseHyerbolicTangentInvocation: {
      /**
       * A
       * @description The first number
       * @default 0
       */
      a?: number
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Type
       * @default floatatanh
       * @enum {string}
       */
      type: "floatatanh"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * Float Primitive
     * @description A float primitive value
     */
    FloatInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Type
       * @default float
       * @enum {string}
       */
      type: "float"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Value
       * @description The float value
       * @default 0
       */
      value?: number
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * Float Less or Equal Than (<=)
     * @description Compares if one floating point number is less than or equal to another
     */
    FloatLessEqualsInvocation: {
      /**
       * A
       * @description The first number
       * @default true
       */
      a?: number
      /**
       * B
       * @description The second number
       * @default true
       */
      b?: number
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Type
       * @default floatlessequals
       * @enum {string}
       */
      type: "floatlessequals"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * Float Less Than (<)
     * @description Compares if one floating point number is less than another
     */
    FloatLessInvocation: {
      /**
       * A
       * @description The first number
       * @default true
       */
      a?: number
      /**
       * B
       * @description The second number
       * @default true
       */
      b?: number
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Type
       * @default floatless
       * @enum {string}
       */
      type: "floatless"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * Float Range
     * @description Creates a range
     */
    FloatLinearRangeInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Start
       * @description The first value of the range
       * @default 5
       */
      start?: number
      /**
       * Steps
       * @description number of values to interpolate over (including start and stop)
       * @default 30
       */
      steps?: number
      /**
       * Stop
       * @description The last value of the range
       * @default 10
       */
      stop?: number
      /**
       * Type
       * @default float_range
       * @enum {string}
       */
      type: "float_range"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * Float Logarithm (log)
     * @description Calculates the natural logarithm of a float
     */
    FloatLogInvocation: {
      /**
       * A
       * @description The first number
       * @default 0
       */
      a?: number
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Type
       * @default floatlog
       * @enum {string}
       */
      type: "floatlog"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * Float Logarithm N (logn)
     * @description Calculates the logarithm of a float to a base N
     */
    FloatLogNInvocation: {
      /**
       * A
       * @description The first number
       * @default 0
       */
      a?: number
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * N
       * @description The second number
       * @default 0
       */
      n?: number
      /**
       * Type
       * @default floatlogn
       * @enum {string}
       */
      type: "floatlogn"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * Float Math
     * @description Performs floating point math.
     */
    FloatMathInvocation: {
      /**
       * A
       * @description The first number
       * @default 0
       */
      a?: number
      /**
       * B
       * @description The second number
       * @default 0
       */
      b?: number
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Operation
       * @description The operation to perform
       * @default ADD
       * @enum {string}
       */
      operation?: "ABS" | "ADD" | "DIV" | "EXP" | "MAX" | "MIN" | "MUL" | "SQRT" | "SUB"
      /**
       * Type
       * @default float_math
       * @enum {string}
       */
      type: "float_math"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * Float Modulo (%)
     * @description Calculates the remainder of a division as a float
     */
    FloatModuloInvocation: {
      /**
       * A
       * @description The first number
       * @default 0
       */
      a?: number
      /**
       * B
       * @description The second number
       * @default 0
       */
      b?: number
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Type
       * @default floatmodulo
       * @enum {string}
       */
      type: "floatmodulo"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * Float Multiplication (*)
     * @description Multiplies two floating point numbers
     */
    FloatMultiplyInvocation: {
      /**
       * A
       * @description The first number
       * @default 0
       */
      a?: number
      /**
       * B
       * @description The second number
       * @default 0
       */
      b?: number
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Type
       * @default floatmul
       * @enum {string}
       */
      type: "floatmul"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * FloatOutput
     * @description Base class for nodes that output a single float
     */
    FloatOutput: {
      /**
       * Type
       * @default float_output
       * @enum {string}
       */
      type: "float_output"
      /**
       * Value
       * @description The output float
       */
      value: number
    }
    /**
     * Float Raise Power (pow)
     * @description Raises a float to the power of a value
     */
    FloatPowInvocation: {
      /**
       * A
       * @description The first number
       * @default 0
       */
      a?: number
      /**
       * B
       * @description The first number
       * @default 0
       */
      b?: number
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Type
       * @default floatpow
       * @enum {string}
       */
      type: "floatpow"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * Float Random
     * @description Outputs a single random floating point number
     */
    FloatRandomInvocation: {
      /**
       * High
       * @description The exclusive high value
       * @default 1.7976931348623157e+308
       */
      high?: number
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Low
       * @description The inclusive low value
       * @default 0
       */
      low?: number
      /**
       * Type
       * @default floatrand
       * @enum {string}
       */
      type: "floatrand"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * Float Round (round)
     * @description Rounds a float and casts to an integer
     */
    FloatRoundInvocation: {
      /**
       * A
       * @description The first number
       * @default 0
       */
      a?: number
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Type
       * @default floatround
       * @enum {string}
       */
      type: "floatround"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * Float Round To Multiple
     * @description Rounds a float to the next multiple of N and casts to an integer
     */
    FloatRoundToMultipleInvocation: {
      /**
       * A
       * @description The first number
       * @default 0
       */
      a?: number
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * N
       * @description The second number
       * @default 8
       */
      n?: number
      /**
       * Type
       * @default floatroundtomultiple
       * @enum {string}
       */
      type: "floatroundtomultiple"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * Float Sine (sin)
     * @description Calculates the sine of a float as radians
     */
    FloatSineInvocation: {
      /**
       * A
       * @description The first number
       * @default 0
       */
      a?: number
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Type
       * @default floatsin
       * @enum {string}
       */
      type: "floatsin"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * Float Square Root (sqrt)
     * @description Calculates the square root of a float
     */
    FloatSqrtInvocation: {
      /**
       * A
       * @description The first number
       * @default 0
       */
      a?: number
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Type
       * @default floatsqrt
       * @enum {string}
       */
      type: "floatsqrt"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * Floats To Strings
     * @description FloatsToStrings converts a float or collections of floats to a collection of strings
     */
    FloatsToStringsInvocation: {
      /**
       * Floats
       * @description float or collection of floats
       */
      floats?: number | number[]
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Type
       * @default floats_to_strings
       * @enum {string}
       */
      type: "floats_to_strings"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * Float Subtraction (-)
     * @description Subtracts two floating point numbers
     */
    FloatSubtractInvocation: {
      /**
       * A
       * @description The first number
       * @default 0
       */
      a?: number
      /**
       * B
       * @description The second number
       * @default 0
       */
      b?: number
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Type
       * @default floatsub
       * @enum {string}
       */
      type: "floatsub"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * Float Tangent (tan)
     * @description Calculates the tangent of a float as radians
     */
    FloatTangentInvocation: {
      /**
       * A
       * @description The first number
       * @default 0
       */
      a?: number
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Type
       * @default floattan
       * @enum {string}
       */
      type: "floattan"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * Float To Integer
     * @description Rounds a float number to (a multiple of) an integer.
     */
    FloatToIntegerInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Method
       * @description The method to use for rounding
       * @default Nearest
       * @enum {string}
       */
      method?: "Ceiling" | "Floor" | "Nearest" | "Truncate"
      /**
       * Multiple of
       * @description The multiple to round to
       * @default 1
       */
      multiple?: number
      /**
       * Type
       * @default float_to_int
       * @enum {string}
       */
      type: "float_to_int"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Value
       * @description The value to round
       * @default 0
       */
      value?: number
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /** Graph */
    Graph: {
      /**
       * Edges
       * @description The connections between nodes and their fields in this graph
       */
      edges?: components["schemas"]["Edge"][]
      /**
       * Id
       * @description The id of this graph
       */
      id?: string
      /**
       * Nodes
       * @description The nodes in this graph
       */
      nodes?: Record<string, components["schemas"]["ABSwitchFloat"] | components["schemas"]["ABSwitchInt"] | components["schemas"]["AdaptiveEQInvocation"] | components["schemas"]["AddInvocation"] | components["schemas"]["BlankImageInvocation"] | components["schemas"]["BlendLatentsInvocation"] | components["schemas"]["BooleanCastFloat"] | components["schemas"]["BooleanCastInteger"] | components["schemas"]["BooleanCollectionInvocation"] | components["schemas"]["BooleanEqualsInvocation"] | components["schemas"]["BooleanInvocation"] | components["schemas"]["BooleanNotInvocation"] | components["schemas"]["BooleanRandomInvocation"] | components["schemas"]["CannyImageProcessorInvocation"] | components["schemas"]["ClipSkipInvocation"] | components["schemas"]["CollectInvocation"] | components["schemas"]["ColorCorrectInvocation"] | components["schemas"]["ColorInvocation"] | components["schemas"]["ColorMapImageProcessorInvocation"] | components["schemas"]["CompelInvocation"] | components["schemas"]["ConditioningCollectionInvocation"] | components["schemas"]["ConditioningInvocation"] | components["schemas"]["ContentShuffleImageProcessorInvocation"] | components["schemas"]["ControlNetInvocation"] | components["schemas"]["CreateDenoiseMaskInvocation"] | components["schemas"]["CSVToIndexStringInvocation"] | components["schemas"]["CSVToStringsInvocation"] | components["schemas"]["CV2InfillInvocation"] | components["schemas"]["CvInpaintInvocation"] | components["schemas"]["DenoiseLatentsInvocation"] | components["schemas"]["DivideInvocation"] | components["schemas"]["DynamicPromptInvocation"] | components["schemas"]["ESRGANInvocation"] | components["schemas"]["FaceIdentifierInvocation"] | components["schemas"]["FaceMaskInvocation"] | components["schemas"]["FaceOffInvocation"] | components["schemas"]["FloatAbsoluteInvocation"] | components["schemas"]["FloatAddInvocation"] | components["schemas"]["FloatArcCosineInvocation"] | components["schemas"]["FloatArcSineInvocation"] | components["schemas"]["FloatArcTangentInvocation"] | components["schemas"]["FloatCastBooleanInvocation"] | components["schemas"]["FloatCastIntegerInvocation"] | components["schemas"]["FloatCeilInvocation"] | components["schemas"]["FloatCollectionInvocation"] | components["schemas"]["FloatCosineInvocation"] | components["schemas"]["FloatDivideInvocation"] | components["schemas"]["FloatEqualsInvocation"] | components["schemas"]["FloatFloorInvocation"] | components["schemas"]["FloatGreaterEqualsInvocation"] | components["schemas"]["FloatGreaterInvocation"] | components["schemas"]["FloatHyperbolicCosineInvocation"] | components["schemas"]["FloatHyperbolicSineInvocation"] | components["schemas"]["FloatHyperbolicTangentInvocation"] | components["schemas"]["FloatInverseHyerbolicCosineInvocation"] | components["schemas"]["FloatInverseHyerbolicSineInvocation"] | components["schemas"]["FloatInverseHyerbolicTangentInvocation"] | components["schemas"]["FloatInvocation"] | components["schemas"]["FloatLessEqualsInvocation"] | components["schemas"]["FloatLessInvocation"] | components["schemas"]["FloatLinearRangeInvocation"] | components["schemas"]["FloatLogInvocation"] | components["schemas"]["FloatLogNInvocation"] | components["schemas"]["FloatMathInvocation"] | components["schemas"]["FloatModuloInvocation"] | components["schemas"]["FloatMultiplyInvocation"] | components["schemas"]["FloatPowInvocation"] | components["schemas"]["FloatRandomInvocation"] | components["schemas"]["FloatRoundInvocation"] | components["schemas"]["FloatRoundToMultipleInvocation"] | components["schemas"]["FloatSineInvocation"] | components["schemas"]["FloatSqrtInvocation"] | components["schemas"]["FloatsToStringsInvocation"] | components["schemas"]["FloatSubtractInvocation"] | components["schemas"]["FloatTangentInvocation"] | components["schemas"]["FloatToIntegerInvocation"] | components["schemas"]["GraphInvocation"] | components["schemas"]["HedImageProcessorInvocation"] | components["schemas"]["IdealSizeInvocation"] | components["schemas"]["ImageBlurInvocation"] | components["schemas"]["ImageChannelInvocation"] | components["schemas"]["ImageChannelMultiplyInvocation"] | components["schemas"]["ImageChannelOffsetInvocation"] | components["schemas"]["ImageCollectionInvocation"] | components["schemas"]["ImageConvertInvocation"] | components["schemas"]["ImageCropInvocation"] | components["schemas"]["ImageHueAdjustmentInvocation"] | components["schemas"]["ImageInverseLerpInvocation"] | components["schemas"]["ImageInvocation"] | components["schemas"]["ImageLerpInvocation"] | components["schemas"]["ImageMultiplyInvocation"] | components["schemas"]["ImageNSFWBlurInvocation"] | components["schemas"]["ImagePasteInvocation"] | components["schemas"]["ImageProcessorInvocation"] | components["schemas"]["ImageResizeInvocation"] | components["schemas"]["ImageScaleInvocation"] | components["schemas"]["ImagesToGridsInvocation"] | components["schemas"]["ImageToLatentsInvocation"] | components["schemas"]["ImageWatermarkInvocation"] | components["schemas"]["InfillColorInvocation"] | components["schemas"]["InfillPatchMatchInvocation"] | components["schemas"]["InfillTileInvocation"] | components["schemas"]["IntegerAbsoluteInvocation"] | components["schemas"]["IntegerAddInvocation"] | components["schemas"]["IntegerCastBooleanInvocation"] | components["schemas"]["IntegerCastFloatInvocation"] | components["schemas"]["IntegerCollectionInvocation"] | components["schemas"]["IntegerDivideInvocation"] | components["schemas"]["IntegerEqualsInvocation"] | components["schemas"]["IntegerGreaterEqualsInvocation"] | components["schemas"]["IntegerGreaterInvocation"] | components["schemas"]["IntegerInvocation"] | components["schemas"]["IntegerLessEqualsInvocation"] | components["schemas"]["IntegerLessInvocation"] | components["schemas"]["IntegerMathInvocation"] | components["schemas"]["IntegerModuloInvocation"] | components["schemas"]["IntegerMultiplyInvocation"] | components["schemas"]["IntegerRandomInvocation"] | components["schemas"]["IntegerSubtractInvocation"] | components["schemas"]["IntsToStringsInvocation"] | components["schemas"]["IPAdapterInvocation"] | components["schemas"]["IterateInvocation"] | components["schemas"]["LaMaInfillInvocation"] | components["schemas"]["LatentsCollectionInvocation"] | components["schemas"]["LatentsInvocation"] | components["schemas"]["LatentsToImageInvocation"] | components["schemas"]["LeresImageProcessorInvocation"] | components["schemas"]["LineartAnimeImageProcessorInvocation"] | components["schemas"]["LineartImageProcessorInvocation"] | components["schemas"]["LoraLoaderInvocation"] | components["schemas"]["MainModelLoaderInvocation"] | components["schemas"]["MaskCombineInvocation"] | components["schemas"]["MaskEdgeInvocation"] | components["schemas"]["MaskFromAlphaInvocation"] | components["schemas"]["MediapipeFaceProcessorInvocation"] | components["schemas"]["MetadataAccumulatorInvocation"] | components["schemas"]["MidasDepthImageProcessorInvocation"] | components["schemas"]["MlsdImageProcessorInvocation"] | components["schemas"]["MultiplyInvocation"] | components["schemas"]["NoiseInvocation"] | components["schemas"]["NormalbaeImageProcessorInvocation"] | components["schemas"]["ONNXLatentsToImageInvocation"] | components["schemas"]["OnnxModelLoaderInvocation"] | components["schemas"]["ONNXPromptInvocation"] | components["schemas"]["ONNXTextToLatentsInvocation"] | components["schemas"]["OpenposeImageProcessorInvocation"] | components["schemas"]["PidiImageProcessorInvocation"] | components["schemas"]["PromptsFromFileInvocation"] | components["schemas"]["PromptsToFileInvocation"] | components["schemas"]["PromptStrengthInvocation"] | components["schemas"]["PromptStrengthsCombineInvocation"] | components["schemas"]["PTFieldsCollectInvocation"] | components["schemas"]["PTFieldsExpandInvocation"] | components["schemas"]["RandomFloatInvocation"] | components["schemas"]["RandomIntInvocation"] | components["schemas"]["RandomRangeInvocation"] | components["schemas"]["RangeInvocation"] | components["schemas"]["RangeOfSizeInvocation"] | components["schemas"]["ResizeLatentsInvocation"] | components["schemas"]["RoundInvocation"] | components["schemas"]["SaveImageInvocation"] | components["schemas"]["ScaleLatentsInvocation"] | components["schemas"]["SchedulerInvocation"] | components["schemas"]["SDXLCompelPromptInvocation"] | components["schemas"]["SDXLLoraLoaderInvocation"] | components["schemas"]["SDXLModelLoaderInvocation"] | components["schemas"]["SDXLRefinerCompelPromptInvocation"] | components["schemas"]["SDXLRefinerModelLoaderInvocation"] | components["schemas"]["SeamlessModeInvocation"] | components["schemas"]["SegmentAnythingProcessorInvocation"] | components["schemas"]["ShowImageInvocation"] | components["schemas"]["StepParamEasingInvocation"] | components["schemas"]["StringCollectionInvocation"] | components["schemas"]["StringInvocation"] | components["schemas"]["StringJoinInvocation"] | components["schemas"]["StringJoinThreeInvocation"] | components["schemas"]["StringReplaceInvocation"] | components["schemas"]["StringSplitInvocation"] | components["schemas"]["StringSplitNegInvocation"] | components["schemas"]["StringToFloatInvocation"] | components["schemas"]["StringToIntInvocation"] | components["schemas"]["StringToSchedulerInvocation"] | components["schemas"]["SubtractInvocation"] | components["schemas"]["T2IAdapterInvocation"] | components["schemas"]["TileResamplerProcessorInvocation"] | components["schemas"]["VaeLoaderInvocation"] | components["schemas"]["ValueToValueInvocation"] | components["schemas"]["XYCollectCSVInvocation"] | components["schemas"]["XYCollectInvocation"] | components["schemas"]["XYExpandInvocation"] | components["schemas"]["XYImageCollectInvocation"] | components["schemas"]["XYImagesToGridInvocation"] | components["schemas"]["ZoeDepthImageProcessorInvocation"]>
    }
    /**
     * GraphExecutionState
     * @description Tracks the state of a graph execution
     */
    GraphExecutionState: {
      /**
       * Errors
       * @description Errors raised when executing nodes
       */
      errors: Record<string, string>
      /**
       * Executed
       * @description The set of node ids that have been executed
       */
      executed: string[]
      /**
       * Executed History
       * @description The list of node ids that have been executed, in order of execution
       */
      executed_history: string[]
      /**
       * Execution Graph
       * @description The expanded graph of activated and executed nodes
       */
      execution_graph: components["schemas"]["Graph"]
      /**
       * Graph
       * @description The graph being executed
       */
      graph: components["schemas"]["Graph"]
      /**
       * Id
       * @description The id of the execution state
       */
      id: string
      /**
       * Prepared Source Mapping
       * @description The map of prepared nodes to original graph nodes
       */
      prepared_source_mapping: Record<string, string>
      /**
       * Results
       * @description The results of node executions
       */
      results: Record<string, components["schemas"]["BooleanCollectionOutput"] | components["schemas"]["BooleanOutput"] | components["schemas"]["ClipSkipInvocationOutput"] | components["schemas"]["CollectInvocationOutput"] | components["schemas"]["ColorCollectionOutput"] | components["schemas"]["ColorOutput"] | components["schemas"]["ConditioningCollectionOutput"] | components["schemas"]["ConditioningOutput"] | components["schemas"]["ControlOutput"] | components["schemas"]["DenoiseMaskOutput"] | components["schemas"]["FaceMaskOutput"] | components["schemas"]["FaceOffOutput"] | components["schemas"]["FloatCollectionOutput"] | components["schemas"]["FloatOutput"] | components["schemas"]["GraphInvocationOutput"] | components["schemas"]["IdealSizeOutput"] | components["schemas"]["ImageCollectionOutput"] | components["schemas"]["ImageOutput"] | components["schemas"]["IntegerCollectionOutput"] | components["schemas"]["IntegerOutput"] | components["schemas"]["IPAdapterOutput"] | components["schemas"]["IterateInvocationOutput"] | components["schemas"]["LatentsCollectionOutput"] | components["schemas"]["LatentsOutput"] | components["schemas"]["LoraLoaderOutput"] | components["schemas"]["MetadataAccumulatorOutput"] | components["schemas"]["ModelLoaderOutput"] | components["schemas"]["NoiseOutput"] | components["schemas"]["ONNXModelLoaderOutput"] | components["schemas"]["PromptsToFileInvocationOutput"] | components["schemas"]["PTFieldsCollectOutput"] | components["schemas"]["PTFieldsExpandOutput"] | components["schemas"]["SchedulerOutput"] | components["schemas"]["SDXLLoraLoaderOutput"] | components["schemas"]["SDXLModelLoaderOutput"] | components["schemas"]["SDXLRefinerModelLoaderOutput"] | components["schemas"]["SeamlessModeOutput"] | components["schemas"]["StrFltIntOutput"] | components["schemas"]["String2Output"] | components["schemas"]["StringCollectionOutput"] | components["schemas"]["StringOutput"] | components["schemas"]["StringPosNegOutput"] | components["schemas"]["T2IAdapterOutput"] | components["schemas"]["VaeLoaderOutput"] | components["schemas"]["XYCollectOutput"] | components["schemas"]["XYExpandOutput"]>
      /**
       * Source Prepared Mapping
       * @description The map of original graph nodes to prepared nodes
       */
      source_prepared_mapping: Record<string, string[]>
    }
    /**
     * GraphInvocation
     * @description Execute a graph
     */
    GraphInvocation: {
      /**
       * Graph
       * @description The graph to run
       */
      graph?: components["schemas"]["Graph"]
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Type
       * @default graph
       * @enum {string}
       */
      type: "graph"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * GraphInvocationOutput
     * @description Base class for all invocation outputs.
     *
     * All invocation outputs must use the `@invocation_output` decorator to provide their unique type.
     */
    GraphInvocationOutput: {
      /**
       * Type
       * @default graph_output
       * @enum {string}
       */
      type: "graph_output"
    }
    /**
     * HED (softedge) Processor
     * @description Applies HED edge detection to image
     */
    HedImageProcessorInvocation: {
      /**
       * Detect Resolution
       * @description Pixel resolution for detection
       * @default 512
       */
      detect_resolution?: number
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Image
       * @description The image to process
       */
      image: components["schemas"]["ImageField"]
      /**
       * Image Resolution
       * @description Pixel resolution for output image
       * @default 512
       */
      image_resolution?: number
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Scribble
       * @description Whether or not to use scribble mode
       * @default false
       */
      scribble?: boolean
      /**
       * Type
       * @default hed_image_processor
       * @enum {string}
       */
      type: "hed_image_processor"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components["schemas"]["ValidationError"][]
    }
    /**
     * Ideal Size
     * @description Calculates the ideal size for generation to avoid duplication
     */
    IdealSizeInvocation: {
      /**
       * Height
       * @description Target height
       * @default 576
       */
      height?: number
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Multiplier
       * @description Dimensional multiplier
       * @default 1
       */
      multiplier?: number
      /**
       * Type
       * @default ideal_size
       * @enum {string}
       */
      type: "ideal_size"
      /**
       * Unet
       * @description UNet submodel
       */
      unet?: components["schemas"]["UNetField"]
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Vae
       * @description Vae submodel
       */
      vae?: components["schemas"]["VaeField"]
      /**
       * Width
       * @description Target width
       * @default 1024
       */
      width?: number
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * IdealSizeOutput
     * @description Base class for invocations that output an image
     */
    IdealSizeOutput: {
      /**
       * Height
       * @description The ideal height of the image in pixels
       */
      height: number
      /**
       * Type
       * @default ideal_size_output
       * @enum {string}
       */
      type: "ideal_size_output"
      /**
       * Width
       * @description The ideal width of the image in pixels
       */
      width: number
    }
    /**
     * Blur Image
     * @description Blurs an image
     */
    ImageBlurInvocation: {
      /**
       * Blur Type
       * @description The type of blur
       * @default gaussian
       * @enum {string}
       */
      blur_type?: "box" | "gaussian"
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Image
       * @description The image to blur
       */
      image: components["schemas"]["ImageField"]
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Radius
       * @description The blur radius
       * @default 8
       */
      radius?: number
      /**
       * Type
       * @default img_blur
       * @enum {string}
       */
      type: "img_blur"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * ImageCategory
     * @description The category of an image.
     *
     * - GENERAL: The image is an output, init image, or otherwise an image without a specialized purpose.
     * - MASK: The image is a mask image.
     * - CONTROL: The image is a ControlNet control image.
     * - USER: The image is a user-provide image.
     * - OTHER: The image is some other type of image with a specialized purpose. To be used by external nodes.
     * @enum {string}
     */
    ImageCategory: "control" | "general" | "mask" | "other" | "user"
    /**
     * Extract Image Channel
     * @description Gets a channel from an image.
     */
    ImageChannelInvocation: {
      /**
       * Channel
       * @description The channel to get
       * @default A
       * @enum {string}
       */
      channel?: "A" | "B" | "G" | "R"
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Image
       * @description The image to get the channel from
       */
      image: components["schemas"]["ImageField"]
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Type
       * @default img_chan
       * @enum {string}
       */
      type: "img_chan"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * Multiply Image Channel
     * @description Scale a specific color channel of an image.
     */
    ImageChannelMultiplyInvocation: {
      /**
       * Channel
       * @description Which channel to adjust
       * @enum {string}
       */
      channel: "A (LAB)" | "Alpha (RGBA)" | "B (LAB)" | "Black (CMYK)" | "Blue (RGBA)" | "Cb (YCbCr)" | "Cr (YCbCr)" | "Cyan (CMYK)" | "Green (RGBA)" | "Hue (HSV)" | "Luminosity (LAB)" | "Magenta (CMYK)" | "Red (RGBA)" | "Saturation (HSV)" | "Value (HSV)" | "Y (YCbCr)" | "Yellow (CMYK)"
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Image
       * @description The image to adjust
       */
      image: components["schemas"]["ImageField"]
      /**
       * Invert Channel
       * @description Invert the channel after scaling
       * @default false
       */
      invert_channel?: boolean
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Scale
       * @description The amount to scale the channel by.
       * @default 1
       */
      scale?: number
      /**
       * Type
       * @default img_channel_multiply
       * @enum {string}
       */
      type: "img_channel_multiply"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * Offset Image Channel
     * @description Add or subtract a value from a specific color channel of an image.
     */
    ImageChannelOffsetInvocation: {
      /**
       * Channel
       * @description Which channel to adjust
       * @enum {string}
       */
      channel: "A (LAB)" | "Alpha (RGBA)" | "B (LAB)" | "Black (CMYK)" | "Blue (RGBA)" | "Cb (YCbCr)" | "Cr (YCbCr)" | "Cyan (CMYK)" | "Green (RGBA)" | "Hue (HSV)" | "Luminosity (LAB)" | "Magenta (CMYK)" | "Red (RGBA)" | "Saturation (HSV)" | "Value (HSV)" | "Y (YCbCr)" | "Yellow (CMYK)"
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Image
       * @description The image to adjust
       */
      image: components["schemas"]["ImageField"]
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Offset
       * @description The amount to adjust the channel by
       * @default 0
       */
      offset?: number
      /**
       * Type
       * @default img_channel_offset
       * @enum {string}
       */
      type: "img_channel_offset"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * Image Collection Primitive
     * @description A collection of image primitive values
     */
    ImageCollectionInvocation: {
      /**
       * Collection
       * @description The collection of image values
       */
      collection: components["schemas"]["ImageField"][]
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Type
       * @default image_collection
       * @enum {string}
       */
      type: "image_collection"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * ImageCollectionOutput
     * @description Base class for nodes that output a collection of images
     */
    ImageCollectionOutput: {
      /**
       * Collection
       * @description The output images
       */
      collection: components["schemas"]["ImageField"][]
      /**
       * Type
       * @default image_collection_output
       * @enum {string}
       */
      type: "image_collection_output"
    }
    /**
     * Convert Image Mode
     * @description Converts an image to a different mode.
     */
    ImageConvertInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Image
       * @description The image to convert
       */
      image: components["schemas"]["ImageField"]
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Mode
       * @description The mode to convert to
       * @default L
       * @enum {string}
       */
      mode?: "CMYK" | "F" | "HSV" | "I" | "L" | "LAB" | "RGB" | "RGBA" | "YCbCr"
      /**
       * Type
       * @default img_conv
       * @enum {string}
       */
      type: "img_conv"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * Crop Image
     * @description Crops an image to a specified box. The box can be outside of the image.
     */
    ImageCropInvocation: {
      /**
       * Height
       * @description The height of the crop rectangle
       * @default 512
       */
      height?: number
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Image
       * @description The image to crop
       */
      image: components["schemas"]["ImageField"]
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Type
       * @default img_crop
       * @enum {string}
       */
      type: "img_crop"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Width
       * @description The width of the crop rectangle
       * @default 512
       */
      width?: number
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
      /**
       * X
       * @description The left x coordinate of the crop rectangle
       * @default 0
       */
      x?: number
      /**
       * Y
       * @description The top y coordinate of the crop rectangle
       * @default 0
       */
      y?: number
    }
    /**
     * ImageDTO
     * @description Deserialized image record, enriched for the frontend.
     */
    ImageDTO: {
      /**
       * Board Id
       * @description The id of the board the image belongs to, if one exists.
       */
      board_id?: string
      /**
       * Created At
       * @description The created timestamp of the image.
       */
      created_at: string
      /**
       * Deleted At
       * @description The deleted timestamp of the image.
       */
      deleted_at?: string
      /**
       * Height
       * @description The height of the image in px.
       */
      height: number
      /** @description The category of the image. */
      image_category: components["schemas"]["ImageCategory"]
      /**
       * Image Name
       * @description The unique name of the image.
       */
      image_name: string
      /** @description The type of the image. */
      image_origin: components["schemas"]["ResourceOrigin"]
      /**
       * Image Url
       * @description The URL of the image.
       */
      image_url: string
      /**
       * Is Intermediate
       * @description Whether this is an intermediate image.
       */
      is_intermediate: boolean
      /**
       * Node Id
       * @description The node ID that generated this image, if it is a generated image.
       */
      node_id?: string
      /**
       * Session Id
       * @description The session ID that generated this image, if it is a generated image.
       */
      session_id?: string
      /**
       * Starred
       * @description Whether this image is starred.
       */
      starred: boolean
      /**
       * Thumbnail Url
       * @description The URL of the image's thumbnail.
       */
      thumbnail_url: string
      /**
       * Updated At
       * @description The updated timestamp of the image.
       */
      updated_at: string
      /**
       * Width
       * @description The width of the image in px.
       */
      width: number
    }
    /**
     * ImageField
     * @description An image primitive field
     */
    ImageField: {
      /**
       * Image Name
       * @description The name of the image
       */
      image_name: string
    }
    /**
     * Adjust Image Hue
     * @description Adjusts the Hue of an image.
     */
    ImageHueAdjustmentInvocation: {
      /**
       * Hue
       * @description The degrees by which to rotate the hue, 0-360
       * @default 0
       */
      hue?: number
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Image
       * @description The image to adjust
       */
      image: components["schemas"]["ImageField"]
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Type
       * @default img_hue_adjust
       * @enum {string}
       */
      type: "img_hue_adjust"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * Inverse Lerp Image
     * @description Inverse linear interpolation of all pixels of an image
     */
    ImageInverseLerpInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Image
       * @description The image to lerp
       */
      image: components["schemas"]["ImageField"]
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Max
       * @description The maximum input value
       * @default 255
       */
      max?: number
      /**
       * Min
       * @description The minimum input value
       * @default 0
       */
      min?: number
      /**
       * Type
       * @default img_ilerp
       * @enum {string}
       */
      type: "img_ilerp"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * Image Primitive
     * @description An image primitive value
     */
    ImageInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Image
       * @description The image to load
       */
      image: components["schemas"]["ImageField"]
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Type
       * @default image
       * @enum {string}
       */
      type: "image"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * Lerp Image
     * @description Linear interpolation of all pixels of an image
     */
    ImageLerpInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Image
       * @description The image to lerp
       */
      image: components["schemas"]["ImageField"]
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Max
       * @description The maximum output value
       * @default 255
       */
      max?: number
      /**
       * Min
       * @description The minimum output value
       * @default 0
       */
      min?: number
      /**
       * Type
       * @default img_lerp
       * @enum {string}
       */
      type: "img_lerp"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * ImageMetadata
     * @description An image's generation metadata
     */
    ImageMetadata: {
      /**
       * Graph
       * @description The graph that created the image
       */
      graph?: Record<string, never>
      /**
       * Metadata
       * @description The image's core metadata, if it was created in the Linear or Canvas UI
       */
      metadata?: Record<string, never>
    }
    /**
     * Multiply Images
     * @description Multiplies two images together using `PIL.ImageChops.multiply()`.
     */
    ImageMultiplyInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Image1
       * @description The first image to multiply
       */
      image1: components["schemas"]["ImageField"]
      /**
       * Image2
       * @description The second image to multiply
       */
      image2: components["schemas"]["ImageField"]
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Type
       * @default img_mul
       * @enum {string}
       */
      type: "img_mul"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * Blur NSFW Image
     * @description Add blur to NSFW-flagged images
     */
    ImageNSFWBlurInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Image
       * @description The image to check
       */
      image: components["schemas"]["ImageField"]
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Metadata
       * @description Optional core metadata to be written to image
       */
      metadata?: components["schemas"]["CoreMetadata"]
      /**
       * Type
       * @default img_nsfw
       * @enum {string}
       */
      type: "img_nsfw"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * ImageOutput
     * @description Base class for nodes that output a single image
     */
    ImageOutput: {
      /**
       * Height
       * @description The height of the image in pixels
       */
      height: number
      /**
       * Image
       * @description The output image
       */
      image: components["schemas"]["ImageField"]
      /**
       * Type
       * @default image_output
       * @enum {string}
       */
      type: "image_output"
      /**
       * Width
       * @description The width of the image in pixels
       */
      width: number
    }
    /**
     * Paste Image
     * @description Pastes an image into another image.
     */
    ImagePasteInvocation: {
      /**
       * Base Image
       * @description The base image
       */
      base_image: components["schemas"]["ImageField"]
      /**
       * Crop
       * @description Crop to base image dimensions
       * @default false
       */
      crop?: boolean
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Image
       * @description The image to paste
       */
      image: components["schemas"]["ImageField"]
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Mask
       * @description The mask to use when pasting
       */
      mask?: components["schemas"]["ImageField"]
      /**
       * Type
       * @default img_paste
       * @enum {string}
       */
      type: "img_paste"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
      /**
       * X
       * @description The left x coordinate at which to paste the image
       * @default 0
       */
      x?: number
      /**
       * Y
       * @description The top y coordinate at which to paste the image
       * @default 0
       */
      y?: number
    }
    /**
     * Base Image Processor
     * @description Base class for invocations that preprocess images for ControlNet
     */
    ImageProcessorInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Image
       * @description The image to process
       */
      image: components["schemas"]["ImageField"]
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Type
       * @default image_processor
       * @enum {string}
       */
      type: "image_processor"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * ImageRecordChanges
     * @description A set of changes to apply to an image record.
     *
     * Only limited changes are valid:
     *   - `image_category`: change the category of an image
     *   - `session_id`: change the session associated with an image
     *   - `is_intermediate`: change the image's `is_intermediate` flag
     *   - `starred`: change whether the image is starred
     */
    ImageRecordChanges: {
      /** @description The image's new category. */
      image_category?: components["schemas"]["ImageCategory"]
      /**
       * Is Intermediate
       * @description The image's new `is_intermediate` flag.
       */
      is_intermediate?: boolean
      /**
       * Session Id
       * @description The image's new session ID.
       */
      session_id?: string
      /**
       * Starred
       * @description The image's new `starred` state
       */
      starred?: boolean
    }
    /**
     * Resize Image
     * @description Resizes an image to specific dimensions
     */
    ImageResizeInvocation: {
      /**
       * Height
       * @description The height to resize to (px)
       * @default 512
       */
      height?: number
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Image
       * @description The image to resize
       */
      image: components["schemas"]["ImageField"]
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Metadata
       * @description Optional core metadata to be written to image
       */
      metadata?: components["schemas"]["CoreMetadata"]
      /**
       * Resample Mode
       * @description The resampling mode
       * @default bicubic
       * @enum {string}
       */
      resample_mode?: "bicubic" | "bilinear" | "box" | "hamming" | "lanczos" | "nearest"
      /**
       * Type
       * @default img_resize
       * @enum {string}
       */
      type: "img_resize"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Width
       * @description The width to resize to (px)
       * @default 512
       */
      width?: number
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * Scale Image
     * @description Scales an image by a factor
     */
    ImageScaleInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Image
       * @description The image to scale
       */
      image: components["schemas"]["ImageField"]
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Resample Mode
       * @description The resampling mode
       * @default bicubic
       * @enum {string}
       */
      resample_mode?: "bicubic" | "bilinear" | "box" | "hamming" | "lanczos" | "nearest"
      /**
       * Scale Factor
       * @description The factor by which to scale the image
       * @default 2
       */
      scale_factor?: number
      /**
       * Type
       * @default img_scale
       * @enum {string}
       */
      type: "img_scale"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /** ImagesDownloaded */
    ImagesDownloaded: {
      /**
       * Response
       * @description If defined, the message to display to the user when images begin downloading
       */
      response?: string
    }
    /**
     * Images To Grids
     * @description Load a collection of images and create grid images from it and output a collection of generated grid images
     */
    ImagesToGridsInvocation: {
      /**
       * Background Color
       * @description The color to use as the background
       * @default {
       *   "r": 0,
       *   "g": 0,
       *   "b": 0,
       *   "a": 255
       * }
       */
      background_color?: components["schemas"]["ColorField"]
      /**
       * Board
       * @description The board to save the image to
       */
      board?: components["schemas"]["BoardField"]
      /**
       * Columns
       * @description The number of columns in each grid
       * @default 1
       */
      columns?: number
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Images
       * @description The image collection to turn into grids
       */
      images?: components["schemas"]["ImageField"][]
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Metadata
       * @description Optional core metadata to be written to image
       */
      metadata?: components["schemas"]["CoreMetadata"]
      /**
       * Resample Mode
       * @description The resampling mode
       * @default bicubic
       * @enum {string}
       */
      resample_mode?: "bicubic" | "bilinear" | "box" | "hamming" | "lanczos" | "nearest"
      /**
       * Rows
       * @description The number of rows to have in each grid
       * @default 1
       */
      rows?: number
      /**
       * Scale Factor
       * @description The factor by which to scale the images
       * @default 1
       */
      scale_factor?: number
      /**
       * Space
       * @description The space to be added between images
       * @default 1
       */
      space?: number
      /**
       * Type
       * @default image_grid
       * @enum {string}
       */
      type: "image_grid"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /** ImagesUpdatedFromListResult */
    ImagesUpdatedFromListResult: {
      /**
       * Updated Image Names
       * @description The image names that were updated
       */
      updated_image_names: string[]
    }
    /**
     * Image to Latents
     * @description Encodes an image into latents.
     */
    ImageToLatentsInvocation: {
      /**
       * Fp32
       * @description Whether or not to use full float32 precision
       * @default false
       */
      fp32?: boolean
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Image
       * @description The image to encode
       */
      image: components["schemas"]["ImageField"]
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Tiled
       * @description Processing using overlapping tiles (reduce memory consumption)
       * @default false
       */
      tiled?: boolean
      /**
       * Type
       * @default i2l
       * @enum {string}
       */
      type: "i2l"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Vae
       * @description VAE
       */
      vae: components["schemas"]["VaeField"]
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * ImageUrlsDTO
     * @description The URLs for an image and its thumbnail.
     */
    ImageUrlsDTO: {
      /**
       * Image Name
       * @description The unique name of the image.
       */
      image_name: string
      /**
       * Image Url
       * @description The URL of the image.
       */
      image_url: string
      /**
       * Thumbnail Url
       * @description The URL of the image's thumbnail.
       */
      thumbnail_url: string
    }
    /**
     * Add Invisible Watermark
     * @description Add an invisible watermark to an image
     */
    ImageWatermarkInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Image
       * @description The image to check
       */
      image: components["schemas"]["ImageField"]
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Metadata
       * @description Optional core metadata to be written to image
       */
      metadata?: components["schemas"]["CoreMetadata"]
      /**
       * Text
       * @description Watermark text
       * @default InvokeAI
       */
      text?: string
      /**
       * Type
       * @default img_watermark
       * @enum {string}
       */
      type: "img_watermark"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * Solid Color Infill
     * @description Infills transparent areas of an image with a solid color
     */
    InfillColorInvocation: {
      /**
       * Color
       * @description The color to use to infill
       * @default {
       *   "r": 127,
       *   "g": 127,
       *   "b": 127,
       *   "a": 255
       * }
       */
      color?: components["schemas"]["ColorField"]
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Image
       * @description The image to infill
       */
      image: components["schemas"]["ImageField"]
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Type
       * @default infill_rgba
       * @enum {string}
       */
      type: "infill_rgba"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * PatchMatch Infill
     * @description Infills transparent areas of an image using the PatchMatch algorithm
     */
    InfillPatchMatchInvocation: {
      /**
       * Downscale
       * @description Run patchmatch on downscaled image to speedup infill
       * @default 2
       */
      downscale?: number
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Image
       * @description The image to infill
       */
      image: components["schemas"]["ImageField"]
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Resample Mode
       * @description The resampling mode
       * @default bicubic
       * @enum {string}
       */
      resample_mode?: "bicubic" | "bilinear" | "box" | "hamming" | "lanczos" | "nearest"
      /**
       * Type
       * @default infill_patchmatch
       * @enum {string}
       */
      type: "infill_patchmatch"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * Tile Infill
     * @description Infills transparent areas of an image with tiles of the image
     */
    InfillTileInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Image
       * @description The image to infill
       */
      image: components["schemas"]["ImageField"]
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Seed
       * @description The seed to use for tile generation (omit for random)
       */
      seed?: number
      /**
       * Tile Size
       * @description The tile size (px)
       * @default 32
       */
      tile_size?: number
      /**
       * Type
       * @default infill_tile
       * @enum {string}
       */
      type: "infill_tile"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * Input
     * @description The type of input a field accepts.
     * - `Input.Direct`: The field must have its value provided directly, when the invocation and field       are instantiated.
     * - `Input.Connection`: The field must have its value provided by a connection.
     * - `Input.Any`: The field may have its value provided either directly or by a connection.
     * @enum {string}
     */
    Input: "any" | "connection" | "direct"
    /**
     * Integer Absolute (abs)
     * @description Calculates the absolute value of an integer
     */
    IntegerAbsoluteInvocation: {
      /**
       * A
       * @description The first number
       * @default 0
       */
      a?: number
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Type
       * @default intabs
       * @enum {string}
       */
      type: "intabs"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * Integer Addition (+)
     * @description Adds two integers
     */
    IntegerAddInvocation: {
      /**
       * A
       * @description The first number
       * @default 0
       */
      a?: number
      /**
       * B
       * @description The second number
       * @default 0
       */
      b?: number
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Type
       * @default intadd
       * @enum {string}
       */
      type: "intadd"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * Integer to Boolean
     * @description Casts an integer to a boolean
     */
    IntegerCastBooleanInvocation: {
      /**
       * A
       * @description The first number
       * @default 0
       */
      a?: number
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Type
       * @default inttobool
       * @enum {string}
       */
      type: "inttobool"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * Integer to Float
     * @description Casts an integer to a float
     */
    IntegerCastFloatInvocation: {
      /**
       * A
       * @description The first number
       * @default 0
       */
      a?: number
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Type
       * @default inttofloat
       * @enum {string}
       */
      type: "inttofloat"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * Integer Collection Primitive
     * @description A collection of integer primitive values
     */
    IntegerCollectionInvocation: {
      /**
       * Collection
       * @description The collection of integer values
       */
      collection?: number[]
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Type
       * @default integer_collection
       * @enum {string}
       */
      type: "integer_collection"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * IntegerCollectionOutput
     * @description Base class for nodes that output a collection of integers
     */
    IntegerCollectionOutput: {
      /**
       * Collection
       * @description The int collection
       */
      collection: number[]
      /**
       * Type
       * @default integer_collection_output
       * @enum {string}
       */
      type: "integer_collection_output"
    }
    /**
     * Integer Division (/)
     * @description Divides two integers
     */
    IntegerDivideInvocation: {
      /**
       * A
       * @description The first number
       * @default 0
       */
      a?: number
      /**
       * B
       * @description The second number
       * @default 0
       */
      b?: number
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Type
       * @default intdiv
       * @enum {string}
       */
      type: "intdiv"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * Integer Equals (==)
     * @description Compares two Integers
     */
    IntegerEqualsInvocation: {
      /**
       * A
       * @description The first number
       * @default true
       */
      a?: number
      /**
       * B
       * @description The second number
       * @default true
       */
      b?: number
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Type
       * @default intequals
       * @enum {string}
       */
      type: "intequals"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * Integer Greater or Equal Than (>=)
     * @description Compares if one Integer is greater than or equal to another
     */
    IntegerGreaterEqualsInvocation: {
      /**
       * A
       * @description The first number
       * @default true
       */
      a?: number
      /**
       * B
       * @description The second number
       * @default true
       */
      b?: number
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Type
       * @default intgreaterequals
       * @enum {string}
       */
      type: "intgreaterequals"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * Integer Greater Than (>)
     * @description Compares if one Integer is greater than another
     */
    IntegerGreaterInvocation: {
      /**
       * A
       * @description The first number
       * @default true
       */
      a?: number
      /**
       * B
       * @description The second number
       * @default true
       */
      b?: number
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Type
       * @default intgreater
       * @enum {string}
       */
      type: "intgreater"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * Integer Primitive
     * @description An integer primitive value
     */
    IntegerInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Type
       * @default integer
       * @enum {string}
       */
      type: "integer"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Value
       * @description The integer value
       * @default 0
       */
      value?: number
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * Integer Less or Equal Than (<=)
     * @description Compares if one Integer is less than or equal to another
     */
    IntegerLessEqualsInvocation: {
      /**
       * A
       * @description The first number
       * @default true
       */
      a?: number
      /**
       * B
       * @description The second number
       * @default true
       */
      b?: number
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Type
       * @default intlessequals
       * @enum {string}
       */
      type: "intlessequals"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * Integer Less Than (<)
     * @description Compares if one Integer is less than another
     */
    IntegerLessInvocation: {
      /**
       * A
       * @description The first number
       * @default true
       */
      a?: number
      /**
       * B
       * @description The second number
       * @default true
       */
      b?: number
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Type
       * @default intless
       * @enum {string}
       */
      type: "intless"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * Integer Math
     * @description Performs integer math.
     */
    IntegerMathInvocation: {
      /**
       * A
       * @description The first number
       * @default 0
       */
      a?: number
      /**
       * B
       * @description The second number
       * @default 0
       */
      b?: number
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Operation
       * @description The operation to perform
       * @default ADD
       * @enum {string}
       */
      operation?: "ABS" | "ADD" | "DIV" | "EXP" | "MAX" | "MIN" | "MOD" | "MUL" | "SUB"
      /**
       * Type
       * @default integer_math
       * @enum {string}
       */
      type: "integer_math"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * Integer Modulo (%)
     * @description Calculates the remainder of a division as an integer
     */
    IntegerModuloInvocation: {
      /**
       * A
       * @description The first number
       * @default 0
       */
      a?: number
      /**
       * B
       * @description The second number
       * @default 0
       */
      b?: number
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Type
       * @default intmodulo
       * @enum {string}
       */
      type: "intmodulo"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * Integer Multiplication (*)
     * @description Multiplies two integers
     */
    IntegerMultiplyInvocation: {
      /**
       * A
       * @description The first number
       * @default 0
       */
      a?: number
      /**
       * B
       * @description The second number
       * @default 0
       */
      b?: number
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Type
       * @default intmul
       * @enum {string}
       */
      type: "intmul"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * IntegerOutput
     * @description Base class for nodes that output a single integer
     */
    IntegerOutput: {
      /**
       * Type
       * @default integer_output
       * @enum {string}
       */
      type: "integer_output"
      /**
       * Value
       * @description The output integer
       */
      value: number
    }
    /**
     * Integer Random
     * @description Outputs a single random integer
     */
    IntegerRandomInvocation: {
      /**
       * High
       * @description The exclusive high value
       * @default 2147483647
       */
      high?: number
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Low
       * @description The inclusive low value
       * @default 0
       */
      low?: number
      /**
       * Type
       * @default intrand
       * @enum {string}
       */
      type: "intrand"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * Integer Subtraction (-)
     * @description Subtracts two integers
     */
    IntegerSubtractInvocation: {
      /**
       * A
       * @description The first number
       * @default 0
       */
      a?: number
      /**
       * B
       * @description The second number
       * @default 0
       */
      b?: number
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Type
       * @default intsub
       * @enum {string}
       */
      type: "intsub"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * Ints To Strings
     * @description IntsToStrings converts an int or collection of ints to a collection of strings
     */
    IntsToStringsInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Ints
       * @description int or collection of ints
       */
      ints?: number | number[]
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Type
       * @default ints_to_strings
       * @enum {string}
       */
      type: "ints_to_strings"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /** InvocationCacheStatus */
    InvocationCacheStatus: {
      /**
       * Enabled
       * @description Whether the invocation cache is enabled
       */
      enabled: boolean
      /**
       * Hits
       * @description The number of cache hits
       */
      hits: number
      /**
       * Max Size
       * @description The maximum size of the invocation cache
       */
      max_size: number
      /**
       * Misses
       * @description The number of cache misses
       */
      misses: number
      /**
       * Size
       * @description The current size of the invocation cache
       */
      size: number
    }
    /** IPAdapterField */
    IPAdapterField: {
      /**
       * Begin Step Percent
       * @description When the IP-Adapter is first applied (% of total steps)
       * @default 0
       */
      begin_step_percent?: number
      /**
       * End Step Percent
       * @description When the IP-Adapter is last applied (% of total steps)
       * @default 1
       */
      end_step_percent?: number
      /**
       * Image
       * @description The IP-Adapter image prompt.
       */
      image: components["schemas"]["ImageField"]
      /**
       * Image Encoder Model
       * @description The name of the CLIP image encoder model.
       */
      image_encoder_model: components["schemas"]["CLIPVisionModelField"]
      /**
       * Ip Adapter Model
       * @description The IP-Adapter model to use.
       */
      ip_adapter_model: components["schemas"]["IPAdapterModelField"]
      /**
       * Weight
       * @description The weight given to the ControlNet
       * @default 1
       */
      weight?: number | number[]
    }
    /**
     * IP-Adapter
     * @description Collects IP-Adapter info to pass to other nodes.
     */
    IPAdapterInvocation: {
      /**
       * Begin Step Percent
       * @description When the IP-Adapter is first applied (% of total steps)
       * @default 0
       */
      begin_step_percent?: number
      /**
       * End Step Percent
       * @description When the IP-Adapter is last applied (% of total steps)
       * @default 1
       */
      end_step_percent?: number
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Image
       * @description The IP-Adapter image prompt.
       */
      image: components["schemas"]["ImageField"]
      /**
       * IP-Adapter Model
       * @description The IP-Adapter model.
       */
      ip_adapter_model: components["schemas"]["IPAdapterModelField"]
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Type
       * @default ip_adapter
       * @enum {string}
       */
      type: "ip_adapter"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Weight
       * @description The weight given to the IP-Adapter
       * @default 1
       */
      weight?: number | number[]
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /** IPAdapterMetadataField */
    IPAdapterMetadataField: {
      /**
       * Begin Step Percent
       * @description When the IP-Adapter is first applied (% of total steps)
       * @default 0
       */
      begin_step_percent?: number
      /**
       * End Step Percent
       * @description When the IP-Adapter is last applied (% of total steps)
       * @default 1
       */
      end_step_percent?: number
      /**
       * Image
       * @description The IP-Adapter image prompt.
       */
      image: components["schemas"]["ImageField"]
      /**
       * Ip Adapter Model
       * @description The IP-Adapter model to use.
       */
      ip_adapter_model: components["schemas"]["IPAdapterModelField"]
      /**
       * Weight
       * @description The weight of the IP-Adapter model
       */
      weight: number
    }
    /** IPAdapterModelField */
    IPAdapterModelField: {
      /** @description Base model */
      base_model: components["schemas"]["BaseModelType"]
      /**
       * Model Name
       * @description Name of the IP-Adapter model
       */
      model_name: string
    }
    /**
     * IPAdapterModelFormat
     * @description An enumeration.
     * @enum {string}
     */
    IPAdapterModelFormat: "invokeai"
    /** IPAdapterModelInvokeAIConfig */
    IPAdapterModelInvokeAIConfig: {
      base_model: components["schemas"]["BaseModelType"]
      /** Description */
      description?: string
      error?: components["schemas"]["ModelError"]
      /**
       * Model Format
       * @enum {string}
       */
      model_format: "invokeai"
      /** Model Name */
      model_name: string
      /**
       * Model Type
       * @enum {string}
       */
      model_type: "ip_adapter"
      /** Path */
      path: string
    }
    /**
     * IPAdapterOutput
     * @description Base class for all invocation outputs.
     *
     * All invocation outputs must use the `@invocation_output` decorator to provide their unique type.
     */
    IPAdapterOutput: {
      /**
       * IP-Adapter
       * @description IP-Adapter to apply
       */
      ip_adapter: components["schemas"]["IPAdapterField"]
      /**
       * Type
       * @default ip_adapter_output
       * @enum {string}
       */
      type: "ip_adapter_output"
    }
    /**
     * IterateInvocation
     * @description Iterates over a list of items
     */
    IterateInvocation: {
      /**
       * Collection
       * @description The list of items to iterate over
       */
      collection?: unknown[]
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Index
       * @description The index, will be provided on executed iterators
       * @default 0
       */
      index?: number
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Type
       * @default iterate
       * @enum {string}
       */
      type: "iterate"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * IterateInvocationOutput
     * @description Used to connect iteration outputs. Will be expanded to a specific output.
     */
    IterateInvocationOutput: {
      /**
       * Collection Item
       * @description The item being iterated over
       */
      item?: unknown
      /**
       * Type
       * @default iterate_output
       * @enum {string}
       */
      type: "iterate_output"
    }
    /**
     * LaMa Infill
     * @description Infills transparent areas of an image using the LaMa model
     */
    LaMaInfillInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Image
       * @description The image to infill
       */
      image: components["schemas"]["ImageField"]
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Type
       * @default infill_lama
       * @enum {string}
       */
      type: "infill_lama"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * Latents Collection Primitive
     * @description A collection of latents tensor primitive values
     */
    LatentsCollectionInvocation: {
      /**
       * Collection
       * @description The collection of latents tensors
       */
      collection: components["schemas"]["LatentsField"][]
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Type
       * @default latents_collection
       * @enum {string}
       */
      type: "latents_collection"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * LatentsCollectionOutput
     * @description Base class for nodes that output a collection of latents tensors
     */
    LatentsCollectionOutput: {
      /**
       * Collection
       * @description Latents tensor
       */
      collection: components["schemas"]["LatentsField"][]
      /**
       * Type
       * @default latents_collection_output
       * @enum {string}
       */
      type: "latents_collection_output"
    }
    /**
     * LatentsField
     * @description A latents tensor primitive field
     */
    LatentsField: {
      /**
       * Latents Name
       * @description The name of the latents
       */
      latents_name: string
      /**
       * Seed
       * @description Seed used to generate this latents
       */
      seed?: number
    }
    /**
     * Latents Primitive
     * @description A latents tensor primitive value
     */
    LatentsInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Latents
       * @description The latents tensor
       */
      latents: components["schemas"]["LatentsField"]
      /**
       * Type
       * @default latents
       * @enum {string}
       */
      type: "latents"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * LatentsOutput
     * @description Base class for nodes that output a single latents tensor
     */
    LatentsOutput: {
      /**
       * Height
       * @description Height of output (px)
       */
      height: number
      /**
       * Latents
       * @description Latents tensor
       */
      latents: components["schemas"]["LatentsField"]
      /**
       * Type
       * @default latents_output
       * @enum {string}
       */
      type: "latents_output"
      /**
       * Width
       * @description Width of output (px)
       */
      width: number
    }
    /**
     * Latents to Image
     * @description Generates an image from latents.
     */
    LatentsToImageInvocation: {
      /**
       * Fp32
       * @description Whether or not to use full float32 precision
       * @default false
       */
      fp32?: boolean
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Latents
       * @description Latents tensor
       */
      latents: components["schemas"]["LatentsField"]
      /**
       * Metadata
       * @description Optional core metadata to be written to image
       */
      metadata?: components["schemas"]["CoreMetadata"]
      /**
       * Tiled
       * @description Processing using overlapping tiles (reduce memory consumption)
       * @default false
       */
      tiled?: boolean
      /**
       * Type
       * @default l2i
       * @enum {string}
       */
      type: "l2i"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Vae
       * @description VAE
       */
      vae: components["schemas"]["VaeField"]
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * Leres (Depth) Processor
     * @description Applies leres processing to image
     */
    LeresImageProcessorInvocation: {
      /**
       * Boost
       * @description Whether to use boost mode
       * @default false
       */
      boost?: boolean
      /**
       * Detect Resolution
       * @description Pixel resolution for detection
       * @default 512
       */
      detect_resolution?: number
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Image
       * @description The image to process
       */
      image: components["schemas"]["ImageField"]
      /**
       * Image Resolution
       * @description Pixel resolution for output image
       * @default 512
       */
      image_resolution?: number
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Thr A
       * @description Leres parameter `thr_a`
       * @default 0
       */
      thr_a?: number
      /**
       * Thr B
       * @description Leres parameter `thr_b`
       * @default 0
       */
      thr_b?: number
      /**
       * Type
       * @default leres_image_processor
       * @enum {string}
       */
      type: "leres_image_processor"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * Lineart Anime Processor
     * @description Applies line art anime processing to image
     */
    LineartAnimeImageProcessorInvocation: {
      /**
       * Detect Resolution
       * @description Pixel resolution for detection
       * @default 512
       */
      detect_resolution?: number
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Image
       * @description The image to process
       */
      image: components["schemas"]["ImageField"]
      /**
       * Image Resolution
       * @description Pixel resolution for output image
       * @default 512
       */
      image_resolution?: number
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Type
       * @default lineart_anime_image_processor
       * @enum {string}
       */
      type: "lineart_anime_image_processor"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * Lineart Processor
     * @description Applies line art processing to image
     */
    LineartImageProcessorInvocation: {
      /**
       * Coarse
       * @description Whether to use coarse mode
       * @default false
       */
      coarse?: boolean
      /**
       * Detect Resolution
       * @description Pixel resolution for detection
       * @default 512
       */
      detect_resolution?: number
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Image
       * @description The image to process
       */
      image: components["schemas"]["ImageField"]
      /**
       * Image Resolution
       * @description Pixel resolution for output image
       * @default 512
       */
      image_resolution?: number
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Type
       * @default lineart_image_processor
       * @enum {string}
       */
      type: "lineart_image_processor"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * LogLevel
     * @description An enumeration.
     * @enum {integer}
     */
    LogLevel: 0 | 10 | 20 | 30 | 40 | 50
    /** LoraInfo */
    LoraInfo: {
      /** @description Base model */
      base_model: components["schemas"]["BaseModelType"]
      /**
       * Model Name
       * @description Info to load submodel
       */
      model_name: string
      /** @description Info to load submodel */
      model_type: components["schemas"]["ModelType"]
      /** @description Info to load submodel */
      submodel?: components["schemas"]["SubModelType"]
      /**
       * Weight
       * @description Lora's weight which to use when apply to model
       */
      weight: number
    }
    /**
     * LoRA
     * @description Apply selected lora to unet and text_encoder.
     */
    LoraLoaderInvocation: {
      /**
       * CLIP
       * @description CLIP (tokenizer, text encoder, LoRAs) and skipped layer count
       */
      clip?: components["schemas"]["ClipField"]
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * LoRA
       * @description LoRA model to load
       */
      lora: components["schemas"]["LoRAModelField"]
      /**
       * Type
       * @default lora_loader
       * @enum {string}
       */
      type: "lora_loader"
      /**
       * UNet
       * @description UNet (scheduler, LoRAs)
       */
      unet?: components["schemas"]["UNetField"]
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Weight
       * @description The weight at which the LoRA is applied to each model
       * @default 0.75
       */
      weight?: number
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * LoraLoaderOutput
     * @description Model loader output
     */
    LoraLoaderOutput: {
      /**
       * CLIP
       * @description CLIP (tokenizer, text encoder, LoRAs) and skipped layer count
       */
      clip?: components["schemas"]["ClipField"]
      /**
       * Type
       * @default lora_loader_output
       * @enum {string}
       */
      type: "lora_loader_output"
      /**
       * UNet
       * @description UNet (scheduler, LoRAs)
       */
      unet?: components["schemas"]["UNetField"]
    }
    /**
     * LoRAMetadataField
     * @description LoRA metadata for an image generated in InvokeAI.
     */
    LoRAMetadataField: {
      /**
       * Lora
       * @description The LoRA model
       */
      lora: components["schemas"]["LoRAModelField"]
      /**
       * Weight
       * @description The weight of the LoRA model
       */
      weight: number
    }
    /** LoRAModelConfig */
    LoRAModelConfig: {
      base_model: components["schemas"]["BaseModelType"]
      /** Description */
      description?: string
      error?: components["schemas"]["ModelError"]
      model_format: components["schemas"]["LoRAModelFormat"]
      /** Model Name */
      model_name: string
      /**
       * Model Type
       * @enum {string}
       */
      model_type: "lora"
      /** Path */
      path: string
    }
    /**
     * LoRAModelField
     * @description LoRA model field
     */
    LoRAModelField: {
      /** @description Base model */
      base_model: components["schemas"]["BaseModelType"]
      /**
       * Model Name
       * @description Name of the LoRA model
       */
      model_name: string
    }
    /**
     * LoRAModelFormat
     * @description An enumeration.
     * @enum {string}
     */
    LoRAModelFormat: "diffusers" | "lycoris"
    /**
     * MainModelField
     * @description Main model field
     */
    MainModelField: {
      /** @description Base model */
      base_model: components["schemas"]["BaseModelType"]
      /**
       * Model Name
       * @description Name of the model
       */
      model_name: string
      /** @description Model Type */
      model_type: components["schemas"]["ModelType"]
    }
    /**
     * Main Model
     * @description Loads a main model, outputting its submodels.
     */
    MainModelLoaderInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Model
       * @description Main model (UNet, VAE, CLIP) to load
       */
      model: components["schemas"]["MainModelField"]
      /**
       * Type
       * @default main_model_loader
       * @enum {string}
       */
      type: "main_model_loader"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * Combine Masks
     * @description Combine two masks together by multiplying them using `PIL.ImageChops.multiply()`.
     */
    MaskCombineInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Mask1
       * @description The first mask to combine
       */
      mask1: components["schemas"]["ImageField"]
      /**
       * Mask2
       * @description The second image to combine
       */
      mask2: components["schemas"]["ImageField"]
      /**
       * Type
       * @default mask_combine
       * @enum {string}
       */
      type: "mask_combine"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * Mask Edge
     * @description Applies an edge mask to an image
     */
    MaskEdgeInvocation: {
      /**
       * Edge Blur
       * @description The amount of blur on the edge
       */
      edge_blur: number
      /**
       * Edge Size
       * @description The size of the edge
       */
      edge_size: number
      /**
       * High Threshold
       * @description Second threshold for the hysteresis procedure in Canny edge detection
       */
      high_threshold: number
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Image
       * @description The image to apply the mask to
       */
      image: components["schemas"]["ImageField"]
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Low Threshold
       * @description First threshold for the hysteresis procedure in Canny edge detection
       */
      low_threshold: number
      /**
       * Type
       * @default mask_edge
       * @enum {string}
       */
      type: "mask_edge"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * Mask from Alpha
     * @description Extracts the alpha channel of an image as a mask.
     */
    MaskFromAlphaInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Image
       * @description The image to create the mask from
       */
      image: components["schemas"]["ImageField"]
      /**
       * Invert
       * @description Whether or not to invert the mask
       * @default false
       */
      invert?: boolean
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Type
       * @default tomask
       * @enum {string}
       */
      type: "tomask"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * Mediapipe Face Processor
     * @description Applies mediapipe face processing to image
     */
    MediapipeFaceProcessorInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Image
       * @description The image to process
       */
      image: components["schemas"]["ImageField"]
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Max Faces
       * @description Maximum number of faces to detect
       * @default 1
       */
      max_faces?: number
      /**
       * Min Confidence
       * @description Minimum confidence for face detection
       * @default 0.5
       */
      min_confidence?: number
      /**
       * Type
       * @default mediapipe_face_processor
       * @enum {string}
       */
      type: "mediapipe_face_processor"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * MergeInterpolationMethod
     * @description An enumeration.
     * @enum {string}
     */
    MergeInterpolationMethod: "add_difference" | "inv_sigmoid" | "sigmoid" | "weighted_sum"
    /**
     * Metadata Accumulator
     * @description Outputs a Core Metadata Object
     */
    MetadataAccumulatorInvocation: {
      /**
       * Cfg Scale
       * @description The classifier-free guidance scale parameter
       */
      cfg_scale: number
      /**
       * Clip Skip
       * @description The number of skipped CLIP layers
       */
      clip_skip?: number
      /**
       * Controlnets
       * @description The ControlNets used for inference
       */
      controlnets: components["schemas"]["ControlField"][]
      /**
       * Generation Mode
       * @description The generation mode that output this image
       */
      generation_mode: string
      /**
       * Height
       * @description The height parameter
       */
      height: number
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Init Image
       * @description The name of the initial image
       */
      init_image?: string
      /**
       * Ipadapters
       * @description The IP Adapters used for inference
       */
      ipAdapters: components["schemas"]["IPAdapterMetadataField"][]
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Loras
       * @description The LoRAs used for inference
       */
      loras: components["schemas"]["LoRAMetadataField"][]
      /**
       * Model
       * @description The main model used for inference
       */
      model: components["schemas"]["MainModelField"]
      /**
       * Negative Prompt
       * @description The negative prompt parameter
       */
      negative_prompt: string
      /**
       * Negative Style Prompt
       * @description The negative style prompt parameter
       */
      negative_style_prompt?: string
      /**
       * Positive Prompt
       * @description The positive prompt parameter
       */
      positive_prompt: string
      /**
       * Positive Style Prompt
       * @description The positive style prompt parameter
       */
      positive_style_prompt?: string
      /**
       * Rand Device
       * @description The device used for random number generation
       */
      rand_device: string
      /**
       * Refiner Cfg Scale
       * @description The classifier-free guidance scale parameter used for the refiner
       */
      refiner_cfg_scale?: number
      /**
       * Refiner Model
       * @description The SDXL Refiner model used
       */
      refiner_model?: components["schemas"]["MainModelField"]
      /**
       * Refiner Negative Aesthetic Score
       * @description The aesthetic score used for the refiner
       */
      refiner_negative_aesthetic_score?: number
      /**
       * Refiner Positive Aesthetic Score
       * @description The aesthetic score used for the refiner
       */
      refiner_positive_aesthetic_score?: number
      /**
       * Refiner Scheduler
       * @description The scheduler used for the refiner
       */
      refiner_scheduler?: string
      /**
       * Refiner Start
       * @description The start value used for refiner denoising
       */
      refiner_start?: number
      /**
       * Refiner Steps
       * @description The number of steps used for the refiner
       */
      refiner_steps?: number
      /**
       * Scheduler
       * @description The scheduler used for inference
       */
      scheduler: string
      /**
       * Seed
       * @description The seed used for noise generation
       */
      seed: number
      /**
       * Steps
       * @description The number of steps used for inference
       */
      steps: number
      /**
       * Strength
       * @description The strength used for latents-to-latents
       */
      strength?: number
      /**
       * T2Iadapters
       * @description The IP Adapters used for inference
       */
      t2iAdapters: components["schemas"]["T2IAdapterField"][]
      /**
       * Type
       * @default metadata_accumulator
       * @enum {string}
       */
      type: "metadata_accumulator"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Vae
       * @description The VAE used for decoding, if the main model's default was not used
       */
      vae?: components["schemas"]["VAEModelField"]
      /**
       * Width
       * @description The width parameter
       */
      width: number
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * MetadataAccumulatorOutput
     * @description The output of the MetadataAccumulator node
     */
    MetadataAccumulatorOutput: {
      /**
       * Metadata
       * @description The core metadata for the image
       */
      metadata: components["schemas"]["CoreMetadata"]
      /**
       * Type
       * @default metadata_accumulator_output
       * @enum {string}
       */
      type: "metadata_accumulator_output"
    }
    /**
     * Midas Depth Processor
     * @description Applies Midas depth processing to image
     */
    MidasDepthImageProcessorInvocation: {
      /**
       * A Mult
       * @description Midas parameter `a_mult` (a = a_mult * PI)
       * @default 2
       */
      a_mult?: number
      /**
       * Bg Th
       * @description Midas parameter `bg_th`
       * @default 0.1
       */
      bg_th?: number
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Image
       * @description The image to process
       */
      image: components["schemas"]["ImageField"]
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Type
       * @default midas_depth_image_processor
       * @enum {string}
       */
      type: "midas_depth_image_processor"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * MLSD Processor
     * @description Applies MLSD processing to image
     */
    MlsdImageProcessorInvocation: {
      /**
       * Detect Resolution
       * @description Pixel resolution for detection
       * @default 512
       */
      detect_resolution?: number
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Image
       * @description The image to process
       */
      image: components["schemas"]["ImageField"]
      /**
       * Image Resolution
       * @description Pixel resolution for output image
       * @default 512
       */
      image_resolution?: number
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Thr D
       * @description MLSD parameter `thr_d`
       * @default 0.1
       */
      thr_d?: number
      /**
       * Thr V
       * @description MLSD parameter `thr_v`
       * @default 0.1
       */
      thr_v?: number
      /**
       * Type
       * @default mlsd_image_processor
       * @enum {string}
       */
      type: "mlsd_image_processor"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * ModelError
     * @description An enumeration.
     * @enum {string}
     */
    ModelError: "not_found"
    /** ModelInfo */
    ModelInfo: {
      /** @description Base model */
      base_model: components["schemas"]["BaseModelType"]
      /**
       * Model Name
       * @description Info to load submodel
       */
      model_name: string
      /** @description Info to load submodel */
      model_type: components["schemas"]["ModelType"]
      /** @description Info to load submodel */
      submodel?: components["schemas"]["SubModelType"]
    }
    /**
     * ModelLoaderOutput
     * @description Model loader output
     */
    ModelLoaderOutput: {
      /**
       * CLIP
       * @description CLIP (tokenizer, text encoder, LoRAs) and skipped layer count
       */
      clip: components["schemas"]["ClipField"]
      /**
       * Type
       * @default model_loader_output
       * @enum {string}
       */
      type: "model_loader_output"
      /**
       * UNet
       * @description UNet (scheduler, LoRAs)
       */
      unet: components["schemas"]["UNetField"]
      /**
       * VAE
       * @description VAE
       */
      vae: components["schemas"]["VaeField"]
    }
    /** ModelsList */
    ModelsList: {
      /** Models */
      models: (components["schemas"]["CLIPVisionModelDiffusersConfig"] | components["schemas"]["ControlNetModelCheckpointConfig"] | components["schemas"]["ControlNetModelDiffusersConfig"] | components["schemas"]["IPAdapterModelInvokeAIConfig"] | components["schemas"]["LoRAModelConfig"] | components["schemas"]["ONNXStableDiffusion1ModelConfig"] | components["schemas"]["ONNXStableDiffusion2ModelConfig"] | components["schemas"]["StableDiffusion1ModelCheckpointConfig"] | components["schemas"]["StableDiffusion1ModelDiffusersConfig"] | components["schemas"]["StableDiffusion2ModelCheckpointConfig"] | components["schemas"]["StableDiffusion2ModelDiffusersConfig"] | components["schemas"]["StableDiffusionXLModelCheckpointConfig"] | components["schemas"]["StableDiffusionXLModelDiffusersConfig"] | components["schemas"]["T2IAdapterModelDiffusersConfig"] | components["schemas"]["TextualInversionModelConfig"] | components["schemas"]["VaeModelConfig"])[]
    }
    /**
     * ModelType
     * @description An enumeration.
     * @enum {string}
     */
    ModelType: "clip_vision" | "controlnet" | "embedding" | "ip_adapter" | "lora" | "main" | "onnx" | "t2i_adapter" | "vae"
    /**
     * ModelVariantType
     * @description An enumeration.
     * @enum {string}
     */
    ModelVariantType: "depth" | "inpaint" | "normal"
    /**
     * Multiply Integers
     * @description Multiplies two numbers
     */
    MultiplyInvocation: {
      /**
       * A
       * @description The first number
       * @default 0
       */
      a?: number
      /**
       * B
       * @description The second number
       * @default 0
       */
      b?: number
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Type
       * @default mul
       * @enum {string}
       */
      type: "mul"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /** NodeFieldValue */
    NodeFieldValue: {
      /**
       * Field Name
       * @description The field into which this batch data item will be substituted.
       */
      field_name: string
      /**
       * Node Path
       * @description The node into which this batch data item will be substituted.
       */
      node_path: string
      /**
       * Value
       * @description The value to substitute into the node/field.
       */
      value: number | string
    }
    /**
     * Noise
     * @description Generates latent noise.
     */
    NoiseInvocation: {
      /**
       * Height
       * @description Height of output (px)
       * @default 512
       */
      height?: number
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Seed
       * @description Seed for random number generation
       */
      seed?: number
      /**
       * Type
       * @default noise
       * @enum {string}
       */
      type: "noise"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Use Cpu
       * @description Use CPU for noise generation (for reproducible results across platforms)
       * @default true
       */
      use_cpu?: boolean
      /**
       * Width
       * @description Width of output (px)
       * @default 512
       */
      width?: number
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * NoiseOutput
     * @description Invocation noise output
     */
    NoiseOutput: {
      /**
       * Height
       * @description Height of output (px)
       */
      height: number
      /**
       * Noise
       * @description Noise tensor
       */
      noise?: components["schemas"]["LatentsField"]
      /**
       * Type
       * @default noise_output
       * @enum {string}
       */
      type: "noise_output"
      /**
       * Width
       * @description Width of output (px)
       */
      width: number
    }
    /**
     * Normal BAE Processor
     * @description Applies NormalBae processing to image
     */
    NormalbaeImageProcessorInvocation: {
      /**
       * Detect Resolution
       * @description Pixel resolution for detection
       * @default 512
       */
      detect_resolution?: number
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Image
       * @description The image to process
       */
      image: components["schemas"]["ImageField"]
      /**
       * Image Resolution
       * @description Pixel resolution for output image
       * @default 512
       */
      image_resolution?: number
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Type
       * @default normalbae_image_processor
       * @enum {string}
       */
      type: "normalbae_image_processor"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * OffsetPaginatedResults[BoardDTO]
     * @description Offset-paginated results
     * Generic must be a Pydantic model
     */
    OffsetPaginatedResults_BoardDTO_: {
      /**
       * Items
       * @description Items
       */
      items: components["schemas"]["BoardDTO"][]
      /**
       * Limit
       * @description Limit of items to get
       */
      limit: number
      /**
       * Offset
       * @description Offset from which to retrieve items
       */
      offset: number
      /**
       * Total
       * @description Total number of items in result
       */
      total: number
    }
    /**
     * OffsetPaginatedResults[ImageDTO]
     * @description Offset-paginated results
     * Generic must be a Pydantic model
     */
    OffsetPaginatedResults_ImageDTO_: {
      /**
       * Items
       * @description Items
       */
      items: components["schemas"]["ImageDTO"][]
      /**
       * Limit
       * @description Limit of items to get
       */
      limit: number
      /**
       * Offset
       * @description Offset from which to retrieve items
       */
      offset: number
      /**
       * Total
       * @description Total number of items in result
       */
      total: number
    }
    /**
     * ONNX Latents to Image
     * @description Generates an image from latents.
     */
    ONNXLatentsToImageInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Latents
       * @description Denoised latents tensor
       */
      latents: components["schemas"]["LatentsField"]
      /**
       * Metadata
       * @description Optional core metadata to be written to image
       */
      metadata?: components["schemas"]["CoreMetadata"]
      /**
       * Type
       * @default l2i_onnx
       * @enum {string}
       */
      type: "l2i_onnx"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Vae
       * @description VAE
       */
      vae: components["schemas"]["VaeField"]
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * OnnxModelField
     * @description Onnx model field
     */
    OnnxModelField: {
      /** @description Base model */
      base_model: components["schemas"]["BaseModelType"]
      /**
       * Model Name
       * @description Name of the model
       */
      model_name: string
      /** @description Model Type */
      model_type: components["schemas"]["ModelType"]
    }
    /**
     * ONNX Main Model
     * @description Loads a main model, outputting its submodels.
     */
    OnnxModelLoaderInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Model
       * @description ONNX Main model (UNet, VAE, CLIP) to load
       */
      model: components["schemas"]["OnnxModelField"]
      /**
       * Type
       * @default onnx_model_loader
       * @enum {string}
       */
      type: "onnx_model_loader"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * ONNXModelLoaderOutput
     * @description Model loader output
     */
    ONNXModelLoaderOutput: {
      /**
       * CLIP
       * @description CLIP (tokenizer, text encoder, LoRAs) and skipped layer count
       */
      clip?: components["schemas"]["ClipField"]
      /**
       * Type
       * @default model_loader_output_onnx
       * @enum {string}
       */
      type: "model_loader_output_onnx"
      /**
       * UNet
       * @description UNet (scheduler, LoRAs)
       */
      unet?: components["schemas"]["UNetField"]
      /**
       * VAE Decoder
       * @description VAE
       */
      vae_decoder?: components["schemas"]["VaeField"]
      /**
       * VAE Encoder
       * @description VAE
       */
      vae_encoder?: components["schemas"]["VaeField"]
    }
    /**
     * ONNX Prompt (Raw)
     * @description A node to process inputs and produce outputs.
     * May use dependency injection in __init__ to receive providers.
     *
     * All invocations must use the `@invocation` decorator to provide their unique type.
     */
    ONNXPromptInvocation: {
      /**
       * Clip
       * @description CLIP (tokenizer, text encoder, LoRAs) and skipped layer count
       */
      clip: components["schemas"]["ClipField"]
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Prompt
       * @description Raw prompt text (no parsing)
       * @default
       */
      prompt?: string
      /**
       * Type
       * @default prompt_onnx
       * @enum {string}
       */
      type: "prompt_onnx"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /** ONNXStableDiffusion1ModelConfig */
    ONNXStableDiffusion1ModelConfig: {
      base_model: components["schemas"]["BaseModelType"]
      /** Description */
      description?: string
      error?: components["schemas"]["ModelError"]
      /**
       * Model Format
       * @enum {string}
       */
      model_format: "onnx"
      /** Model Name */
      model_name: string
      /**
       * Model Type
       * @enum {string}
       */
      model_type: "onnx"
      /** Path */
      path: string
      variant: components["schemas"]["ModelVariantType"]
    }
    /** ONNXStableDiffusion2ModelConfig */
    ONNXStableDiffusion2ModelConfig: {
      base_model: components["schemas"]["BaseModelType"]
      /** Description */
      description?: string
      error?: components["schemas"]["ModelError"]
      /**
       * Model Format
       * @enum {string}
       */
      model_format: "onnx"
      /** Model Name */
      model_name: string
      /**
       * Model Type
       * @enum {string}
       */
      model_type: "onnx"
      /** Path */
      path: string
      prediction_type: components["schemas"]["SchedulerPredictionType"]
      /** Upcast Attention */
      upcast_attention: boolean
      variant: components["schemas"]["ModelVariantType"]
    }
    /**
     * ONNX Text to Latents
     * @description Generates latents from conditionings.
     */
    ONNXTextToLatentsInvocation: {
      /**
       * Cfg Scale
       * @description Classifier-Free Guidance scale
       * @default 7.5
       */
      cfg_scale?: number | number[]
      /**
       * Control
       * @description ControlNet(s) to apply
       */
      control?: components["schemas"]["ControlField"] | components["schemas"]["ControlField"][]
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Negative Conditioning
       * @description Negative conditioning tensor
       */
      negative_conditioning: components["schemas"]["ConditioningField"]
      /**
       * Noise
       * @description Noise tensor
       */
      noise: components["schemas"]["LatentsField"]
      /**
       * Positive Conditioning
       * @description Positive conditioning tensor
       */
      positive_conditioning: components["schemas"]["ConditioningField"]
      /**
       * Precision
       * @description Precision to use
       * @default tensor(float16)
       * @enum {string}
       */
      precision?: "tensor(bool)" | "tensor(double)" | "tensor(float)" | "tensor(float16)" | "tensor(int8)" | "tensor(int16)" | "tensor(int32)" | "tensor(int64)" | "tensor(uint8)" | "tensor(uint16)" | "tensor(uint32)" | "tensor(uint64)"
      /**
       * Scheduler
       * @description Scheduler to use during inference
       * @default euler
       * @enum {string}
       */
      scheduler?: "ddim" | "ddpm" | "deis" | "dpmpp_2m" | "dpmpp_2m_k" | "dpmpp_2m_sde" | "dpmpp_2m_sde_k" | "dpmpp_2s" | "dpmpp_2s_k" | "dpmpp_sde" | "dpmpp_sde_k" | "euler" | "euler_a" | "euler_k" | "heun" | "heun_k" | "kdpm_2" | "kdpm_2_a" | "lms" | "lms_k" | "pndm" | "unipc"
      /**
       * Steps
       * @description Number of steps to run
       * @default 10
       */
      steps?: number
      /**
       * Type
       * @default t2l_onnx
       * @enum {string}
       */
      type: "t2l_onnx"
      /**
       * Unet
       * @description UNet (scheduler, LoRAs)
       */
      unet: components["schemas"]["UNetField"]
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * Openpose Processor
     * @description Applies Openpose processing to image
     */
    OpenposeImageProcessorInvocation: {
      /**
       * Detect Resolution
       * @description Pixel resolution for detection
       * @default 512
       */
      detect_resolution?: number
      /**
       * Hand And Face
       * @description Whether to use hands and face mode
       * @default false
       */
      hand_and_face?: boolean
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Image
       * @description The image to process
       */
      image: components["schemas"]["ImageField"]
      /**
       * Image Resolution
       * @description Pixel resolution for output image
       * @default 512
       */
      image_resolution?: number
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Type
       * @default openpose_image_processor
       * @enum {string}
       */
      type: "openpose_image_processor"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * PaginatedResults[GraphExecutionState]
     * @description Paginated results
     * Generic must be a Pydantic model
     */
    PaginatedResults_GraphExecutionState_: {
      /**
       * Items
       * @description Items
       */
      items: components["schemas"]["GraphExecutionState"][]
      /**
       * Page
       * @description Current Page
       */
      page: number
      /**
       * Pages
       * @description Total number of pages
       */
      pages: number
      /**
       * Per Page
       * @description Number of items per page
       */
      per_page: number
      /**
       * Total
       * @description Total number of items in result
       */
      total: number
    }
    /**
     * PIDI Processor
     * @description Applies PIDI processing to image
     */
    PidiImageProcessorInvocation: {
      /**
       * Detect Resolution
       * @description Pixel resolution for detection
       * @default 512
       */
      detect_resolution?: number
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Image
       * @description The image to process
       */
      image: components["schemas"]["ImageField"]
      /**
       * Image Resolution
       * @description Pixel resolution for output image
       * @default 512
       */
      image_resolution?: number
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Safe
       * @description Whether or not to use safe mode
       * @default false
       */
      safe?: boolean
      /**
       * Scribble
       * @description Whether or not to use scribble mode
       * @default false
       */
      scribble?: boolean
      /**
       * Type
       * @default pidi_image_processor
       * @enum {string}
       */
      type: "pidi_image_processor"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * Prompts from File
     * @description Loads prompts from a text file
     */
    PromptsFromFileInvocation: {
      /**
       * File Path
       * @description Path to prompt text file
       */
      file_path: string
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Max Prompts
       * @description Max lines to read from file (0=all)
       * @default 1
       */
      max_prompts?: number
      /**
       * Post Prompt
       * @description String to append to each prompt
       */
      post_prompt?: string
      /**
       * Pre Prompt
       * @description String to prepend to each prompt
       */
      pre_prompt?: string
      /**
       * Start Line
       * @description Line in the file to start start from
       * @default 1
       */
      start_line?: number
      /**
       * Type
       * @default prompt_from_file
       * @enum {string}
       */
      type: "prompt_from_file"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * Prompts To File
     * @description Save prompts to a text file
     */
    PromptsToFileInvocation: {
      /**
       * Append
       * @description Append or overwrite file
       * @default true
       */
      append?: boolean
      /**
       * File Path
       * @description Path to prompt text file
       */
      file_path: string
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Prompts
       * @description Prompt or collection of prompts to write
       */
      prompts: string | string[]
      /**
       * Type
       * @default prompt_to_file
       * @enum {string}
       */
      type: "prompt_to_file"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * PromptsToFileInvocationOutput
     * @description Base class for invocation that writes to a file and returns nothing of use
     */
    PromptsToFileInvocationOutput: {
      /**
       * Type
       * @default prompt_to_file_output
       * @enum {string}
       */
      type: "prompt_to_file_output"
    }
    /**
     * Prompt Strength
     * @description Takes a prompt string and float strength and outputs a new string in the format of (prompt)strength
     */
    PromptStrengthInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Prompt
       * @description Prompt to work on
       * @default
       */
      prompt?: string
      /**
       * Strength
       * @description strength of the prompt
       * @default 1
       */
      strength?: number
      /**
       * Type
       * @default prompt_strength
       * @enum {string}
       */
      type: "prompt_strength"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * Prompt Strengths Combine
     * @description Takes a collection of prompt strength strings and converts it into a combined .and() or .blend() structure. Blank prompts are ignored
     */
    PromptStrengthsCombineInvocation: {
      /**
       * Combine Type
       * @description Combine type .and() or .blend()
       * @default .and
       * @enum {string}
       */
      combine_type?: ".and" | ".blend"
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Prompt Strengths
       * @description Prompt strengths to combine
       * @default [
       *   ""
       * ]
       */
      prompt_strengths?: string[]
      /**
       * Type
       * @default prompt_strengths_combine
       * @enum {string}
       */
      type: "prompt_strengths_combine"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * PruneResult
     * @description Result of pruning the session queue
     */
    PruneResult: {
      /**
       * Deleted
       * @description Number of queue items deleted
       */
      deleted: number
    }
    /**
     * PTFields Collect
     * @description Collect Prompt Tools Fields for an image generated in InvokeAI.
     */
    PTFieldsCollectInvocation: {
      /**
       * Cfg Scale
       * @description Classifier-Free Guidance scale
       */
      cfg_scale?: number
      /**
       * Denoising End
       * @description When to stop denoising, expressed a percentage of total steps
       */
      denoising_end?: number
      /**
       * Denoising Start
       * @description When to start denoising, expressed a percentage of total steps
       */
      denoising_start?: number
      /**
       * Height
       * @description Height of output (px)
       */
      height?: number
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Negative Prompt
       * @description The negative prompt parameter
       */
      negative_prompt?: string
      /**
       * Negative Style Prompt
       * @description The negative prompt parameter
       */
      negative_style_prompt?: string
      /**
       * Positive Prompt
       * @description The positive prompt parameter
       */
      positive_prompt?: string
      /**
       * Positive Style Prompt
       * @description The positive style prompt parameter
       */
      positive_style_prompt?: string
      /**
       * Scheduler
       * @description Scheduler to use during inference
       * @enum {string}
       */
      scheduler?: "ddim" | "ddpm" | "deis" | "dpmpp_2m" | "dpmpp_2m_k" | "dpmpp_2m_sde" | "dpmpp_2m_sde_k" | "dpmpp_2s" | "dpmpp_2s_k" | "dpmpp_sde" | "dpmpp_sde_k" | "euler" | "euler_a" | "euler_k" | "heun" | "heun_k" | "kdpm_2" | "kdpm_2_a" | "lms" | "lms_k" | "pndm" | "unipc"
      /**
       * Seed
       * @description Seed for random number generation
       */
      seed?: number
      /**
       * Steps
       * @description Number of steps to run
       */
      steps?: number
      /**
       * Type
       * @default pt_fields_collect
       * @enum {string}
       */
      type: "pt_fields_collect"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Width
       * @description Width of output (px)
       */
      width?: number
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * PTFieldsCollectOutput
     * @description PTFieldsCollect Output
     */
    PTFieldsCollectOutput: {
      /**
       * Pt Fields
       * @description PTFields in Json Format
       */
      pt_fields: string
      /**
       * Type
       * @default pt_fields_collect_output
       * @enum {string}
       */
      type: "pt_fields_collect_output"
    }
    /**
     * PTFields Expand
     * @description Save Expand PTFields into individual items
     */
    PTFieldsExpandInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Pt Fields
       * @description PTFields in json Format
       */
      pt_fields?: string
      /**
       * Type
       * @default pt_fields_expand
       * @enum {string}
       */
      type: "pt_fields_expand"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * PTFieldsExpandOutput
     * @description Expand Prompt Tools Fields for an image generated in InvokeAI.
     */
    PTFieldsExpandOutput: {
      /**
       * Cfg Scale
       * @description Classifier-Free Guidance scale
       */
      cfg_scale: number
      /**
       * Denoising End
       * @description When to stop denoising, expressed a percentage of total steps
       */
      denoising_end: number
      /**
       * Denoising Start
       * @description When to start denoising, expressed a percentage of total steps
       */
      denoising_start: number
      /**
       * Height
       * @description Height of output (px)
       */
      height: number
      /**
       * Negative Prompt
       * @description The negative prompt
       */
      negative_prompt: string
      /**
       * Negative Style Prompt
       * @description The negative prompt
       */
      negative_style_prompt: string
      /**
       * Positive Prompt
       * @description The positive prompt
       */
      positive_prompt: string
      /**
       * Positive Style Prompt
       * @description The positive style prompt
       */
      positive_style_prompt: string
      /**
       * Scheduler
       * @description Scheduler to use during inference
       * @enum {string}
       */
      scheduler: "ddim" | "ddpm" | "deis" | "dpmpp_2m" | "dpmpp_2m_k" | "dpmpp_2m_sde" | "dpmpp_2m_sde_k" | "dpmpp_2s" | "dpmpp_2s_k" | "dpmpp_sde" | "dpmpp_sde_k" | "euler" | "euler_a" | "euler_k" | "heun" | "heun_k" | "kdpm_2" | "kdpm_2_a" | "lms" | "lms_k" | "pndm" | "unipc"
      /**
       * Seed
       * @description Seed for random number generation
       */
      seed: number
      /**
       * Steps
       * @description Number of steps to run
       */
      steps: number
      /**
       * Type
       * @default pt_fields_expand_output
       * @enum {string}
       */
      type: "pt_fields_expand_output"
      /**
       * Width
       * @description Width of output (px)
       */
      width: number
    }
    /**
     * Random Float
     * @description Outputs a single random float
     */
    RandomFloatInvocation: {
      /**
       * Decimals
       * @description The number of decimal places to round to
       * @default 2
       */
      decimals?: number
      /**
       * High
       * @description The exclusive high value
       * @default 1
       */
      high?: number
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Low
       * @description The inclusive low value
       * @default 0
       */
      low?: number
      /**
       * Type
       * @default rand_float
       * @enum {string}
       */
      type: "rand_float"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * Random Integer
     * @description Outputs a single random integer.
     */
    RandomIntInvocation: {
      /**
       * High
       * @description The exclusive high value
       * @default 2147483647
       */
      high?: number
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Low
       * @description The inclusive low value
       * @default 0
       */
      low?: number
      /**
       * Type
       * @default rand_int
       * @enum {string}
       */
      type: "rand_int"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default false
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * Random Range
     * @description Creates a collection of random numbers
     */
    RandomRangeInvocation: {
      /**
       * High
       * @description The exclusive high value
       * @default 2147483647
       */
      high?: number
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Low
       * @description The inclusive low value
       * @default 0
       */
      low?: number
      /**
       * Seed
       * @description The seed for the RNG (omit for random)
       */
      seed?: number
      /**
       * Size
       * @description The number of values to generate
       * @default 1
       */
      size?: number
      /**
       * Type
       * @default random_range
       * @enum {string}
       */
      type: "random_range"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default false
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * Integer Range
     * @description Creates a range of numbers from start to stop with step
     */
    RangeInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Start
       * @description The start of the range
       * @default 0
       */
      start?: number
      /**
       * Step
       * @description The step of the range
       * @default 1
       */
      step?: number
      /**
       * Stop
       * @description The stop of the range
       * @default 10
       */
      stop?: number
      /**
       * Type
       * @default range
       * @enum {string}
       */
      type: "range"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * Integer Range of Size
     * @description Creates a range from start to start + (size * step) incremented by step
     */
    RangeOfSizeInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Size
       * @description The number of values
       * @default 1
       */
      size?: number
      /**
       * Start
       * @description The start of the range
       * @default 0
       */
      start?: number
      /**
       * Step
       * @description The step of the range
       * @default 1
       */
      step?: number
      /**
       * Type
       * @default range_of_size
       * @enum {string}
       */
      type: "range_of_size"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /** RemoveImagesFromBoardResult */
    RemoveImagesFromBoardResult: {
      /**
       * Removed Image Names
       * @description The image names that were removed from their board
       */
      removed_image_names: string[]
    }
    /**
     * Resize Latents
     * @description Resizes latents to explicit width/height (in pixels). Provided dimensions are floor-divided by 8.
     */
    ResizeLatentsInvocation: {
      /**
       * Antialias
       * @description Whether or not to apply antialiasing (bilinear or bicubic only)
       * @default false
       */
      antialias?: boolean
      /**
       * Height
       * @description Width of output (px)
       */
      height: number
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Latents
       * @description Latents tensor
       */
      latents: components["schemas"]["LatentsField"]
      /**
       * Mode
       * @description Interpolation mode
       * @default bilinear
       * @enum {string}
       */
      mode?: "area" | "bicubic" | "bilinear" | "linear" | "nearest" | "nearest-exact" | "trilinear"
      /**
       * Type
       * @default lresize
       * @enum {string}
       */
      type: "lresize"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Width
       * @description Width of output (px)
       */
      width: number
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * ResourceOrigin
     * @description The origin of a resource (eg image).
     *
     * - INTERNAL: The resource was created by the application.
     * - EXTERNAL: The resource was not created by the application.
     * This may be a user-initiated upload, or an internal application upload (eg Canvas init image).
     * @enum {string}
     */
    ResourceOrigin: "external" | "internal"
    /**
     * Round Float
     * @description Rounds a float to a specified number of decimal places.
     */
    RoundInvocation: {
      /**
       * Decimals
       * @description The number of decimal places
       * @default 0
       */
      decimals?: number
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Type
       * @default round_float
       * @enum {string}
       */
      type: "round_float"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Value
       * @description The float value
       * @default 0
       */
      value?: number
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * Save Image
     * @description Saves an image. Unlike an image primitive, this invocation stores a copy of the image.
     */
    SaveImageInvocation: {
      /**
       * Board
       * @description The board to save the image to
       */
      board?: components["schemas"]["BoardField"]
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Image
       * @description The image to process
       */
      image: components["schemas"]["ImageField"]
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Metadata
       * @description Optional core metadata to be written to image
       */
      metadata?: components["schemas"]["CoreMetadata"]
      /**
       * Type
       * @default save_image
       * @enum {string}
       */
      type: "save_image"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default false
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * Scale Latents
     * @description Scales latents by a given factor.
     */
    ScaleLatentsInvocation: {
      /**
       * Antialias
       * @description Whether or not to apply antialiasing (bilinear or bicubic only)
       * @default false
       */
      antialias?: boolean
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Latents
       * @description Latents tensor
       */
      latents: components["schemas"]["LatentsField"]
      /**
       * Mode
       * @description Interpolation mode
       * @default bilinear
       * @enum {string}
       */
      mode?: "area" | "bicubic" | "bilinear" | "linear" | "nearest" | "nearest-exact" | "trilinear"
      /**
       * Scale Factor
       * @description The factor by which to scale
       */
      scale_factor: number
      /**
       * Type
       * @default lscale
       * @enum {string}
       */
      type: "lscale"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * Scheduler
     * @description Selects a scheduler.
     */
    SchedulerInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Scheduler
       * @description Scheduler to use during inference
       * @default euler
       * @enum {string}
       */
      scheduler?: "ddim" | "ddpm" | "deis" | "dpmpp_2m" | "dpmpp_2m_k" | "dpmpp_2m_sde" | "dpmpp_2m_sde_k" | "dpmpp_2s" | "dpmpp_2s_k" | "dpmpp_sde" | "dpmpp_sde_k" | "euler" | "euler_a" | "euler_k" | "heun" | "heun_k" | "kdpm_2" | "kdpm_2_a" | "lms" | "lms_k" | "pndm" | "unipc"
      /**
       * Type
       * @default scheduler
       * @enum {string}
       */
      type: "scheduler"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * SchedulerOutput
     * @description Base class for all invocation outputs.
     *
     * All invocation outputs must use the `@invocation_output` decorator to provide their unique type.
     */
    SchedulerOutput: {
      /**
       * Scheduler
       * @description Scheduler to use during inference
       * @enum {string}
       */
      scheduler: "ddim" | "ddpm" | "deis" | "dpmpp_2m" | "dpmpp_2m_k" | "dpmpp_2m_sde" | "dpmpp_2m_sde_k" | "dpmpp_2s" | "dpmpp_2s_k" | "dpmpp_sde" | "dpmpp_sde_k" | "euler" | "euler_a" | "euler_k" | "heun" | "heun_k" | "kdpm_2" | "kdpm_2_a" | "lms" | "lms_k" | "pndm" | "unipc"
      /**
       * Type
       * @default scheduler_output
       * @enum {string}
       */
      type: "scheduler_output"
    }
    /**
     * SchedulerPredictionType
     * @description An enumeration.
     * @enum {string}
     */
    SchedulerPredictionType: "epsilon" | "sample" | "v_prediction"
    /**
     * SDXL Prompt
     * @description Parse prompt using compel package to conditioning.
     */
    SDXLCompelPromptInvocation: {
      /**
       * CLIP 1
       * @description CLIP (tokenizer, text encoder, LoRAs) and skipped layer count
       */
      clip: components["schemas"]["ClipField"]
      /**
       * CLIP 2
       * @description CLIP (tokenizer, text encoder, LoRAs) and skipped layer count
       */
      clip2: components["schemas"]["ClipField"]
      /**
       * Crop Left
       * @default 0
       */
      crop_left?: number
      /**
       * Crop Top
       * @default 0
       */
      crop_top?: number
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Original Height
       * @default 1024
       */
      original_height?: number
      /**
       * Original Width
       * @default 1024
       */
      original_width?: number
      /**
       * Prompt
       * @description Prompt to be parsed by Compel to create a conditioning tensor
       * @default
       */
      prompt?: string
      /**
       * Style
       * @description Prompt to be parsed by Compel to create a conditioning tensor
       * @default
       */
      style?: string
      /**
       * Target Height
       * @default 1024
       */
      target_height?: number
      /**
       * Target Width
       * @default 1024
       */
      target_width?: number
      /**
       * Type
       * @default sdxl_compel_prompt
       * @enum {string}
       */
      type: "sdxl_compel_prompt"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * SDXL LoRA
     * @description Apply selected lora to unet and text_encoder.
     */
    SDXLLoraLoaderInvocation: {
      /**
       * CLIP 1
       * @description CLIP (tokenizer, text encoder, LoRAs) and skipped layer count
       */
      clip?: components["schemas"]["ClipField"]
      /**
       * CLIP 2
       * @description CLIP (tokenizer, text encoder, LoRAs) and skipped layer count
       */
      clip2?: components["schemas"]["ClipField"]
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * LoRA
       * @description LoRA model to load
       */
      lora: components["schemas"]["LoRAModelField"]
      /**
       * Type
       * @default sdxl_lora_loader
       * @enum {string}
       */
      type: "sdxl_lora_loader"
      /**
       * UNet
       * @description UNet (scheduler, LoRAs)
       */
      unet?: components["schemas"]["UNetField"]
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Weight
       * @description The weight at which the LoRA is applied to each model
       * @default 0.75
       */
      weight?: number
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * SDXLLoraLoaderOutput
     * @description SDXL LoRA Loader Output
     */
    SDXLLoraLoaderOutput: {
      /**
       * CLIP 1
       * @description CLIP (tokenizer, text encoder, LoRAs) and skipped layer count
       */
      clip?: components["schemas"]["ClipField"]
      /**
       * CLIP 2
       * @description CLIP (tokenizer, text encoder, LoRAs) and skipped layer count
       */
      clip2?: components["schemas"]["ClipField"]
      /**
       * Type
       * @default sdxl_lora_loader_output
       * @enum {string}
       */
      type: "sdxl_lora_loader_output"
      /**
       * UNet
       * @description UNet (scheduler, LoRAs)
       */
      unet?: components["schemas"]["UNetField"]
    }
    /**
     * SDXL Main Model
     * @description Loads an sdxl base model, outputting its submodels.
     */
    SDXLModelLoaderInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Model
       * @description SDXL Main model (UNet, VAE, CLIP1, CLIP2) to load
       */
      model: components["schemas"]["MainModelField"]
      /**
       * Type
       * @default sdxl_model_loader
       * @enum {string}
       */
      type: "sdxl_model_loader"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * SDXLModelLoaderOutput
     * @description SDXL base model loader output
     */
    SDXLModelLoaderOutput: {
      /**
       * CLIP 1
       * @description CLIP (tokenizer, text encoder, LoRAs) and skipped layer count
       */
      clip: components["schemas"]["ClipField"]
      /**
       * CLIP 2
       * @description CLIP (tokenizer, text encoder, LoRAs) and skipped layer count
       */
      clip2: components["schemas"]["ClipField"]
      /**
       * Type
       * @default sdxl_model_loader_output
       * @enum {string}
       */
      type: "sdxl_model_loader_output"
      /**
       * UNet
       * @description UNet (scheduler, LoRAs)
       */
      unet: components["schemas"]["UNetField"]
      /**
       * VAE
       * @description VAE
       */
      vae: components["schemas"]["VaeField"]
    }
    /**
     * SDXL Refiner Prompt
     * @description Parse prompt using compel package to conditioning.
     */
    SDXLRefinerCompelPromptInvocation: {
      /**
       * Aesthetic Score
       * @description The aesthetic score to apply to the conditioning tensor
       * @default 6
       */
      aesthetic_score?: number
      /**
       * Clip2
       * @description CLIP (tokenizer, text encoder, LoRAs) and skipped layer count
       */
      clip2: components["schemas"]["ClipField"]
      /**
       * Crop Left
       * @default 0
       */
      crop_left?: number
      /**
       * Crop Top
       * @default 0
       */
      crop_top?: number
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Original Height
       * @default 1024
       */
      original_height?: number
      /**
       * Original Width
       * @default 1024
       */
      original_width?: number
      /**
       * Style
       * @description Prompt to be parsed by Compel to create a conditioning tensor
       * @default
       */
      style?: string
      /**
       * Type
       * @default sdxl_refiner_compel_prompt
       * @enum {string}
       */
      type: "sdxl_refiner_compel_prompt"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * SDXL Refiner Model
     * @description Loads an sdxl refiner model, outputting its submodels.
     */
    SDXLRefinerModelLoaderInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Model
       * @description SDXL Refiner Main Modde (UNet, VAE, CLIP2) to load
       */
      model: components["schemas"]["MainModelField"]
      /**
       * Type
       * @default sdxl_refiner_model_loader
       * @enum {string}
       */
      type: "sdxl_refiner_model_loader"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * SDXLRefinerModelLoaderOutput
     * @description SDXL refiner model loader output
     */
    SDXLRefinerModelLoaderOutput: {
      /**
       * CLIP 2
       * @description CLIP (tokenizer, text encoder, LoRAs) and skipped layer count
       */
      clip2: components["schemas"]["ClipField"]
      /**
       * Type
       * @default sdxl_refiner_model_loader_output
       * @enum {string}
       */
      type: "sdxl_refiner_model_loader_output"
      /**
       * UNet
       * @description UNet (scheduler, LoRAs)
       */
      unet: components["schemas"]["UNetField"]
      /**
       * VAE
       * @description VAE
       */
      vae: components["schemas"]["VaeField"]
    }
    /**
     * Seamless
     * @description Applies the seamless transformation to the Model UNet and VAE.
     */
    SeamlessModeInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Seamless X
       * @description Specify whether X axis is seamless
       * @default true
       */
      seamless_x?: boolean
      /**
       * Seamless Y
       * @description Specify whether Y axis is seamless
       * @default true
       */
      seamless_y?: boolean
      /**
       * Type
       * @default seamless
       * @enum {string}
       */
      type: "seamless"
      /**
       * UNet
       * @description UNet (scheduler, LoRAs)
       */
      unet?: components["schemas"]["UNetField"]
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * VAE
       * @description VAE model to load
       */
      vae?: components["schemas"]["VaeField"]
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * SeamlessModeOutput
     * @description Modified Seamless Model output
     */
    SeamlessModeOutput: {
      /**
       * Type
       * @default seamless_output
       * @enum {string}
       */
      type: "seamless_output"
      /**
       * UNet
       * @description UNet (scheduler, LoRAs)
       */
      unet?: components["schemas"]["UNetField"]
      /**
       * VAE
       * @description VAE
       */
      vae?: components["schemas"]["VaeField"]
    }
    /**
     * Segment Anything Processor
     * @description Applies segment anything processing to image
     */
    SegmentAnythingProcessorInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Image
       * @description The image to process
       */
      image: components["schemas"]["ImageField"]
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Type
       * @default segment_anything_processor
       * @enum {string}
       */
      type: "segment_anything_processor"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /** SessionProcessorStatus */
    SessionProcessorStatus: {
      /**
       * Is Processing
       * @description Whether a session is being processed
       */
      is_processing: boolean
      /**
       * Is Started
       * @description Whether the session processor is started
       */
      is_started: boolean
    }
    /**
     * SessionQueueAndProcessorStatus
     * @description The overall status of session queue and processor
     */
    SessionQueueAndProcessorStatus: {
      processor: components["schemas"]["SessionProcessorStatus"]
      queue: components["schemas"]["SessionQueueStatus"]
    }
    /**
     * SessionQueueItem
     * @description Session queue item without the full graph. Used for serialization.
     */
    SessionQueueItem: {
      /**
       * Batch Id
       * @description The ID of the batch associated with this queue item
       */
      batch_id: string
      /**
       * Completed At
       * @description When this queue item was completed
       */
      completed_at?: string
      /**
       * Created At
       * @description When this queue item was created
       */
      created_at: string
      /**
       * Error
       * @description The error message if this queue item errored
       */
      error?: string
      /**
       * Field Values
       * @description The field values that were used for this queue item
       */
      field_values?: components["schemas"]["NodeFieldValue"][]
      /**
       * Item Id
       * @description The identifier of the session queue item
       */
      item_id: number
      /**
       * Priority
       * @description The priority of this queue item
       * @default 0
       */
      priority: number
      /**
       * Queue Id
       * @description The id of the queue with which this item is associated
       */
      queue_id: string
      /**
       * Session
       * @description The fully-populated session to be executed
       */
      session: components["schemas"]["GraphExecutionState"]
      /**
       * Session Id
       * @description The ID of the session associated with this queue item. The session doesn't exist in graph_executions until the queue item is executed.
       */
      session_id: string
      /**
       * Started At
       * @description When this queue item was started
       */
      started_at?: string
      /**
       * Status
       * @description The status of this queue item
       * @default pending
       * @enum {string}
       */
      status: "canceled" | "completed" | "failed" | "in_progress" | "pending"
      /**
       * Updated At
       * @description When this queue item was updated
       */
      updated_at: string
    }
    /**
     * SessionQueueItemDTO
     * @description Session queue item without the full graph. Used for serialization.
     */
    SessionQueueItemDTO: {
      /**
       * Batch Id
       * @description The ID of the batch associated with this queue item
       */
      batch_id: string
      /**
       * Completed At
       * @description When this queue item was completed
       */
      completed_at?: string
      /**
       * Created At
       * @description When this queue item was created
       */
      created_at: string
      /**
       * Error
       * @description The error message if this queue item errored
       */
      error?: string
      /**
       * Field Values
       * @description The field values that were used for this queue item
       */
      field_values?: components["schemas"]["NodeFieldValue"][]
      /**
       * Item Id
       * @description The identifier of the session queue item
       */
      item_id: number
      /**
       * Priority
       * @description The priority of this queue item
       * @default 0
       */
      priority: number
      /**
       * Queue Id
       * @description The id of the queue with which this item is associated
       */
      queue_id: string
      /**
       * Session Id
       * @description The ID of the session associated with this queue item. The session doesn't exist in graph_executions until the queue item is executed.
       */
      session_id: string
      /**
       * Started At
       * @description When this queue item was started
       */
      started_at?: string
      /**
       * Status
       * @description The status of this queue item
       * @default pending
       * @enum {string}
       */
      status: "canceled" | "completed" | "failed" | "in_progress" | "pending"
      /**
       * Updated At
       * @description When this queue item was updated
       */
      updated_at: string
    }
    /** SessionQueueStatus */
    SessionQueueStatus: {
      /**
       * Batch Id
       * @description The current queue item's batch id
       */
      batch_id?: string
      /**
       * Canceled
       * @description Number of queue items with status 'canceled'
       */
      canceled: number
      /**
       * Completed
       * @description Number of queue items with status 'complete'
       */
      completed: number
      /**
       * Failed
       * @description Number of queue items with status 'error'
       */
      failed: number
      /**
       * In Progress
       * @description Number of queue items with status 'in_progress'
       */
      in_progress: number
      /**
       * Item Id
       * @description The current queue item id
       */
      item_id?: number
      /**
       * Pending
       * @description Number of queue items with status 'pending'
       */
      pending: number
      /**
       * Queue Id
       * @description The ID of the queue
       */
      queue_id: string
      /**
       * Session Id
       * @description The current queue item's session id
       */
      session_id?: string
      /**
       * Total
       * @description Total number of queue items
       */
      total: number
    }
    /**
     * Show Image
     * @description Displays a provided image using the OS image viewer, and passes it forward in the pipeline.
     */
    ShowImageInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Image
       * @description The image to show
       */
      image: components["schemas"]["ImageField"]
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Type
       * @default show_image
       * @enum {string}
       */
      type: "show_image"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /** StableDiffusion1ModelCheckpointConfig */
    StableDiffusion1ModelCheckpointConfig: {
      base_model: components["schemas"]["BaseModelType"]
      /** Config */
      config: string
      /** Description */
      description?: string
      error?: components["schemas"]["ModelError"]
      /**
       * Model Format
       * @enum {string}
       */
      model_format: "checkpoint"
      /** Model Name */
      model_name: string
      /**
       * Model Type
       * @enum {string}
       */
      model_type: "main"
      /** Path */
      path: string
      /** Vae */
      vae?: string
      variant: components["schemas"]["ModelVariantType"]
    }
    /** StableDiffusion1ModelDiffusersConfig */
    StableDiffusion1ModelDiffusersConfig: {
      base_model: components["schemas"]["BaseModelType"]
      /** Description */
      description?: string
      error?: components["schemas"]["ModelError"]
      /**
       * Model Format
       * @enum {string}
       */
      model_format: "diffusers"
      /** Model Name */
      model_name: string
      /**
       * Model Type
       * @enum {string}
       */
      model_type: "main"
      /** Path */
      path: string
      /** Vae */
      vae?: string
      variant: components["schemas"]["ModelVariantType"]
    }
    /**
     * StableDiffusion1ModelFormat
     * @description An enumeration.
     * @enum {string}
     */
    StableDiffusion1ModelFormat: "checkpoint" | "diffusers"
    /** StableDiffusion2ModelCheckpointConfig */
    StableDiffusion2ModelCheckpointConfig: {
      base_model: components["schemas"]["BaseModelType"]
      /** Config */
      config: string
      /** Description */
      description?: string
      error?: components["schemas"]["ModelError"]
      /**
       * Model Format
       * @enum {string}
       */
      model_format: "checkpoint"
      /** Model Name */
      model_name: string
      /**
       * Model Type
       * @enum {string}
       */
      model_type: "main"
      /** Path */
      path: string
      /** Vae */
      vae?: string
      variant: components["schemas"]["ModelVariantType"]
    }
    /** StableDiffusion2ModelDiffusersConfig */
    StableDiffusion2ModelDiffusersConfig: {
      base_model: components["schemas"]["BaseModelType"]
      /** Description */
      description?: string
      error?: components["schemas"]["ModelError"]
      /**
       * Model Format
       * @enum {string}
       */
      model_format: "diffusers"
      /** Model Name */
      model_name: string
      /**
       * Model Type
       * @enum {string}
       */
      model_type: "main"
      /** Path */
      path: string
      /** Vae */
      vae?: string
      variant: components["schemas"]["ModelVariantType"]
    }
    /**
     * StableDiffusion2ModelFormat
     * @description An enumeration.
     * @enum {string}
     */
    StableDiffusion2ModelFormat: "checkpoint" | "diffusers"
    /**
     * StableDiffusionOnnxModelFormat
     * @description An enumeration.
     * @enum {string}
     */
    StableDiffusionOnnxModelFormat: "olive" | "onnx"
    /** StableDiffusionXLModelCheckpointConfig */
    StableDiffusionXLModelCheckpointConfig: {
      base_model: components["schemas"]["BaseModelType"]
      /** Config */
      config: string
      /** Description */
      description?: string
      error?: components["schemas"]["ModelError"]
      /**
       * Model Format
       * @enum {string}
       */
      model_format: "checkpoint"
      /** Model Name */
      model_name: string
      /**
       * Model Type
       * @enum {string}
       */
      model_type: "main"
      /** Path */
      path: string
      /** Vae */
      vae?: string
      variant: components["schemas"]["ModelVariantType"]
    }
    /** StableDiffusionXLModelDiffusersConfig */
    StableDiffusionXLModelDiffusersConfig: {
      base_model: components["schemas"]["BaseModelType"]
      /** Description */
      description?: string
      error?: components["schemas"]["ModelError"]
      /**
       * Model Format
       * @enum {string}
       */
      model_format: "diffusers"
      /** Model Name */
      model_name: string
      /**
       * Model Type
       * @enum {string}
       */
      model_type: "main"
      /** Path */
      path: string
      /** Vae */
      vae?: string
      variant: components["schemas"]["ModelVariantType"]
    }
    /**
     * StableDiffusionXLModelFormat
     * @description An enumeration.
     * @enum {string}
     */
    StableDiffusionXLModelFormat: "checkpoint" | "diffusers"
    /**
     * Step Param Easing
     * @description Experimental per-step parameter easing for denoising steps
     */
    StepParamEasingInvocation: {
      /**
       * Easing
       * @description The easing function to use
       * @default Linear
       * @enum {string}
       */
      easing?: "BackIn" | "BackInOut" | "BackOut" | "BounceIn" | "BounceInOut" | "BounceOut" | "CircularIn" | "CircularInOut" | "CircularOut" | "CubicIn" | "CubicInOut" | "CubicOut" | "ElasticIn" | "ElasticInOut" | "ElasticOut" | "ExponentialIn" | "ExponentialInOut" | "ExponentialOut" | "Linear" | "QuadIn" | "QuadInOut" | "QuadOut" | "QuarticIn" | "QuarticInOut" | "QuarticOut" | "QuinticIn" | "QuinticInOut" | "QuinticOut" | "SineIn" | "SineInOut" | "SineOut"
      /**
       * End Step Percent
       * @description fraction of steps after which to end easing
       * @default 1
       */
      end_step_percent?: number
      /**
       * End Value
       * @description easing ending value
       * @default 1
       */
      end_value?: number
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Mirror
       * @description include mirror of easing function
       * @default false
       */
      mirror?: boolean
      /**
       * Num Steps
       * @description number of denoising steps
       * @default 20
       */
      num_steps?: number
      /**
       * Post End Value
       * @description value after easing end
       */
      post_end_value?: number
      /**
       * Pre Start Value
       * @description value before easing start
       */
      pre_start_value?: number
      /**
       * Show Easing Plot
       * @description show easing plot
       * @default false
       */
      show_easing_plot?: boolean
      /**
       * Start Step Percent
       * @description fraction of steps at which to start easing
       * @default 0
       */
      start_step_percent?: number
      /**
       * Start Value
       * @description easing starting value
       * @default 0
       */
      start_value?: number
      /**
       * Type
       * @default step_param_easing
       * @enum {string}
       */
      type: "step_param_easing"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * StrFltIntOutput
     * @description Output a string, float, and integer
     */
    StrFltIntOutput: {
      /**
       * Float
       * @description The output float
       * @default 0
       */
      float_output?: number
      /**
       * Integer
       * @description The output integer
       * @default 0
       */
      integer_output?: number
      /**
       * String
       * @description The output string
       * @default
       */
      string_output?: string
      /**
       * Type
       * @default str_flt_int_output
       * @enum {string}
       */
      type: "str_flt_int_output"
    }
    /**
     * String2Output
     * @description Base class for invocations that output two strings
     */
    String2Output: {
      /**
       * String 1
       * @description string 1
       */
      string_1: string
      /**
       * String 2
       * @description string 2
       */
      string_2: string
      /**
       * Type
       * @default string_2_output
       * @enum {string}
       */
      type: "string_2_output"
    }
    /**
     * String Collection Primitive
     * @description A collection of string primitive values
     */
    StringCollectionInvocation: {
      /**
       * Collection
       * @description The collection of string values
       */
      collection?: string[]
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Type
       * @default string_collection
       * @enum {string}
       */
      type: "string_collection"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * StringCollectionOutput
     * @description Base class for nodes that output a collection of strings
     */
    StringCollectionOutput: {
      /**
       * Collection
       * @description The output strings
       */
      collection: string[]
      /**
       * Type
       * @default string_collection_output
       * @enum {string}
       */
      type: "string_collection_output"
    }
    /**
     * String Primitive
     * @description A string primitive value
     */
    StringInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Type
       * @default string
       * @enum {string}
       */
      type: "string"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Value
       * @description The string value
       * @default
       */
      value?: string
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * String Join
     * @description Joins string left to string right
     */
    StringJoinInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * String Left
       * @description String Left
       * @default
       */
      string_left?: string
      /**
       * String Right
       * @description String Right
       * @default
       */
      string_right?: string
      /**
       * Type
       * @default string_join
       * @enum {string}
       */
      type: "string_join"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * String Join Three
     * @description Joins string left to string middle to string right
     */
    StringJoinThreeInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * String Left
       * @description String Left
       * @default
       */
      string_left?: string
      /**
       * String Middle
       * @description String Middle
       * @default
       */
      string_middle?: string
      /**
       * String Right
       * @description String Right
       * @default
       */
      string_right?: string
      /**
       * Type
       * @default string_join_three
       * @enum {string}
       */
      type: "string_join_three"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * StringOutput
     * @description Base class for nodes that output a single string
     */
    StringOutput: {
      /**
       * Type
       * @default string_output
       * @enum {string}
       */
      type: "string_output"
      /**
       * Value
       * @description The output string
       */
      value: string
    }
    /**
     * StringPosNegOutput
     * @description Base class for invocations that output a positive and negative string
     */
    StringPosNegOutput: {
      /**
       * Negative String
       * @description Negative string
       */
      negative_string: string
      /**
       * Positive String
       * @description Positive string
       */
      positive_string: string
      /**
       * Type
       * @default string_pos_neg_output
       * @enum {string}
       */
      type: "string_pos_neg_output"
    }
    /**
     * String Replace
     * @description Replaces the search string with the replace string
     */
    StringReplaceInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Replace String
       * @description String to replace the search
       * @default
       */
      replace_string?: string
      /**
       * Search String
       * @description String to search for
       * @default
       */
      search_string?: string
      /**
       * String
       * @description String to work on
       * @default
       */
      string?: string
      /**
       * Type
       * @default string_replace
       * @enum {string}
       */
      type: "string_replace"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Use Regex
       * @description Use search string as a regex expression (non regex is case insensitive)
       * @default false
       */
      use_regex?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * String Split
     * @description Splits string into two strings, based on the first occurance of the delimiter. The delimiter will be removed from the string
     */
    StringSplitInvocation: {
      /**
       * Delimiter
       * @description Delimiter to spilt with. blank will split on the first whitespace
       * @default
       */
      delimiter?: string
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * String
       * @description String to split
       * @default
       */
      string?: string
      /**
       * Type
       * @default string_split
       * @enum {string}
       */
      type: "string_split"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * String Split Negative
     * @description Splits string into two strings, inside [] goes into negative string everthing else goes into positive string. Each [ and ] character is replaced with a space
     */
    StringSplitNegInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * String
       * @description String to split
       * @default
       */
      string?: string
      /**
       * Type
       * @default string_split_neg
       * @enum {string}
       */
      type: "string_split_neg"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * String To Float
     * @description StringToFloat converts a string to a float
     */
    StringToFloatInvocation: {
      /**
       * Float String
       * @description string containing a float to convert
       */
      float_string: string
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Type
       * @default string_to_float
       * @enum {string}
       */
      type: "string_to_float"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * String To Int
     * @description StringToInt converts a string to an int
     */
    StringToIntInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Int String
       * @description string containing an integer to convert
       */
      int_string: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Type
       * @default string_to_int
       * @enum {string}
       */
      type: "string_to_int"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * String To Scheduler
     * @description StringToScheduler converts a string to a scheduler
     */
    StringToSchedulerInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Scheduler String
       * @description string containing a scheduler to convert
       */
      scheduler_string: string
      /**
       * Type
       * @default string_to_scheduler
       * @enum {string}
       */
      type: "string_to_scheduler"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * SubModelType
     * @description An enumeration.
     * @enum {string}
     */
    SubModelType: "safety_checker" | "scheduler" | "text_encoder" | "text_encoder_2" | "tokenizer" | "tokenizer_2" | "unet" | "vae" | "vae_decoder" | "vae_encoder"
    /**
     * Subtract Integers
     * @description Subtracts two numbers
     */
    SubtractInvocation: {
      /**
       * A
       * @description The first number
       * @default 0
       */
      a?: number
      /**
       * B
       * @description The second number
       * @default 0
       */
      b?: number
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Type
       * @default sub
       * @enum {string}
       */
      type: "sub"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /** T2IAdapterField */
    T2IAdapterField: {
      /**
       * Begin Step Percent
       * @description When the T2I-Adapter is first applied (% of total steps)
       * @default 0
       */
      begin_step_percent?: number
      /**
       * End Step Percent
       * @description When the T2I-Adapter is last applied (% of total steps)
       * @default 1
       */
      end_step_percent?: number
      /**
       * Image
       * @description The T2I-Adapter image prompt.
       */
      image: components["schemas"]["ImageField"]
      /**
       * Resize Mode
       * @description The resize mode to use
       * @default just_resize
       * @enum {string}
       */
      resize_mode?: "crop_resize" | "fill_resize" | "just_resize" | "just_resize_simple"
      /**
       * T2I Adapter Model
       * @description The T2I-Adapter model to use.
       */
      t2i_adapter_model: components["schemas"]["T2IAdapterModelField"]
      /**
       * Weight
       * @description The weight given to the T2I-Adapter
       * @default 1
       */
      weight?: number | number[]
    }
    /**
     * T2I-Adapter
     * @description Collects T2I-Adapter info to pass to other nodes.
     */
    T2IAdapterInvocation: {
      /**
       * Begin Step Percent
       * @description When the T2I-Adapter is first applied (% of total steps)
       * @default 0
       */
      begin_step_percent?: number
      /**
       * End Step Percent
       * @description When the T2I-Adapter is last applied (% of total steps)
       * @default 1
       */
      end_step_percent?: number
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Image
       * @description The IP-Adapter image prompt.
       */
      image: components["schemas"]["ImageField"]
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Resize Mode
       * @description The resize mode applied to the T2I-Adapter input image so that it matches the target output size.
       * @default just_resize
       * @enum {string}
       */
      resize_mode?: "crop_resize" | "fill_resize" | "just_resize" | "just_resize_simple"
      /**
       * T2I-Adapter Model
       * @description The T2I-Adapter model.
       */
      t2i_adapter_model: components["schemas"]["T2IAdapterModelField"]
      /**
       * Type
       * @default t2i_adapter
       * @enum {string}
       */
      type: "t2i_adapter"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Weight
       * @description The weight given to the T2I-Adapter
       * @default 1
       */
      weight?: number | number[]
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /** T2IAdapterModelDiffusersConfig */
    T2IAdapterModelDiffusersConfig: {
      base_model: components["schemas"]["BaseModelType"]
      /** Description */
      description?: string
      error?: components["schemas"]["ModelError"]
      /**
       * Model Format
       * @enum {string}
       */
      model_format: "diffusers"
      /** Model Name */
      model_name: string
      /**
       * Model Type
       * @enum {string}
       */
      model_type: "t2i_adapter"
      /** Path */
      path: string
    }
    /** T2IAdapterModelField */
    T2IAdapterModelField: {
      /** @description Base model */
      base_model: components["schemas"]["BaseModelType"]
      /**
       * Model Name
       * @description Name of the T2I-Adapter model
       */
      model_name: string
    }
    /**
     * T2IAdapterModelFormat
     * @description An enumeration.
     * @enum {string}
     */
    T2IAdapterModelFormat: "diffusers"
    /**
     * T2IAdapterOutput
     * @description Base class for all invocation outputs.
     *
     * All invocation outputs must use the `@invocation_output` decorator to provide their unique type.
     */
    T2IAdapterOutput: {
      /**
       * T2I Adapter
       * @description T2I-Adapter(s) to apply
       */
      t2i_adapter: components["schemas"]["T2IAdapterField"]
      /**
       * Type
       * @default t2i_adapter_output
       * @enum {string}
       */
      type: "t2i_adapter_output"
    }
    /** TextualInversionModelConfig */
    TextualInversionModelConfig: {
      base_model: components["schemas"]["BaseModelType"]
      /** Description */
      description?: string
      error?: components["schemas"]["ModelError"]
      /** Model Format */
      model_format: null
      /** Model Name */
      model_name: string
      /**
       * Model Type
       * @enum {string}
       */
      model_type: "embedding"
      /** Path */
      path: string
    }
    /**
     * Tile Resample Processor
     * @description Tile resampler processor
     */
    TileResamplerProcessorInvocation: {
      /**
       * Down Sampling Rate
       * @description Down sampling rate
       * @default 1
       */
      down_sampling_rate?: number
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Image
       * @description The image to process
       */
      image: components["schemas"]["ImageField"]
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Type
       * @default tile_image_processor
       * @enum {string}
       */
      type: "tile_image_processor"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * UIComponent
     * @description The type of UI component to use for a field, used to override the default components, which are     inferred from the field type.
     * @enum {string}
     */
    UIComponent: "none" | "slider" | "textarea"
    /**
     * UIConfigBase
     * @description Provides additional node configuration to the UI.
     * This is used internally by the @invocation decorator logic. Do not use this directly.
     */
    UIConfigBase: {
      /**
       * Category
       * @description The node's category
       */
      category?: string
      /**
       * Tags
       * @description The node's tags
       */
      tags?: string[]
      /**
       * Title
       * @description The node's display name
       */
      title?: string
      /**
       * Version
       * @description The node's version. Should be a valid semver string e.g. "1.0.0" or "3.8.13".
       */
      version?: string
    }
    /**
     * UIType
     * @description Type hints for the UI.
     * If a field should be provided a data type that does not exactly match the python type of the field,     use this to provide the type that should be used instead. See the node development docs for detail     on adding a new field type, which involves client-side changes.
     * @enum {string}
     */
    UIType: "BoardField" | "boolean" | "BooleanCollection" | "BooleanPolymorphic" | "ClipField" | "Collection" | "CollectionItem" | "ColorCollection" | "ColorField" | "ColorPolymorphic" | "ConditioningCollection" | "ConditioningField" | "ConditioningPolymorphic" | "ControlCollection" | "ControlField" | "ControlNetModelField" | "ControlPolymorphic" | "enum" | "float" | "FloatCollection" | "FloatPolymorphic" | "ImageCollection" | "ImageField" | "ImagePolymorphic" | "integer" | "IntegerCollection" | "IntegerPolymorphic" | "IPAdapterModelField" | "IsIntermediate" | "LatentsCollection" | "LatentsField" | "LatentsPolymorphic" | "LoRAModelField" | "MainModelField" | "MetadataField" | "ONNXModelField" | "Scheduler" | "SDXLMainModelField" | "SDXLRefinerModelField" | "string" | "StringCollection" | "StringPolymorphic" | "UNetField" | "VaeField" | "VaeModelField" | "WorkflowField"
    /** UNetField */
    UNetField: {
      /**
       * Loras
       * @description Loras to apply on model loading
       */
      loras: components["schemas"]["LoraInfo"][]
      /**
       * Scheduler
       * @description Info to load scheduler submodel
       */
      scheduler: components["schemas"]["ModelInfo"]
      /**
       * Seamless Axes
       * @description Axes("x" and "y") to which apply seamless
       */
      seamless_axes?: string[]
      /**
       * Unet
       * @description Info to load unet submodel
       */
      unet: components["schemas"]["ModelInfo"]
    }
    /** Upscaler */
    Upscaler: {
      /**
       * Upscaling Method
       * @description Name of upscaling method
       */
      upscaling_method: string
      /**
       * Upscaling Models
       * @description List of upscaling models for this method
       */
      upscaling_models: string[]
    }
    /** VaeField */
    VaeField: {
      /**
       * Seamless Axes
       * @description Axes("x" and "y") to which apply seamless
       */
      seamless_axes?: string[]
      /**
       * Vae
       * @description Info to load vae submodel
       */
      vae: components["schemas"]["ModelInfo"]
    }
    /**
     * VAE
     * @description Loads a VAE model, outputting a VaeLoaderOutput
     */
    VaeLoaderInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Type
       * @default vae_loader
       * @enum {string}
       */
      type: "vae_loader"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * VAE
       * @description VAE model to load
       */
      vae_model: components["schemas"]["VAEModelField"]
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * VaeLoaderOutput
     * @description VAE output
     */
    VaeLoaderOutput: {
      /**
       * Type
       * @default vae_loader_output
       * @enum {string}
       */
      type: "vae_loader_output"
      /**
       * VAE
       * @description VAE
       */
      vae: components["schemas"]["VaeField"]
    }
    /** VaeModelConfig */
    VaeModelConfig: {
      base_model: components["schemas"]["BaseModelType"]
      /** Description */
      description?: string
      error?: components["schemas"]["ModelError"]
      model_format: components["schemas"]["VaeModelFormat"]
      /** Model Name */
      model_name: string
      /**
       * Model Type
       * @enum {string}
       */
      model_type: "vae"
      /** Path */
      path: string
    }
    /**
     * VAEModelField
     * @description Vae model field
     */
    VAEModelField: {
      /** @description Base model */
      base_model: components["schemas"]["BaseModelType"]
      /**
       * Model Name
       * @description Name of the model
       */
      model_name: string
    }
    /**
     * VaeModelFormat
     * @description An enumeration.
     * @enum {string}
     */
    VaeModelFormat: "checkpoint" | "diffusers"
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (number | string)[]
      /** Message */
      msg: string
      /** Error Type */
      type: string
    }
    /**
     * Value To Value
     * @description Outputs a given value as a string, float, or integer. Rounds in the case of float to integer.
     */
    ValueToValueInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Round Method
       * @description The method to use for rounding
       * @default Nearest
       * @enum {string}
       */
      round_method?: "Ceiling" | "Floor" | "Nearest" | "Truncate"
      /**
       * Multiple of
       * @description The multiple to round to for float to integer
       * @default 1
       */
      round_multiple?: number
      /**
       * Type
       * @default value_to_value
       * @enum {string}
       */
      type: "value_to_value"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Value
       * @description The value to pass forward
       */
      value: string
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
    /**
     * XY Collect CSV
     * @description XYCollectCSV converts X and Y CSV Strings to an XY item collection with every combination of X and Y
     */
    XYCollectCSVInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Type
       * @default xy_collect_csv
       * @enum {string}
       */
      type: "xy_collect_csv"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
      /**
       * X
       * @description x string
       */
      x: string
      /**
       * Y
       * @description y string
       */
      y: string
    }
    /**
     * XY Collect
     * @description XYCollect takes an X and Y string collections and outputs a XY item collection with every combination of X and Y
     */
    XYCollectInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Type
       * @default xy_collect
       * @enum {string}
       */
      type: "xy_collect"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
      /**
       * X Collection
       * @description The X collection
       */
      x_collection?: string[]
      /**
       * Y Collection
       * @description The Y collection
       */
      y_collection?: string[]
    }
    /**
     * XYCollectOutput
     * @description XYCollectOutput a collection that contains every combination of the input collections
     */
    XYCollectOutput: {
      /**
       * Type
       * @default xy_collect_output
       * @enum {string}
       */
      type: "xy_collect_output"
      /**
       * Xy Collection
       * @description The x y product collection
       */
      xy_collection: string[]
    }
    /**
     * XY Expand
     * @description XYExpand takes an XY item and outputs the X andY as individual strings
     */
    XYExpandInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Type
       * @default xy_expand
       * @enum {string}
       */
      type: "xy_expand"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
      /**
       * Xy Item
       * @description The XY collection item
       */
      xy_item: string
    }
    /**
     * XYExpandOutput
     * @description XYExpandOutput two strings that are expanded from a collection of strings
     */
    XYExpandOutput: {
      /**
       * Type
       * @default xy_expand_output
       * @enum {string}
       */
      type: "xy_expand_output"
      /**
       * X Item
       * @description The X item
       */
      x_item: string
      /**
       * Y Item
       * @description The y item
       */
      y_item: string
    }
    /**
     * XYImage Collect
     * @description XYImageCollect takes xItem, yItem and an Image and outputs it as an (x_item,y_item,image_name)array converted to json
     */
    XYImageCollectInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Image
       * @description The image to turn into grids
       */
      image: components["schemas"]["ImageField"]
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Type
       * @default xyimage_collect
       * @enum {string}
       */
      type: "xyimage_collect"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
      /**
       * X Item
       * @description The X item
       */
      x_item: string
      /**
       * Y Item
       * @description The Y item
       */
      y_item: string
    }
    /**
     * XYImage To Grid
     * @description Load a collection of xyimage types (json of (x_item,y_item,image_name)array) and create a grid image of them
     */
    XYImagesToGridInvocation: {
      /**
       * Background Color
       * @description The color to use as the background
       * @default {
       *   "r": 0,
       *   "g": 0,
       *   "b": 0,
       *   "a": 255
       * }
       */
      background_color?: components["schemas"]["ColorField"]
      /**
       * Board
       * @description The board to save the image to
       */
      board?: components["schemas"]["BoardField"]
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Label Font Color
       * @description The color to use for the label font
       * @default {
       *   "r": 255,
       *   "g": 255,
       *   "b": 255,
       *   "a": 255
       * }
       */
      label_font_color?: components["schemas"]["ColorField"]
      /**
       * Label Font Name
       * @description Name of the font to use for labels
       * @default arial.ttf
       */
      label_font_name?: string
      /**
       * Label Font Size
       * @description Size of the font to use for labels
       * @default 35
       */
      label_font_size?: number
      /**
       * Left Label Width
       * @description Width of the left label area
       * @default 100
       */
      left_label_width?: number
      /**
       * Metadata
       * @description Optional core metadata to be written to image
       */
      metadata?: components["schemas"]["CoreMetadata"]
      /**
       * Resample Mode
       * @description The resampling mode
       * @default bicubic
       * @enum {string}
       */
      resample_mode?: "bicubic" | "bilinear" | "box" | "hamming" | "lanczos" | "nearest"
      /**
       * Scale Factor
       * @description The factor by which to scale the images
       * @default 1
       */
      scale_factor?: number
      /**
       * Space
       * @description The space to be added between images
       * @default 1
       */
      space?: number
      /**
       * Top Label Height
       * @description Height of the top label area
       * @default 50
       */
      top_label_height?: number
      /**
       * Type
       * @default xyimage_grid
       * @enum {string}
       */
      type: "xyimage_grid"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
      /**
       * Xyimages
       * @description The xyImage Collection
       */
      xyimages?: string[]
    }
    /**
     * Zoe (Depth) Processor
     * @description Applies Zoe depth processing to image
     */
    ZoeDepthImageProcessorInvocation: {
      /**
       * Id
       * @description The id of this instance of an invocation. Must be unique among all instances of invocations.
       */
      id: string
      /**
       * Image
       * @description The image to process
       */
      image: components["schemas"]["ImageField"]
      /**
       * Is Intermediate
       * @description Whether or not this is an intermediate invocation.
       * @default false
       */
      is_intermediate?: boolean
      /**
       * Type
       * @default zoe_depth_image_processor
       * @enum {string}
       */
      type: "zoe_depth_image_processor"
      /**
       * Use Cache
       * @description Whether or not to use the cache
       * @default true
       */
      use_cache?: boolean
      /**
       * Workflow
       * @description The workflow to save with the image
       */
      workflow?: string
    }
  }
};

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = {

  /**
   * Add Edge
   * @deprecated
   * @description Adds an edge to the graph
   */
  add_edge: {
    parameters: {
      path: {
        /** @description The id of the session */
        session_id: string
      }
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["Edge"]
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["GraphExecutionState"]
        }
      }
      /** @description Invalid node or link */
      400: {
        content: never
      }
      /** @description Session not found */
      404: {
        content: never
      }
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  /**
   * Add Image To Board
   * @description Creates a board_image
   */
  add_image_to_board: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["Body_add_image_to_board"]
      }
    }
    responses: {
      /** @description The image was added to a board successfully */
      201: {
        content: {
          "application/json": unknown
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  /**
   * Add Images To Board
   * @description Adds a list of images to a board
   */
  add_images_to_board: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["Body_add_images_to_board"]
      }
    }
    responses: {
      /** @description Images were added to board successfully */
      201: {
        content: {
          "application/json": components["schemas"]["AddImagesToBoardResult"]
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  /**
   * Add Model
   * @description Add a model using the configuration information appropriate for its type. Only local models can be added by path
   */
  add_model: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CLIPVisionModelDiffusersConfig"] | components["schemas"]["ControlNetModelCheckpointConfig"] | components["schemas"]["ControlNetModelDiffusersConfig"] | components["schemas"]["IPAdapterModelInvokeAIConfig"] | components["schemas"]["LoRAModelConfig"] | components["schemas"]["ONNXStableDiffusion1ModelConfig"] | components["schemas"]["ONNXStableDiffusion2ModelConfig"] | components["schemas"]["StableDiffusion1ModelCheckpointConfig"] | components["schemas"]["StableDiffusion1ModelDiffusersConfig"] | components["schemas"]["StableDiffusion2ModelCheckpointConfig"] | components["schemas"]["StableDiffusion2ModelDiffusersConfig"] | components["schemas"]["StableDiffusionXLModelCheckpointConfig"] | components["schemas"]["StableDiffusionXLModelDiffusersConfig"] | components["schemas"]["T2IAdapterModelDiffusersConfig"] | components["schemas"]["TextualInversionModelConfig"] | components["schemas"]["VaeModelConfig"]
      }
    }
    responses: {
      /** @description The model added successfully */
      201: {
        content: {
          "application/json": components["schemas"]["CLIPVisionModelDiffusersConfig"] | components["schemas"]["ControlNetModelCheckpointConfig"] | components["schemas"]["ControlNetModelDiffusersConfig"] | components["schemas"]["IPAdapterModelInvokeAIConfig"] | components["schemas"]["LoRAModelConfig"] | components["schemas"]["ONNXStableDiffusion1ModelConfig"] | components["schemas"]["ONNXStableDiffusion2ModelConfig"] | components["schemas"]["StableDiffusion1ModelCheckpointConfig"] | components["schemas"]["StableDiffusion1ModelDiffusersConfig"] | components["schemas"]["StableDiffusion2ModelCheckpointConfig"] | components["schemas"]["StableDiffusion2ModelDiffusersConfig"] | components["schemas"]["StableDiffusionXLModelCheckpointConfig"] | components["schemas"]["StableDiffusionXLModelDiffusersConfig"] | components["schemas"]["T2IAdapterModelDiffusersConfig"] | components["schemas"]["TextualInversionModelConfig"] | components["schemas"]["VaeModelConfig"]
        }
      }
      /** @description The model could not be found */
      404: {
        content: never
      }
      /** @description There is already a model corresponding to this path or repo_id */
      409: {
        content: never
      }
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
      /** @description The model appeared to add successfully, but could not be found in the model manager */
      424: {
        content: never
      }
    }
  }
  /**
   * Add Node
   * @deprecated
   * @description Adds a node to the graph
   */
  add_node: {
    parameters: {
      path: {
        /** @description The id of the session */
        session_id: string
      }
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["ABSwitchFloat"] | components["schemas"]["ABSwitchInt"] | components["schemas"]["AdaptiveEQInvocation"] | components["schemas"]["AddInvocation"] | components["schemas"]["BlankImageInvocation"] | components["schemas"]["BlendLatentsInvocation"] | components["schemas"]["BooleanCastFloat"] | components["schemas"]["BooleanCastInteger"] | components["schemas"]["BooleanCollectionInvocation"] | components["schemas"]["BooleanEqualsInvocation"] | components["schemas"]["BooleanInvocation"] | components["schemas"]["BooleanNotInvocation"] | components["schemas"]["BooleanRandomInvocation"] | components["schemas"]["CannyImageProcessorInvocation"] | components["schemas"]["ClipSkipInvocation"] | components["schemas"]["CollectInvocation"] | components["schemas"]["ColorCorrectInvocation"] | components["schemas"]["ColorInvocation"] | components["schemas"]["ColorMapImageProcessorInvocation"] | components["schemas"]["CompelInvocation"] | components["schemas"]["ConditioningCollectionInvocation"] | components["schemas"]["ConditioningInvocation"] | components["schemas"]["ContentShuffleImageProcessorInvocation"] | components["schemas"]["ControlNetInvocation"] | components["schemas"]["CreateDenoiseMaskInvocation"] | components["schemas"]["CSVToIndexStringInvocation"] | components["schemas"]["CSVToStringsInvocation"] | components["schemas"]["CV2InfillInvocation"] | components["schemas"]["CvInpaintInvocation"] | components["schemas"]["DenoiseLatentsInvocation"] | components["schemas"]["DivideInvocation"] | components["schemas"]["DynamicPromptInvocation"] | components["schemas"]["ESRGANInvocation"] | components["schemas"]["FaceIdentifierInvocation"] | components["schemas"]["FaceMaskInvocation"] | components["schemas"]["FaceOffInvocation"] | components["schemas"]["FloatAbsoluteInvocation"] | components["schemas"]["FloatAddInvocation"] | components["schemas"]["FloatArcCosineInvocation"] | components["schemas"]["FloatArcSineInvocation"] | components["schemas"]["FloatArcTangentInvocation"] | components["schemas"]["FloatCastBooleanInvocation"] | components["schemas"]["FloatCastIntegerInvocation"] | components["schemas"]["FloatCeilInvocation"] | components["schemas"]["FloatCollectionInvocation"] | components["schemas"]["FloatCosineInvocation"] | components["schemas"]["FloatDivideInvocation"] | components["schemas"]["FloatEqualsInvocation"] | components["schemas"]["FloatFloorInvocation"] | components["schemas"]["FloatGreaterEqualsInvocation"] | components["schemas"]["FloatGreaterInvocation"] | components["schemas"]["FloatHyperbolicCosineInvocation"] | components["schemas"]["FloatHyperbolicSineInvocation"] | components["schemas"]["FloatHyperbolicTangentInvocation"] | components["schemas"]["FloatInverseHyerbolicCosineInvocation"] | components["schemas"]["FloatInverseHyerbolicSineInvocation"] | components["schemas"]["FloatInverseHyerbolicTangentInvocation"] | components["schemas"]["FloatInvocation"] | components["schemas"]["FloatLessEqualsInvocation"] | components["schemas"]["FloatLessInvocation"] | components["schemas"]["FloatLinearRangeInvocation"] | components["schemas"]["FloatLogInvocation"] | components["schemas"]["FloatLogNInvocation"] | components["schemas"]["FloatMathInvocation"] | components["schemas"]["FloatModuloInvocation"] | components["schemas"]["FloatMultiplyInvocation"] | components["schemas"]["FloatPowInvocation"] | components["schemas"]["FloatRandomInvocation"] | components["schemas"]["FloatRoundInvocation"] | components["schemas"]["FloatRoundToMultipleInvocation"] | components["schemas"]["FloatSineInvocation"] | components["schemas"]["FloatSqrtInvocation"] | components["schemas"]["FloatsToStringsInvocation"] | components["schemas"]["FloatSubtractInvocation"] | components["schemas"]["FloatTangentInvocation"] | components["schemas"]["FloatToIntegerInvocation"] | components["schemas"]["GraphInvocation"] | components["schemas"]["HedImageProcessorInvocation"] | components["schemas"]["IdealSizeInvocation"] | components["schemas"]["ImageBlurInvocation"] | components["schemas"]["ImageChannelInvocation"] | components["schemas"]["ImageChannelMultiplyInvocation"] | components["schemas"]["ImageChannelOffsetInvocation"] | components["schemas"]["ImageCollectionInvocation"] | components["schemas"]["ImageConvertInvocation"] | components["schemas"]["ImageCropInvocation"] | components["schemas"]["ImageHueAdjustmentInvocation"] | components["schemas"]["ImageInverseLerpInvocation"] | components["schemas"]["ImageInvocation"] | components["schemas"]["ImageLerpInvocation"] | components["schemas"]["ImageMultiplyInvocation"] | components["schemas"]["ImageNSFWBlurInvocation"] | components["schemas"]["ImagePasteInvocation"] | components["schemas"]["ImageProcessorInvocation"] | components["schemas"]["ImageResizeInvocation"] | components["schemas"]["ImageScaleInvocation"] | components["schemas"]["ImagesToGridsInvocation"] | components["schemas"]["ImageToLatentsInvocation"] | components["schemas"]["ImageWatermarkInvocation"] | components["schemas"]["InfillColorInvocation"] | components["schemas"]["InfillPatchMatchInvocation"] | components["schemas"]["InfillTileInvocation"] | components["schemas"]["IntegerAbsoluteInvocation"] | components["schemas"]["IntegerAddInvocation"] | components["schemas"]["IntegerCastBooleanInvocation"] | components["schemas"]["IntegerCastFloatInvocation"] | components["schemas"]["IntegerCollectionInvocation"] | components["schemas"]["IntegerDivideInvocation"] | components["schemas"]["IntegerEqualsInvocation"] | components["schemas"]["IntegerGreaterEqualsInvocation"] | components["schemas"]["IntegerGreaterInvocation"] | components["schemas"]["IntegerInvocation"] | components["schemas"]["IntegerLessEqualsInvocation"] | components["schemas"]["IntegerLessInvocation"] | components["schemas"]["IntegerMathInvocation"] | components["schemas"]["IntegerModuloInvocation"] | components["schemas"]["IntegerMultiplyInvocation"] | components["schemas"]["IntegerRandomInvocation"] | components["schemas"]["IntegerSubtractInvocation"] | components["schemas"]["IntsToStringsInvocation"] | components["schemas"]["IPAdapterInvocation"] | components["schemas"]["IterateInvocation"] | components["schemas"]["LaMaInfillInvocation"] | components["schemas"]["LatentsCollectionInvocation"] | components["schemas"]["LatentsInvocation"] | components["schemas"]["LatentsToImageInvocation"] | components["schemas"]["LeresImageProcessorInvocation"] | components["schemas"]["LineartAnimeImageProcessorInvocation"] | components["schemas"]["LineartImageProcessorInvocation"] | components["schemas"]["LoraLoaderInvocation"] | components["schemas"]["MainModelLoaderInvocation"] | components["schemas"]["MaskCombineInvocation"] | components["schemas"]["MaskEdgeInvocation"] | components["schemas"]["MaskFromAlphaInvocation"] | components["schemas"]["MediapipeFaceProcessorInvocation"] | components["schemas"]["MetadataAccumulatorInvocation"] | components["schemas"]["MidasDepthImageProcessorInvocation"] | components["schemas"]["MlsdImageProcessorInvocation"] | components["schemas"]["MultiplyInvocation"] | components["schemas"]["NoiseInvocation"] | components["schemas"]["NormalbaeImageProcessorInvocation"] | components["schemas"]["ONNXLatentsToImageInvocation"] | components["schemas"]["OnnxModelLoaderInvocation"] | components["schemas"]["ONNXPromptInvocation"] | components["schemas"]["ONNXTextToLatentsInvocation"] | components["schemas"]["OpenposeImageProcessorInvocation"] | components["schemas"]["PidiImageProcessorInvocation"] | components["schemas"]["PromptsFromFileInvocation"] | components["schemas"]["PromptsToFileInvocation"] | components["schemas"]["PromptStrengthInvocation"] | components["schemas"]["PromptStrengthsCombineInvocation"] | components["schemas"]["PTFieldsCollectInvocation"] | components["schemas"]["PTFieldsExpandInvocation"] | components["schemas"]["RandomFloatInvocation"] | components["schemas"]["RandomIntInvocation"] | components["schemas"]["RandomRangeInvocation"] | components["schemas"]["RangeInvocation"] | components["schemas"]["RangeOfSizeInvocation"] | components["schemas"]["ResizeLatentsInvocation"] | components["schemas"]["RoundInvocation"] | components["schemas"]["SaveImageInvocation"] | components["schemas"]["ScaleLatentsInvocation"] | components["schemas"]["SchedulerInvocation"] | components["schemas"]["SDXLCompelPromptInvocation"] | components["schemas"]["SDXLLoraLoaderInvocation"] | components["schemas"]["SDXLModelLoaderInvocation"] | components["schemas"]["SDXLRefinerCompelPromptInvocation"] | components["schemas"]["SDXLRefinerModelLoaderInvocation"] | components["schemas"]["SeamlessModeInvocation"] | components["schemas"]["SegmentAnythingProcessorInvocation"] | components["schemas"]["ShowImageInvocation"] | components["schemas"]["StepParamEasingInvocation"] | components["schemas"]["StringCollectionInvocation"] | components["schemas"]["StringInvocation"] | components["schemas"]["StringJoinInvocation"] | components["schemas"]["StringJoinThreeInvocation"] | components["schemas"]["StringReplaceInvocation"] | components["schemas"]["StringSplitInvocation"] | components["schemas"]["StringSplitNegInvocation"] | components["schemas"]["StringToFloatInvocation"] | components["schemas"]["StringToIntInvocation"] | components["schemas"]["StringToSchedulerInvocation"] | components["schemas"]["SubtractInvocation"] | components["schemas"]["T2IAdapterInvocation"] | components["schemas"]["TileResamplerProcessorInvocation"] | components["schemas"]["VaeLoaderInvocation"] | components["schemas"]["ValueToValueInvocation"] | components["schemas"]["XYCollectCSVInvocation"] | components["schemas"]["XYCollectInvocation"] | components["schemas"]["XYExpandInvocation"] | components["schemas"]["XYImageCollectInvocation"] | components["schemas"]["XYImagesToGridInvocation"] | components["schemas"]["ZoeDepthImageProcessorInvocation"]
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": string
        }
      }
      /** @description Invalid node or link */
      400: {
        content: never
      }
      /** @description Session not found */
      404: {
        content: never
      }
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  /** Get Version */
  app_version: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AppVersion"]
        }
      }
    }
  }
  /**
   * Cancel By Batch Ids
   * @description Immediately cancels all queue items from the given batch ids
   */
  cancel_by_batch_ids: {
    parameters: {
      path: {
        /** @description The queue id to perform this operation on */
        queue_id: string
      }
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["Body_cancel_by_batch_ids"]
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["CancelByBatchIDsResult"]
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  /**
   * Cancel Queue Item
   * @description Deletes a queue item
   */
  cancel_queue_item: {
    parameters: {
      path: {
        /** @description The queue item to cancel */
        item_id: number
        /** @description The queue id to perform this operation on */
        queue_id: string
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SessionQueueItem"]
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  /**
   * Cancel Session Invoke
   * @deprecated
   * @description Invokes a session
   */
  cancel_session_invoke: {
    parameters: {
      path: {
        /** @description The id of the session to cancel */
        session_id: string
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown
        }
      }
      /** @description The invocation is canceled */
      202: {
        content: never
      }
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  /**
   * Clear
   * @description Clears the queue entirely, immediately canceling the currently-executing session
   */
  clear: {
    parameters: {
      path: {
        /** @description The queue id to perform this operation on */
        queue_id: string
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ClearResult"]
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  /**
   * Clear Intermediates
   * @description Clears all intermediates
   */
  clear_intermediates: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown
        }
      }
    }
  }
  /**
   * Clear Invocation Cache
   * @description Clears the invocation cache
   */
  clear_invocation_cache: {
    responses: {
      /** @description The operation was successful */
      200: {
        content: {
          "application/json": unknown
        }
      }
    }
  }
  /**
   * Convert Model
   * @description Convert a checkpoint model into a diffusers model, optionally saving to the indicated destination directory, or `models` if none.
   */
  convert_model: {
    parameters: {
      path: {
        /** @description Base model */
        base_model: components["schemas"]["BaseModelType"]
        /** @description model name */
        model_name: string
        /** @description The type of model */
        model_type: components["schemas"]["ModelType"]
      }
      query?: {
        /** @description Save the converted model to the designated directory */
        convert_dest_directory?: string
      }
    }
    responses: {
      /** @description Model converted successfully */
      200: {
        content: {
          "application/json": components["schemas"]["CLIPVisionModelDiffusersConfig"] | components["schemas"]["ControlNetModelCheckpointConfig"] | components["schemas"]["ControlNetModelDiffusersConfig"] | components["schemas"]["IPAdapterModelInvokeAIConfig"] | components["schemas"]["LoRAModelConfig"] | components["schemas"]["ONNXStableDiffusion1ModelConfig"] | components["schemas"]["ONNXStableDiffusion2ModelConfig"] | components["schemas"]["StableDiffusion1ModelCheckpointConfig"] | components["schemas"]["StableDiffusion1ModelDiffusersConfig"] | components["schemas"]["StableDiffusion2ModelCheckpointConfig"] | components["schemas"]["StableDiffusion2ModelDiffusersConfig"] | components["schemas"]["StableDiffusionXLModelCheckpointConfig"] | components["schemas"]["StableDiffusionXLModelDiffusersConfig"] | components["schemas"]["T2IAdapterModelDiffusersConfig"] | components["schemas"]["TextualInversionModelConfig"] | components["schemas"]["VaeModelConfig"]
        }
      }
      /** @description Bad request */
      400: {
        content: never
      }
      /** @description Model not found */
      404: {
        content: never
      }
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  /**
   * Create Board
   * @description Creates a board
   */
  create_board: {
    parameters: {
      query: {
        /** @description The name of the board to create */
        board_name: string
      }
    }
    responses: {
      /** @description The board was created successfully */
      201: {
        content: {
          "application/json": components["schemas"]["BoardDTO"]
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  /**
   * Create Session
   * @deprecated
   * @description Creates a new session, optionally initializing it with an invocation graph
   */
  create_session: {
    parameters: {
      query?: {
        /** @description The id of the queue to associate the session with */
        queue_id?: string
      }
    }
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Graph"]
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["GraphExecutionState"]
        }
      }
      /** @description Invalid json */
      400: {
        content: never
      }
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  /**
   * Delete Model
   * @description Delete Model
   */
  del_model: {
    parameters: {
      path: {
        /** @description Base model */
        base_model: components["schemas"]["BaseModelType"]
        /** @description model name */
        model_name: string
        /** @description The type of model */
        model_type: components["schemas"]["ModelType"]
      }
    }
    responses: {
      /** @description Model deleted successfully */
      204: {
        content: never
      }
      /** @description Model not found */
      404: {
        content: never
      }
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  /**
   * Delete Board
   * @description Deletes a board
   */
  delete_board: {
    parameters: {
      path: {
        /** @description The id of board to delete */
        board_id: string
      }
      query?: {
        /** @description Permanently delete all images on the board */
        include_images?: boolean
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["DeleteBoardResult"]
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  /**
   * Delete Edge
   * @deprecated
   * @description Deletes an edge from the graph
   */
  delete_edge: {
    parameters: {
      path: {
        /** @description The field of the node the edge is coming from */
        from_field: string
        /** @description The id of the node the edge is coming from */
        from_node_id: string
        /** @description The id of the session */
        session_id: string
        /** @description The field of the node the edge is going to */
        to_field: string
        /** @description The id of the node the edge is going to */
        to_node_id: string
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["GraphExecutionState"]
        }
      }
      /** @description Invalid node or link */
      400: {
        content: never
      }
      /** @description Session not found */
      404: {
        content: never
      }
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  /**
   * Delete Image
   * @description Deletes an image
   */
  delete_image: {
    parameters: {
      path: {
        /** @description The name of the image to delete */
        image_name: string
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  /** Delete Images From List */
  delete_images_from_list: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["Body_delete_images_from_list"]
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["DeleteImagesFromListResult"]
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  /**
   * Delete Node
   * @deprecated
   * @description Deletes a node in the graph and removes all linked edges
   */
  delete_node: {
    parameters: {
      path: {
        /** @description The path to the node to delete */
        node_path: string
        /** @description The id of the session */
        session_id: string
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["GraphExecutionState"]
        }
      }
      /** @description Invalid node or link */
      400: {
        content: never
      }
      /** @description Session not found */
      404: {
        content: never
      }
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  /**
   * Disable Invocation Cache
   * @description Clears the invocation cache
   */
  disable_invocation_cache: {
    responses: {
      /** @description The operation was successful */
      200: {
        content: {
          "application/json": unknown
        }
      }
    }
  }
  /** Download Images From List */
  download_images_from_list: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["Body_download_images_from_list"]
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ImagesDownloaded"]
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  /**
   * Enable Invocation Cache
   * @description Clears the invocation cache
   */
  enable_invocation_cache: {
    responses: {
      /** @description The operation was successful */
      200: {
        content: {
          "application/json": unknown
        }
      }
    }
  }
  /**
   * Enqueue Batch
   * @description Processes a batch and enqueues the output graphs for execution.
   */
  enqueue_batch: {
    parameters: {
      path: {
        /** @description The queue id to perform this operation on */
        queue_id: string
      }
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["Body_enqueue_batch"]
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown
        }
      }
      /** @description Created */
      201: {
        content: {
          "application/json": components["schemas"]["EnqueueBatchResult"]
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  /**
   * Enqueue Graph
   * @description Enqueues a graph for single execution.
   */
  enqueue_graph: {
    parameters: {
      path: {
        /** @description The queue id to perform this operation on */
        queue_id: string
      }
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["Body_enqueue_graph"]
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown
        }
      }
      /** @description Created */
      201: {
        content: {
          "application/json": components["schemas"]["EnqueueGraphResult"]
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  /**
   * Get Batch Status
   * @description Gets the status of the session queue
   */
  get_batch_status: {
    parameters: {
      path: {
        /** @description The batch to get the status of */
        batch_id: string
        /** @description The queue id to perform this operation on */
        queue_id: string
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["BatchStatus"]
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  /**
   * Get Board
   * @description Gets a board
   */
  get_board: {
    parameters: {
      path: {
        /** @description The id of board to get */
        board_id: string
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["BoardDTO"]
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  /** Get Config */
  get_config: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AppConfig"]
        }
      }
    }
  }
  /**
   * Get Current Queue Item
   * @description Gets the currently execution queue item
   */
  get_current_queue_item: {
    parameters: {
      path: {
        /** @description The queue id to perform this operation on */
        queue_id: string
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SessionQueueItem"]
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  /**
   * Get Image Dto
   * @description Gets an image's DTO
   */
  get_image_dto: {
    parameters: {
      path: {
        /** @description The name of image to get */
        image_name: string
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ImageDTO"]
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  /**
   * Get Image Full
   * @description Gets a full-resolution image file
   */
  get_image_full: {
    parameters: {
      path: {
        /** @description The name of full-resolution image file to get */
        image_name: string
      }
    }
    responses: {
      /** @description Return the full-resolution image */
      200: {
        content: {
          "image/png": unknown
        }
      }
      /** @description Image not found */
      404: {
        content: never
      }
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  /**
   * Get Image Metadata
   * @description Gets an image's metadata
   */
  get_image_metadata: {
    parameters: {
      path: {
        /** @description The name of image to get */
        image_name: string
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ImageMetadata"]
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  /**
   * Get Image Thumbnail
   * @description Gets a thumbnail image file
   */
  get_image_thumbnail: {
    parameters: {
      path: {
        /** @description The name of thumbnail image file to get */
        image_name: string
      }
    }
    responses: {
      /** @description Return the image thumbnail */
      200: {
        content: {
          "image/webp": unknown
        }
      }
      /** @description Image not found */
      404: {
        content: never
      }
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  /**
   * Get Image Urls
   * @description Gets an image and thumbnail URL
   */
  get_image_urls: {
    parameters: {
      path: {
        /** @description The name of the image whose URL to get */
        image_name: string
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ImageUrlsDTO"]
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  /**
   * Get Invocation Cache Status
   * @description Clears the invocation cache
   */
  get_invocation_cache_status: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["InvocationCacheStatus"]
        }
      }
    }
  }
  /**
   * Get Log Level
   * @description Returns the log level
   */
  get_log_level: {
    responses: {
      /** @description The operation was successful */
      200: {
        content: {
          "application/json": components["schemas"]["LogLevel"]
        }
      }
    }
  }
  /**
   * Get Next Queue Item
   * @description Gets the next queue item, without executing it
   */
  get_next_queue_item: {
    parameters: {
      path: {
        /** @description The queue id to perform this operation on */
        queue_id: string
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SessionQueueItem"]
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  /**
   * Get Queue Item
   * @description Gets a queue item
   */
  get_queue_item: {
    parameters: {
      path: {
        /** @description The queue item to get */
        item_id: number
        /** @description The queue id to perform this operation on */
        queue_id: string
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SessionQueueItem"]
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  /**
   * Get Queue Status
   * @description Gets the status of the session queue
   */
  get_queue_status: {
    parameters: {
      path: {
        /** @description The queue id to perform this operation on */
        queue_id: string
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SessionQueueAndProcessorStatus"]
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  /**
   * Get Session
   * @deprecated
   * @description Gets a session
   */
  get_session: {
    parameters: {
      path: {
        /** @description The id of the session to get */
        session_id: string
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["GraphExecutionState"]
        }
      }
      /** @description Session not found */
      404: {
        content: never
      }
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  /**
   * Import Model
   * @description Add a model using its local path, repo_id, or remote URL. Model characteristics will be probed and configured automatically
   */
  import_model: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["Body_import_model"]
      }
    }
    responses: {
      /** @description The model imported successfully */
      201: {
        content: {
          "application/json": components["schemas"]["CLIPVisionModelDiffusersConfig"] | components["schemas"]["ControlNetModelCheckpointConfig"] | components["schemas"]["ControlNetModelDiffusersConfig"] | components["schemas"]["IPAdapterModelInvokeAIConfig"] | components["schemas"]["LoRAModelConfig"] | components["schemas"]["ONNXStableDiffusion1ModelConfig"] | components["schemas"]["ONNXStableDiffusion2ModelConfig"] | components["schemas"]["StableDiffusion1ModelCheckpointConfig"] | components["schemas"]["StableDiffusion1ModelDiffusersConfig"] | components["schemas"]["StableDiffusion2ModelCheckpointConfig"] | components["schemas"]["StableDiffusion2ModelDiffusersConfig"] | components["schemas"]["StableDiffusionXLModelCheckpointConfig"] | components["schemas"]["StableDiffusionXLModelDiffusersConfig"] | components["schemas"]["T2IAdapterModelDiffusersConfig"] | components["schemas"]["TextualInversionModelConfig"] | components["schemas"]["VaeModelConfig"]
        }
      }
      /** @description The model could not be found */
      404: {
        content: never
      }
      /** @description There is already a model corresponding to this path or repo_id */
      409: {
        content: never
      }
      /** @description Unrecognized file/folder format */
      415: {
        content: never
      }
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
      /** @description The model appeared to import successfully, but could not be found in the model manager */
      424: {
        content: never
      }
    }
  }
  /**
   * Invoke Session
   * @deprecated
   * @description Invokes a session
   */
  invoke_session: {
    parameters: {
      path: {
        /** @description The id of the session to invoke */
        session_id: string
      }
      query: {
        /** @description Whether or not to invoke all remaining invocations */
        all?: boolean
        /** @description The id of the queue to associate the session with */
        queue_id: string
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown
        }
      }
      /** @description The invocation is queued */
      202: {
        content: never
      }
      /** @description The session has no invocations ready to invoke */
      400: {
        content: never
      }
      /** @description Session not found */
      404: {
        content: never
      }
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  /**
   * List All Board Image Names
   * @description Gets a list of images for a board
   */
  list_all_board_image_names: {
    parameters: {
      path: {
        /** @description The id of the board */
        board_id: string
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": string[]
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  /**
   * List Boards
   * @description Gets a list of boards
   */
  list_boards: {
    parameters: {
      query?: {
        /** @description Whether to list all boards */
        all?: boolean
        /** @description The number of boards per page */
        limit?: number
        /** @description The page offset */
        offset?: number
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["BoardDTO"][] | components["schemas"]["OffsetPaginatedResults_BoardDTO_"]
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  /**
   * List Ckpt Configs
   * @description Return a list of the legacy checkpoint configuration files stored in `ROOT/configs/stable-diffusion`, relative to ROOT.
   */
  list_ckpt_configs: {
    responses: {
      /** @description paths retrieved successfully */
      200: {
        content: {
          "application/json": string[]
        }
      }
    }
  }
  /**
   * List Image Dtos
   * @description Gets a list of image DTOs
   */
  list_image_dtos: {
    parameters: {
      query?: {
        /** @description The board id to filter by. Use 'none' to find images without a board. */
        board_id?: string
        /** @description The categories of image to include. */
        categories?: components["schemas"]["ImageCategory"][]
        /** @description The origin of images to list. */
        image_origin?: components["schemas"]["ResourceOrigin"]
        /** @description Whether to list intermediate images. */
        is_intermediate?: boolean
        /** @description The number of images per page */
        limit?: number
        /** @description The page offset */
        offset?: number
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["OffsetPaginatedResults_ImageDTO_"]
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  /**
   * List Models
   * @description Gets a list of models
   */
  list_models: {
    parameters: {
      query?: {
        /** @description Base models to include */
        base_models?: components["schemas"]["BaseModelType"][]
        /** @description The type of model to get */
        model_type?: components["schemas"]["ModelType"]
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ModelsList"]
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  /**
   * List Queue Items
   * @description Gets all queue items (without graphs)
   */
  list_queue_items: {
    parameters: {
      path: {
        /** @description The queue id to perform this operation on */
        queue_id: string
      }
      query?: {
        /** @description The pagination cursor */
        cursor?: number
        /** @description The number of items to fetch */
        limit?: number
        /** @description The pagination cursor priority */
        priority?: number
        /** @description The status of items to fetch */
        status?: "canceled" | "completed" | "failed" | "in_progress" | "pending"
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["CursorPaginatedResults_SessionQueueItemDTO_"]
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  /**
   * List Sessions
   * @deprecated
   * @description Gets a list of sessions, optionally searching
   */
  list_sessions: {
    parameters: {
      query?: {
        /** @description The page of results to get */
        page?: number
        /** @description The number of results per page */
        per_page?: number
        /** @description The query string to search for */
        query?: string
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedResults_GraphExecutionState_"]
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  /**
   * Merge Models
   * @description Convert a checkpoint model into a diffusers model
   */
  merge_models: {
    parameters: {
      path: {
        /** @description Base model */
        base_model: components["schemas"]["BaseModelType"]
      }
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["Body_merge_models"]
      }
    }
    responses: {
      /** @description Model converted successfully */
      200: {
        content: {
          "application/json": components["schemas"]["CLIPVisionModelDiffusersConfig"] | components["schemas"]["ControlNetModelCheckpointConfig"] | components["schemas"]["ControlNetModelDiffusersConfig"] | components["schemas"]["IPAdapterModelInvokeAIConfig"] | components["schemas"]["LoRAModelConfig"] | components["schemas"]["ONNXStableDiffusion1ModelConfig"] | components["schemas"]["ONNXStableDiffusion2ModelConfig"] | components["schemas"]["StableDiffusion1ModelCheckpointConfig"] | components["schemas"]["StableDiffusion1ModelDiffusersConfig"] | components["schemas"]["StableDiffusion2ModelCheckpointConfig"] | components["schemas"]["StableDiffusion2ModelDiffusersConfig"] | components["schemas"]["StableDiffusionXLModelCheckpointConfig"] | components["schemas"]["StableDiffusionXLModelDiffusersConfig"] | components["schemas"]["T2IAdapterModelDiffusersConfig"] | components["schemas"]["TextualInversionModelConfig"] | components["schemas"]["VaeModelConfig"]
        }
      }
      /** @description Incompatible models */
      400: {
        content: never
      }
      /** @description One or more models not found */
      404: {
        content: never
      }
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  /**
   * Parse Dynamicprompts
   * @description Creates a batch process
   */
  parse_dynamicprompts: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["Body_parse_dynamicprompts"]
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["DynamicPromptsResponse"]
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  /**
   * Pause
   * @description Pauses session processor
   */
  pause: {
    parameters: {
      path: {
        /** @description The queue id to perform this operation on */
        queue_id: string
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SessionProcessorStatus"]
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  /**
   * Prune
   * @description Prunes all completed or errored queue items
   */
  prune: {
    parameters: {
      path: {
        /** @description The queue id to perform this operation on */
        queue_id: string
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PruneResult"]
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  /**
   * Remove Image From Board
   * @description Removes an image from its board, if it had one
   */
  remove_image_from_board: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["Body_remove_image_from_board"]
      }
    }
    responses: {
      /** @description The image was removed from the board successfully */
      201: {
        content: {
          "application/json": unknown
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  /**
   * Remove Images From Board
   * @description Removes a list of images from their board, if they had one
   */
  remove_images_from_board: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["Body_remove_images_from_board"]
      }
    }
    responses: {
      /** @description Images were removed from board successfully */
      201: {
        content: {
          "application/json": components["schemas"]["RemoveImagesFromBoardResult"]
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  /**
   * Resume
   * @description Resumes session processor
   */
  resume: {
    parameters: {
      path: {
        /** @description The queue id to perform this operation on */
        queue_id: string
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SessionProcessorStatus"]
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  /** Search For Models */
  search_for_models: {
    parameters: {
      query: {
        /** @description Directory path to search for models */
        search_path: string
      }
    }
    responses: {
      /** @description Directory searched successfully */
      200: {
        content: {
          "application/json": string[]
        }
      }
      /** @description Invalid directory path */
      404: {
        content: never
      }
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  /**
   * Set Log Level
   * @description Sets the log verbosity level
   */
  set_log_level: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["LogLevel"]
      }
    }
    responses: {
      /** @description The operation was successful */
      200: {
        content: {
          "application/json": components["schemas"]["LogLevel"]
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  /** Star Images In List */
  star_images_in_list: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["Body_star_images_in_list"]
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ImagesUpdatedFromListResult"]
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  /**
   * Sync To Config
   * @description Call after making changes to models.yaml, autoimport directories or models directory to synchronize
   * in-memory data structures with disk data structures.
   */
  sync_to_config: {
    responses: {
      /** @description synchronization successful */
      201: {
        content: {
          "application/json": boolean
        }
      }
    }
  }
  /** Unstar Images In List */
  unstar_images_in_list: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["Body_unstar_images_in_list"]
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ImagesUpdatedFromListResult"]
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  /**
   * Update Board
   * @description Updates a board
   */
  update_board: {
    parameters: {
      path: {
        /** @description The id of board to update */
        board_id: string
      }
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["BoardChanges"]
      }
    }
    responses: {
      /** @description The board was updated successfully */
      201: {
        content: {
          "application/json": components["schemas"]["BoardDTO"]
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  /**
   * Update Image
   * @description Updates an image
   */
  update_image: {
    parameters: {
      path: {
        /** @description The name of the image to update */
        image_name: string
      }
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["ImageRecordChanges"]
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ImageDTO"]
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  /**
   * Update Model
   * @description Update model contents with a new config. If the model name or base fields are changed, then the model is renamed.
   */
  update_model: {
    parameters: {
      path: {
        /** @description Base model */
        base_model: components["schemas"]["BaseModelType"]
        /** @description model name */
        model_name: string
        /** @description The type of model */
        model_type: components["schemas"]["ModelType"]
      }
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["CLIPVisionModelDiffusersConfig"] | components["schemas"]["ControlNetModelCheckpointConfig"] | components["schemas"]["ControlNetModelDiffusersConfig"] | components["schemas"]["IPAdapterModelInvokeAIConfig"] | components["schemas"]["LoRAModelConfig"] | components["schemas"]["ONNXStableDiffusion1ModelConfig"] | components["schemas"]["ONNXStableDiffusion2ModelConfig"] | components["schemas"]["StableDiffusion1ModelCheckpointConfig"] | components["schemas"]["StableDiffusion1ModelDiffusersConfig"] | components["schemas"]["StableDiffusion2ModelCheckpointConfig"] | components["schemas"]["StableDiffusion2ModelDiffusersConfig"] | components["schemas"]["StableDiffusionXLModelCheckpointConfig"] | components["schemas"]["StableDiffusionXLModelDiffusersConfig"] | components["schemas"]["T2IAdapterModelDiffusersConfig"] | components["schemas"]["TextualInversionModelConfig"] | components["schemas"]["VaeModelConfig"]
      }
    }
    responses: {
      /** @description The model was updated successfully */
      200: {
        content: {
          "application/json": components["schemas"]["CLIPVisionModelDiffusersConfig"] | components["schemas"]["ControlNetModelCheckpointConfig"] | components["schemas"]["ControlNetModelDiffusersConfig"] | components["schemas"]["IPAdapterModelInvokeAIConfig"] | components["schemas"]["LoRAModelConfig"] | components["schemas"]["ONNXStableDiffusion1ModelConfig"] | components["schemas"]["ONNXStableDiffusion2ModelConfig"] | components["schemas"]["StableDiffusion1ModelCheckpointConfig"] | components["schemas"]["StableDiffusion1ModelDiffusersConfig"] | components["schemas"]["StableDiffusion2ModelCheckpointConfig"] | components["schemas"]["StableDiffusion2ModelDiffusersConfig"] | components["schemas"]["StableDiffusionXLModelCheckpointConfig"] | components["schemas"]["StableDiffusionXLModelDiffusersConfig"] | components["schemas"]["T2IAdapterModelDiffusersConfig"] | components["schemas"]["TextualInversionModelConfig"] | components["schemas"]["VaeModelConfig"]
        }
      }
      /** @description Bad request */
      400: {
        content: never
      }
      /** @description The model could not be found */
      404: {
        content: never
      }
      /** @description There is already a model corresponding to the new name */
      409: {
        content: never
      }
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  /**
   * Update Node
   * @deprecated
   * @description Updates a node in the graph and removes all linked edges
   */
  update_node: {
    parameters: {
      path: {
        /** @description The path to the node in the graph */
        node_path: string
        /** @description The id of the session */
        session_id: string
      }
    }
    requestBody: {
      content: {
        "application/json": components["schemas"]["ABSwitchFloat"] | components["schemas"]["ABSwitchInt"] | components["schemas"]["AdaptiveEQInvocation"] | components["schemas"]["AddInvocation"] | components["schemas"]["BlankImageInvocation"] | components["schemas"]["BlendLatentsInvocation"] | components["schemas"]["BooleanCastFloat"] | components["schemas"]["BooleanCastInteger"] | components["schemas"]["BooleanCollectionInvocation"] | components["schemas"]["BooleanEqualsInvocation"] | components["schemas"]["BooleanInvocation"] | components["schemas"]["BooleanNotInvocation"] | components["schemas"]["BooleanRandomInvocation"] | components["schemas"]["CannyImageProcessorInvocation"] | components["schemas"]["ClipSkipInvocation"] | components["schemas"]["CollectInvocation"] | components["schemas"]["ColorCorrectInvocation"] | components["schemas"]["ColorInvocation"] | components["schemas"]["ColorMapImageProcessorInvocation"] | components["schemas"]["CompelInvocation"] | components["schemas"]["ConditioningCollectionInvocation"] | components["schemas"]["ConditioningInvocation"] | components["schemas"]["ContentShuffleImageProcessorInvocation"] | components["schemas"]["ControlNetInvocation"] | components["schemas"]["CreateDenoiseMaskInvocation"] | components["schemas"]["CSVToIndexStringInvocation"] | components["schemas"]["CSVToStringsInvocation"] | components["schemas"]["CV2InfillInvocation"] | components["schemas"]["CvInpaintInvocation"] | components["schemas"]["DenoiseLatentsInvocation"] | components["schemas"]["DivideInvocation"] | components["schemas"]["DynamicPromptInvocation"] | components["schemas"]["ESRGANInvocation"] | components["schemas"]["FaceIdentifierInvocation"] | components["schemas"]["FaceMaskInvocation"] | components["schemas"]["FaceOffInvocation"] | components["schemas"]["FloatAbsoluteInvocation"] | components["schemas"]["FloatAddInvocation"] | components["schemas"]["FloatArcCosineInvocation"] | components["schemas"]["FloatArcSineInvocation"] | components["schemas"]["FloatArcTangentInvocation"] | components["schemas"]["FloatCastBooleanInvocation"] | components["schemas"]["FloatCastIntegerInvocation"] | components["schemas"]["FloatCeilInvocation"] | components["schemas"]["FloatCollectionInvocation"] | components["schemas"]["FloatCosineInvocation"] | components["schemas"]["FloatDivideInvocation"] | components["schemas"]["FloatEqualsInvocation"] | components["schemas"]["FloatFloorInvocation"] | components["schemas"]["FloatGreaterEqualsInvocation"] | components["schemas"]["FloatGreaterInvocation"] | components["schemas"]["FloatHyperbolicCosineInvocation"] | components["schemas"]["FloatHyperbolicSineInvocation"] | components["schemas"]["FloatHyperbolicTangentInvocation"] | components["schemas"]["FloatInverseHyerbolicCosineInvocation"] | components["schemas"]["FloatInverseHyerbolicSineInvocation"] | components["schemas"]["FloatInverseHyerbolicTangentInvocation"] | components["schemas"]["FloatInvocation"] | components["schemas"]["FloatLessEqualsInvocation"] | components["schemas"]["FloatLessInvocation"] | components["schemas"]["FloatLinearRangeInvocation"] | components["schemas"]["FloatLogInvocation"] | components["schemas"]["FloatLogNInvocation"] | components["schemas"]["FloatMathInvocation"] | components["schemas"]["FloatModuloInvocation"] | components["schemas"]["FloatMultiplyInvocation"] | components["schemas"]["FloatPowInvocation"] | components["schemas"]["FloatRandomInvocation"] | components["schemas"]["FloatRoundInvocation"] | components["schemas"]["FloatRoundToMultipleInvocation"] | components["schemas"]["FloatSineInvocation"] | components["schemas"]["FloatSqrtInvocation"] | components["schemas"]["FloatsToStringsInvocation"] | components["schemas"]["FloatSubtractInvocation"] | components["schemas"]["FloatTangentInvocation"] | components["schemas"]["FloatToIntegerInvocation"] | components["schemas"]["GraphInvocation"] | components["schemas"]["HedImageProcessorInvocation"] | components["schemas"]["IdealSizeInvocation"] | components["schemas"]["ImageBlurInvocation"] | components["schemas"]["ImageChannelInvocation"] | components["schemas"]["ImageChannelMultiplyInvocation"] | components["schemas"]["ImageChannelOffsetInvocation"] | components["schemas"]["ImageCollectionInvocation"] | components["schemas"]["ImageConvertInvocation"] | components["schemas"]["ImageCropInvocation"] | components["schemas"]["ImageHueAdjustmentInvocation"] | components["schemas"]["ImageInverseLerpInvocation"] | components["schemas"]["ImageInvocation"] | components["schemas"]["ImageLerpInvocation"] | components["schemas"]["ImageMultiplyInvocation"] | components["schemas"]["ImageNSFWBlurInvocation"] | components["schemas"]["ImagePasteInvocation"] | components["schemas"]["ImageProcessorInvocation"] | components["schemas"]["ImageResizeInvocation"] | components["schemas"]["ImageScaleInvocation"] | components["schemas"]["ImagesToGridsInvocation"] | components["schemas"]["ImageToLatentsInvocation"] | components["schemas"]["ImageWatermarkInvocation"] | components["schemas"]["InfillColorInvocation"] | components["schemas"]["InfillPatchMatchInvocation"] | components["schemas"]["InfillTileInvocation"] | components["schemas"]["IntegerAbsoluteInvocation"] | components["schemas"]["IntegerAddInvocation"] | components["schemas"]["IntegerCastBooleanInvocation"] | components["schemas"]["IntegerCastFloatInvocation"] | components["schemas"]["IntegerCollectionInvocation"] | components["schemas"]["IntegerDivideInvocation"] | components["schemas"]["IntegerEqualsInvocation"] | components["schemas"]["IntegerGreaterEqualsInvocation"] | components["schemas"]["IntegerGreaterInvocation"] | components["schemas"]["IntegerInvocation"] | components["schemas"]["IntegerLessEqualsInvocation"] | components["schemas"]["IntegerLessInvocation"] | components["schemas"]["IntegerMathInvocation"] | components["schemas"]["IntegerModuloInvocation"] | components["schemas"]["IntegerMultiplyInvocation"] | components["schemas"]["IntegerRandomInvocation"] | components["schemas"]["IntegerSubtractInvocation"] | components["schemas"]["IntsToStringsInvocation"] | components["schemas"]["IPAdapterInvocation"] | components["schemas"]["IterateInvocation"] | components["schemas"]["LaMaInfillInvocation"] | components["schemas"]["LatentsCollectionInvocation"] | components["schemas"]["LatentsInvocation"] | components["schemas"]["LatentsToImageInvocation"] | components["schemas"]["LeresImageProcessorInvocation"] | components["schemas"]["LineartAnimeImageProcessorInvocation"] | components["schemas"]["LineartImageProcessorInvocation"] | components["schemas"]["LoraLoaderInvocation"] | components["schemas"]["MainModelLoaderInvocation"] | components["schemas"]["MaskCombineInvocation"] | components["schemas"]["MaskEdgeInvocation"] | components["schemas"]["MaskFromAlphaInvocation"] | components["schemas"]["MediapipeFaceProcessorInvocation"] | components["schemas"]["MetadataAccumulatorInvocation"] | components["schemas"]["MidasDepthImageProcessorInvocation"] | components["schemas"]["MlsdImageProcessorInvocation"] | components["schemas"]["MultiplyInvocation"] | components["schemas"]["NoiseInvocation"] | components["schemas"]["NormalbaeImageProcessorInvocation"] | components["schemas"]["ONNXLatentsToImageInvocation"] | components["schemas"]["OnnxModelLoaderInvocation"] | components["schemas"]["ONNXPromptInvocation"] | components["schemas"]["ONNXTextToLatentsInvocation"] | components["schemas"]["OpenposeImageProcessorInvocation"] | components["schemas"]["PidiImageProcessorInvocation"] | components["schemas"]["PromptsFromFileInvocation"] | components["schemas"]["PromptsToFileInvocation"] | components["schemas"]["PromptStrengthInvocation"] | components["schemas"]["PromptStrengthsCombineInvocation"] | components["schemas"]["PTFieldsCollectInvocation"] | components["schemas"]["PTFieldsExpandInvocation"] | components["schemas"]["RandomFloatInvocation"] | components["schemas"]["RandomIntInvocation"] | components["schemas"]["RandomRangeInvocation"] | components["schemas"]["RangeInvocation"] | components["schemas"]["RangeOfSizeInvocation"] | components["schemas"]["ResizeLatentsInvocation"] | components["schemas"]["RoundInvocation"] | components["schemas"]["SaveImageInvocation"] | components["schemas"]["ScaleLatentsInvocation"] | components["schemas"]["SchedulerInvocation"] | components["schemas"]["SDXLCompelPromptInvocation"] | components["schemas"]["SDXLLoraLoaderInvocation"] | components["schemas"]["SDXLModelLoaderInvocation"] | components["schemas"]["SDXLRefinerCompelPromptInvocation"] | components["schemas"]["SDXLRefinerModelLoaderInvocation"] | components["schemas"]["SeamlessModeInvocation"] | components["schemas"]["SegmentAnythingProcessorInvocation"] | components["schemas"]["ShowImageInvocation"] | components["schemas"]["StepParamEasingInvocation"] | components["schemas"]["StringCollectionInvocation"] | components["schemas"]["StringInvocation"] | components["schemas"]["StringJoinInvocation"] | components["schemas"]["StringJoinThreeInvocation"] | components["schemas"]["StringReplaceInvocation"] | components["schemas"]["StringSplitInvocation"] | components["schemas"]["StringSplitNegInvocation"] | components["schemas"]["StringToFloatInvocation"] | components["schemas"]["StringToIntInvocation"] | components["schemas"]["StringToSchedulerInvocation"] | components["schemas"]["SubtractInvocation"] | components["schemas"]["T2IAdapterInvocation"] | components["schemas"]["TileResamplerProcessorInvocation"] | components["schemas"]["VaeLoaderInvocation"] | components["schemas"]["ValueToValueInvocation"] | components["schemas"]["XYCollectCSVInvocation"] | components["schemas"]["XYCollectInvocation"] | components["schemas"]["XYExpandInvocation"] | components["schemas"]["XYImageCollectInvocation"] | components["schemas"]["XYImagesToGridInvocation"] | components["schemas"]["ZoeDepthImageProcessorInvocation"]
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["GraphExecutionState"]
        }
      }
      /** @description Invalid node or link */
      400: {
        content: never
      }
      /** @description Session not found */
      404: {
        content: never
      }
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  /**
   * Upload Image
   * @description Uploads an image
   */
  upload_image: {
    parameters: {
      query: {
        /** @description The board to add this image to, if any */
        board_id?: string
        /** @description Whether to crop the image */
        crop_visible?: boolean
        /** @description The category of the image */
        image_category: components["schemas"]["ImageCategory"]
        /** @description Whether this is an intermediate image */
        is_intermediate: boolean
        /** @description The session ID associated with this upload, if any */
        session_id?: string
      }
    }
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["Body_upload_image"]
      }
    }
    responses: {
      /** @description The image was uploaded successfully */
      201: {
        content: {
          "application/json": components["schemas"]["ImageDTO"]
        }
      }
      /** @description Image upload failed */
      415: {
        content: never
      }
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
};
